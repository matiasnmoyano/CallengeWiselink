%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1406.i032.017.F.m003.c5.business chart icon.eps
%%Creator: Adobe Illustrator(R) 16.2
%%For: Дина
%%CreationDate: 6/22/2014
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.2.0 x723 R agm 4.6676 ct 5.2594%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1406.i032.013.S.m003.c10.business chart icon flat</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2014-06-22T23:57:35+04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-06-22T23:57:35+04:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-06-22T23:57:35+04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9S4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqk3nPzHH5&#xA;a8ralrjx+r9RhMiRdA0hIWNSewLsAcsxY+OQj3sZyoW+Tr/86/zNvbuS4OuTW/M1ENuEjjUdgqgd&#xA;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&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kv/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:C9D6A72845FAE31184B692B13D056A76</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:C9D6A72845FAE31184B692B13D056A76</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:C8D6A72845FAE31184B692B13D056A76</stRef:instanceID>
            <stRef:documentID>xmp.did:C8D6A72845FAE31184B692B13D056A76</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:99bf226b-e8ee-e348-9e65-bda0a1412cb2</stEvt:instanceID>
                  <stEvt:when>2014-06-04T00:46:25+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:5a65e523-a65c-5d4b-9c66-613fa2631ed9</stEvt:instanceID>
                  <stEvt:when>2014-06-12T18:37:50+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D0907E703EF2E311B05DBBD37B4DEA8E</stEvt:instanceID>
                  <stEvt:when>2014-06-12T18:40:52+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D1907E703EF2E311B05DBBD37B4DEA8E</stEvt:instanceID>
                  <stEvt:when>2014-06-12T18:45:52+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:5106D38450F5E311BBACDB2BE9ECB306</stEvt:instanceID>
                  <stEvt:when>2014-06-17T00:16:19+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:C8D6A72845FAE31184B692B13D056A76</stEvt:instanceID>
                  <stEvt:when>2014-06-22T23:53:21+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:C9D6A72845FAE31184B692B13D056A76</stEvt:instanceID>
                  <stEvt:when>2014-06-22T23:57:35+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=3 G=168 B=222</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>3</xmpG:red>
                           <xmpG:green>168</xmpG:green>
                           <xmpG:blue>222</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=199 G=235 B=251</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>199</xmpG:red>
                           <xmpG:green>235</xmpG:green>
                           <xmpG:blue>251</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=1 G=61 B=121</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>1</xmpG:red>
                           <xmpG:green>61</xmpG:green>
                           <xmpG:blue>121</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=241 G=52 B=82</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>52</xmpG:green>
                           <xmpG:blue>82</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 11.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.996078 .996078 .996078 rgb
f
319.047 98.1538 mo
319.047 103.654 314.547 108.154 309.047 108.154 cv
251.89 108.154 li
246.39 108.154 241.89 103.654 241.89 98.1538 cv
241.89 40.9966 li
241.89 35.4966 246.39 30.9966 251.89 30.9966 cv
309.047 30.9966 li
314.547 30.9966 319.047 35.4966 319.047 40.9966 cv
319.047 98.1538 li
cp
.780392 .921569 .984314 rgb
f
308.24 93.2197 mo
304.74 91.8198 li
304.74 92.7822 li
254.533 92.7822 li
254.533 48.0313 li
255.496 48.0313 li
254.096 44.5313 li
252.696 48.0313 li
253.658 48.0313 li
253.658 92.7822 li
253.658 93.2197 li
253.658 93.6572 li
304.74 93.6572 li
304.74 94.6196 li
308.24 93.2197 li
cp
.945098 .203922 .321569 rgb
f
299.455 55.2686 mo
299.455 56.8994 298.133 58.2217 296.502 58.2217 cv
294.871 58.2217 293.549 56.8994 293.549 55.2686 cv
293.549 53.6377 294.871 52.3154 296.502 52.3154 cv
298.133 52.3154 299.455 53.6377 299.455 55.2686 cv
cp
1 1 1 rgb
f
294.29 55.2686 mo
294.29 54.9868 294.348 54.7202 294.444 54.4717 cv
295.236 53.6797 li
295.705 53.2114 li
295.952 53.1147 296.22 53.0571 296.501 53.0571 cv
296.608 53.0571 296.712 53.0737 296.815 53.0894 cv
295.633 54.2725 li
294.548 55.3569 li
294.321 55.583 li
294.308 55.4795 294.29 55.3765 294.29 55.2686 cv
cp
297.797 53.4849 mo
297.987 53.623 298.154 53.7896 298.291 53.98 cv
297.998 54.2725 li
296.914 55.3569 li
295.633 56.6387 li
295.213 57.0581 li
295.023 56.9209 294.855 56.7534 294.719 56.5645 cv
295.236 56.0454 li
296.321 54.9609 li
297.603 53.6797 li
297.797 53.4849 li
cp
298.683 54.9663 mo
298.696 55.0659 298.714 55.165 298.714 55.2686 cv
298.714 55.5576 298.653 55.8311 298.553 56.0845 cv
297.998 56.6387 li
297.317 57.3193 li
297.065 57.4204 296.791 57.4795 296.501 57.4795 cv
296.398 57.4795 296.299 57.4634 296.198 57.4492 cv
296.321 57.3276 li
297.603 56.0454 li
298.683 54.9663 li
cp
296.501 58.2686 mo
298.155 58.2686 299.502 56.9224 299.502 55.2686 cv
299.502 53.6147 298.155 52.2686 296.501 52.2686 cv
294.847 52.2686 293.502 53.6147 293.502 55.2686 cv
293.502 56.9224 294.847 58.2686 296.501 58.2686 cv
cp
.945098 .203922 .321569 rgb
f
274.258 66.2847 mo
274.258 67.9155 272.936 69.2378 271.305 69.2378 cv
269.674 69.2378 268.352 67.9155 268.352 66.2847 cv
268.352 64.6538 269.674 63.3315 271.305 63.3315 cv
272.936 63.3315 274.258 64.6538 274.258 66.2847 cv
cp
1 1 1 rgb
f
269.093 66.2847 mo
269.093 66.0029 269.15 65.7363 269.247 65.4878 cv
270.039 64.6958 li
270.508 64.2275 li
270.755 64.1309 271.022 64.0732 271.304 64.0732 cv
271.411 64.0732 271.515 64.0898 271.618 64.1055 cv
270.436 65.2886 li
269.351 66.373 li
269.124 66.5991 li
269.11 66.4956 269.093 66.3926 269.093 66.2847 cv
cp
272.6 64.501 mo
272.79 64.6392 272.957 64.8057 273.094 64.9961 cv
272.801 65.2886 li
271.717 66.373 li
270.436 67.6548 li
270.016 68.0742 li
269.826 67.937 269.658 67.7695 269.521 67.5806 cv
270.039 67.0615 li
271.124 65.9771 li
272.405 64.6958 li
272.6 64.501 li
cp
273.485 65.9824 mo
273.499 66.082 273.517 66.1812 273.517 66.2847 cv
273.517 66.5737 273.456 66.8472 273.355 67.1006 cv
272.801 67.6548 li
272.12 68.3354 li
271.868 68.4365 271.594 68.4956 271.304 68.4956 cv
271.201 68.4956 271.102 68.4795 271.001 68.4653 cv
271.124 68.3438 li
272.405 67.0615 li
273.485 65.9824 li
cp
271.304 69.2847 mo
272.958 69.2847 274.305 67.9385 274.305 66.2847 cv
274.305 64.6309 272.958 63.2847 271.304 63.2847 cv
269.649 63.2847 268.305 64.6309 268.305 66.2847 cv
268.305 67.9385 269.649 69.2847 271.304 69.2847 cv
cp
.945098 .203922 .321569 rgb
f
295.852 80.3843 mo
295.852 82.0151 294.529 83.3374 292.898 83.3374 cv
291.268 83.3374 289.945 82.0151 289.945 80.3843 cv
289.945 78.7534 291.268 77.4312 292.898 77.4312 cv
294.529 77.4312 295.852 78.7534 295.852 80.3843 cv
cp
1 1 1 rgb
f
290.687 80.3843 mo
290.687 80.1025 290.744 79.8359 290.841 79.5874 cv
291.633 78.7954 li
292.102 78.3271 li
292.349 78.2305 292.616 78.1729 292.897 78.1729 cv
293.005 78.1729 293.108 78.1895 293.212 78.2051 cv
292.029 79.3882 li
290.944 80.4727 li
290.718 80.6987 li
290.704 80.5952 290.687 80.4922 290.687 80.3843 cv
cp
294.193 78.6006 mo
294.384 78.7388 294.551 78.9053 294.688 79.0957 cv
294.395 79.3882 li
293.311 80.4727 li
292.029 81.7544 li
291.609 82.1738 li
291.42 82.0366 291.252 81.8691 291.115 81.6802 cv
291.633 81.1611 li
292.718 80.0767 li
293.999 78.7954 li
294.193 78.6006 li
cp
295.079 80.082 mo
295.093 80.1816 295.11 80.2808 295.11 80.3843 cv
295.11 80.6733 295.05 80.9468 294.949 81.2002 cv
294.395 81.7544 li
293.714 82.4351 li
293.462 82.5361 293.188 82.5952 292.897 82.5952 cv
292.795 82.5952 292.695 82.5791 292.595 82.5649 cv
292.718 82.4434 li
293.999 81.1611 li
295.079 80.082 li
cp
292.897 83.3843 mo
294.552 83.3843 295.898 82.0381 295.898 80.3843 cv
295.898 78.7305 294.552 77.3843 292.897 77.3843 cv
291.243 77.3843 289.898 78.7305 289.898 80.3843 cv
289.898 82.0381 291.243 83.3843 292.897 83.3843 cv
cp
.945098 .203922 .321569 rgb
f
273.947 81.8721 mo
275.407 81.8721 276.591 80.6895 276.591 79.229 cv
276.591 77.7695 275.407 76.5859 273.947 76.5859 cv
272.487 76.5859 271.305 77.7695 271.305 79.229 cv
271.305 80.6895 272.487 81.8721 273.947 81.8721 cv
cp
1 1 1 rgb
f
260.725 83.2563 mo
259.047 83.2563 257.682 84.6221 257.682 86.2993 cv
257.682 87.9766 259.047 89.3423 260.725 89.3423 cv
262.403 89.3423 263.769 87.9766 263.769 86.2993 cv
263.769 84.6221 262.403 83.2563 260.725 83.2563 cv
cp
.945098 .203922 .321569 rgb
f
280.898 58.167 mo
279.975 58.167 279.224 58.918 279.224 59.8418 cv
279.224 60.7651 279.975 61.5166 280.898 61.5166 cv
281.822 61.5166 282.572 60.7651 282.572 59.8418 cv
282.572 58.918 281.822 58.167 280.898 58.167 cv
cp
f
286.916 68.2686 mo
285.916 68.2686 285.1 69.083 285.1 70.084 cv
285.1 71.0854 285.916 71.9004 286.916 71.9004 cv
287.917 71.9004 288.731 71.0854 288.731 70.084 cv
288.731 69.083 287.917 68.2686 286.916 68.2686 cv
cp
f
264.967 75.0664 mo
264.129 75.0664 263.447 75.748 263.447 76.5859 cv
263.447 77.4238 264.129 78.105 264.967 78.105 cv
265.805 78.105 266.486 77.4238 266.486 76.5859 cv
266.486 75.748 265.805 75.0664 264.967 75.0664 cv
cp
f
273.947 57.2109 mo
275.021 57.2109 275.89 56.3418 275.89 55.2686 cv
275.89 54.1958 275.021 53.3262 273.947 53.3262 cv
272.875 53.3262 272.005 54.1958 272.005 55.2686 cv
272.005 56.3418 272.875 57.2109 273.947 57.2109 cv
cp
1 1 1 rgb
f
295.542 67.8496 mo
297.002 67.8496 298.185 66.666 298.185 65.2065 cv
298.185 63.7466 297.002 62.563 295.542 62.563 cv
294.083 62.563 292.898 63.7466 292.898 65.2065 cv
292.898 66.666 294.083 67.8496 295.542 67.8496 cv
cp
f
102.469 409.004 mo
102.469 414.504 97.9688 419.004 92.4688 419.004 cv
35.3115 419.004 li
29.8115 419.004 25.3115 414.504 25.3115 409.004 cv
25.3115 351.846 li
25.3115 346.346 29.8115 341.846 35.3115 341.846 cv
92.4688 341.846 li
97.9688 341.846 102.469 346.346 102.469 351.846 cv
102.469 409.004 li
cp
.00392157 .239216 .47451 rgb
f
82.3916 407.678 mo
82.3916 398.928 li
91.1436 398.928 li
91.1436 407.678 li
82.3916 407.678 li
cp
36.6357 398.928 mo
45.3877 398.928 li
45.3877 407.678 li
36.6357 407.678 li
36.6357 398.928 li
cp
45.3877 353.172 mo
45.3877 361.922 li
36.6357 361.922 li
36.6357 353.172 li
45.3877 353.172 li
cp
82.3916 371.074 mo
82.3916 362.322 li
91.1436 362.322 li
91.1436 371.074 li
82.3916 371.074 li
cp
82.3916 380.225 mo
82.3916 371.473 li
91.1436 371.473 li
91.1436 380.225 li
82.3916 380.225 li
cp
82.3916 389.375 mo
82.3916 380.625 li
91.1436 380.625 li
91.1436 389.375 li
82.3916 389.375 li
cp
82.3916 389.775 mo
91.1436 389.775 li
91.1436 398.527 li
82.3916 398.527 li
82.3916 389.775 li
cp
73.2402 398.527 mo
73.2402 389.775 li
81.9922 389.775 li
81.9922 398.527 li
73.2402 398.527 li
cp
73.2402 398.928 mo
81.9922 398.928 li
81.9922 407.678 li
73.2402 407.678 li
73.2402 398.928 li
cp
64.0908 398.928 mo
72.8408 398.928 li
72.8408 407.678 li
64.0908 407.678 li
64.0908 398.928 li
cp
54.9385 398.928 mo
63.6904 398.928 li
63.6904 407.678 li
54.9385 407.678 li
54.9385 398.928 li
cp
54.5391 398.928 mo
54.5391 407.678 li
45.7871 407.678 li
45.7871 398.928 li
54.5391 398.928 li
cp
45.7871 389.775 mo
54.5391 389.775 li
54.5391 398.527 li
45.7871 398.527 li
45.7871 389.775 li
cp
45.3877 389.775 mo
45.3877 398.527 li
36.6357 398.527 li
36.6357 389.775 li
45.3877 389.775 li
cp
45.3877 380.625 mo
45.3877 389.375 li
36.6357 389.375 li
36.6357 380.625 li
45.3877 380.625 li
cp
45.3877 371.473 mo
45.3877 380.225 li
36.6357 380.225 li
36.6357 371.473 li
45.3877 371.473 li
cp
45.3877 371.074 mo
36.6357 371.074 li
36.6357 362.322 li
45.3877 362.322 li
45.3877 371.074 li
cp
54.5391 362.322 mo
54.5391 371.074 li
45.7871 371.074 li
45.7871 362.322 li
54.5391 362.322 li
cp
54.5391 361.922 mo
45.7871 361.922 li
45.7871 353.172 li
54.5391 353.172 li
54.5391 361.922 li
cp
63.6904 361.922 mo
54.9385 361.922 li
54.9385 353.172 li
63.6904 353.172 li
63.6904 361.922 li
cp
72.8408 361.922 mo
64.0908 361.922 li
64.0908 353.172 li
72.8408 353.172 li
72.8408 361.922 li
cp
73.2402 361.922 mo
73.2402 353.172 li
81.9922 353.172 li
81.9922 361.922 li
73.2402 361.922 li
cp
73.2402 371.074 mo
73.2402 362.322 li
81.9922 362.322 li
81.9922 371.074 li
73.2402 371.074 li
cp
73.2402 380.225 mo
73.2402 371.473 li
81.9922 371.473 li
81.9922 380.225 li
73.2402 380.225 li
cp
73.2402 380.625 mo
81.9922 380.625 li
81.9922 389.375 li
73.2402 389.375 li
73.2402 380.625 li
cp
64.0908 389.375 mo
64.0908 380.625 li
72.8408 380.625 li
72.8408 389.375 li
64.0908 389.375 li
cp
64.0908 389.775 mo
72.8408 389.775 li
72.8408 398.527 li
64.0908 398.527 li
64.0908 389.775 li
cp
63.6904 389.775 mo
63.6904 398.527 li
54.9385 398.527 li
54.9385 389.775 li
63.6904 389.775 li
cp
54.9385 380.625 mo
63.6904 380.625 li
63.6904 389.375 li
54.9385 389.375 li
54.9385 380.625 li
cp
54.5391 380.625 mo
54.5391 389.375 li
45.7871 389.375 li
45.7871 380.625 li
54.5391 380.625 li
cp
54.5391 380.225 mo
45.7871 380.225 li
45.7871 371.473 li
54.5391 371.473 li
54.5391 380.225 li
cp
63.6904 371.473 mo
63.6904 380.225 li
54.9385 380.225 li
54.9385 371.473 li
63.6904 371.473 li
cp
63.6904 371.074 mo
54.9385 371.074 li
54.9385 362.322 li
63.6904 362.322 li
63.6904 371.074 li
cp
72.8408 371.473 mo
72.8408 380.225 li
64.0908 380.225 li
64.0908 371.473 li
72.8408 371.473 li
cp
64.0908 371.074 mo
64.0908 362.322 li
72.8408 362.322 li
72.8408 371.074 li
64.0908 371.074 li
cp
91.1436 361.922 mo
82.3916 361.922 li
82.3916 353.172 li
91.1436 353.172 li
91.1436 361.922 li
cp
36.2354 352.771 mo
36.2354 408.078 li
91.5439 408.078 li
91.5439 352.771 li
36.2354 352.771 li
cp
1 1 1 rgb
f
91.2627 388.09 mo
91.2607 388.09 li
89.1689 388.09 87.4561 380.713 86.2041 375.324 cv
84.4609 367.811 82.9541 361.322 79.5908 361.322 cv
79.5889 361.322 79.5869 361.322 79.584 361.322 cv
76.2344 361.33 74.7871 367.041 73.2549 373.088 cv
72.0635 377.791 70.5811 383.643 68.4717 383.648 cv
68.4717 383.648 68.4697 383.648 68.4688 383.648 cv
66.376 383.648 65.1924 378.629 64.1465 374.201 cv
62.8516 368.709 61.627 363.521 58.2686 363.521 cv
58.2656 363.521 58.2627 363.521 58.2598 363.521 cv
54.9951 363.529 53.8037 371.383 52.1299 384.193 cv
51.127 391.869 49.6113 403.469 47.582 403.473 cv
47.5811 403.473 li
45.5332 403.473 43.9512 393.863 42.9033 387.504 cv
41.1367 376.771 39.8887 370.193 36.6484 370.193 cv
36.6465 370.193 36.6445 370.193 36.6416 370.193 cv
36.6465 371.793 li
36.6465 371.793 36.6465 371.793 36.6484 371.793 cv
38.6953 371.793 40.2783 381.402 41.3252 387.764 cv
43.0918 398.494 44.3408 405.074 47.5811 405.074 cv
47.583 405.074 47.584 405.074 47.5859 405.074 cv
50.8516 405.066 52.042 397.213 53.7168 384.4 cv
54.7197 376.727 56.2344 365.127 58.2637 365.121 cv
58.2656 365.121 58.2656 365.121 58.2666 365.121 cv
60.3604 365.121 61.5439 370.141 62.5889 374.568 cv
63.8857 380.061 65.1094 385.248 68.4688 385.248 cv
68.4697 385.248 68.4736 385.248 68.4766 385.248 cv
71.8262 385.24 73.2734 379.527 74.8057 373.48 cv
75.9971 368.779 77.4795 362.928 79.5889 362.922 cv
79.5908 362.922 li
81.6826 362.922 83.3955 370.301 84.6465 375.688 cv
86.3906 383.201 87.8965 389.691 91.2607 389.691 cv
91.2627 389.691 91.2637 389.691 91.2666 389.691 cv
91.2627 388.09 li
cp
.945098 .203922 .321569 rgb
f
91.2607 371.363 mo
88.0498 371.363 86.3545 374.596 84.7168 377.721 cv
83.2344 380.549 81.834 383.219 79.5908 383.219 cv
79.5889 383.219 79.5889 383.219 79.5869 383.219 cv
77.3203 383.217 76.0596 381.012 74.7246 378.678 cv
73.292 376.174 71.6689 373.334 68.4746 373.332 cv
68.4736 373.332 68.4697 373.332 68.4688 373.332 cv
65.2627 373.332 63.8809 375.924 62.6621 378.213 cv
61.5088 380.377 60.5137 382.246 58.2666 382.246 cv
58.2656 382.246 58.2637 382.246 58.2627 382.246 cv
56.1309 382.242 54.834 377.848 53.6904 373.973 cv
52.2627 369.129 50.9121 364.553 47.585 364.551 cv
47.583 364.551 47.583 364.551 47.5811 364.551 cv
44.2979 364.551 42.8066 368.563 41.3643 372.441 cv
40.1123 375.809 38.8184 379.291 36.6465 379.291 cv
36.6455 379.291 li
36.6436 380.891 li
36.6455 380.891 36.6465 380.891 36.6475 380.891 cv
39.9297 380.891 41.4219 376.879 42.8643 373 cv
44.1162 369.633 45.4111 366.15 47.5811 366.15 cv
47.582 366.15 47.583 366.15 47.583 366.15 cv
49.7158 366.152 51.0127 370.547 52.1563 374.424 cv
53.584 379.268 54.9346 383.842 58.2607 383.846 cv
58.2637 383.846 58.2656 383.846 58.2676 383.846 cv
61.4736 383.846 62.8564 381.252 64.0752 378.965 cv
65.2266 376.801 66.2236 374.932 68.4688 374.932 cv
68.4697 374.932 68.4717 374.932 68.4736 374.932 cv
70.7402 374.934 72.001 377.139 73.3359 379.473 cv
74.7686 381.977 76.3916 384.816 79.5859 384.82 cv
79.5869 384.82 79.5889 384.82 79.5908 384.82 cv
82.8018 384.82 84.4971 381.588 86.1338 378.463 cv
87.6172 375.635 89.0166 372.963 91.2607 372.963 cv
91.2627 372.963 91.2627 372.963 91.2637 372.963 cv
91.2656 371.363 li
91.2637 371.363 91.2627 371.363 91.2607 371.363 cv
cp
1 1 1 rgb
f
319.047 409.004 mo
319.047 414.504 314.547 419.004 309.047 419.004 cv
251.89 419.004 li
246.39 419.004 241.89 414.504 241.89 409.004 cv
241.89 351.846 li
241.89 346.346 246.39 341.846 251.89 341.846 cv
309.047 341.846 li
314.547 341.846 319.047 346.346 319.047 351.846 cv
319.047 409.004 li
cp
.780392 .921569 .984314 rgb
f
308.24 404.068 mo
304.74 402.668 li
304.74 403.631 li
254.533 403.631 li
254.533 358.879 li
255.496 358.879 li
254.096 355.379 li
252.696 358.879 li
253.658 358.879 li
253.658 403.631 li
253.658 404.068 li
253.658 404.506 li
304.74 404.506 li
304.74 405.469 li
308.24 404.068 li
cp
.945098 .203922 .321569 rgb
f
258.055 390.277 mo
258.055 386.877 li
261.455 386.877 li
261.455 390.277 li
258.055 390.277 li
cp
269.64 381.66 mo
272.465 381.66 li
272.465 381.01 li
277.286 383.318 li
273.197 392.018 li
269.965 392.018 li
269.965 392.906 li
264.688 390.441 li
269.64 381.66 li
cp
284.885 369.035 mo
288.084 369.035 li
294.291 374.029 li
286.625 384.764 li
283.518 384.764 li
283.518 385.414 li
278.349 382.939 li
284.885 369.035 li
cp
283.917 364.836 mo
287.317 364.836 li
287.317 368.234 li
283.917 368.234 li
283.917 364.836 li
cp
274.165 396.217 mo
270.765 396.217 li
270.765 392.816 li
274.165 392.816 li
274.165 396.217 li
cp
302.314 376.906 mo
302.314 380.307 li
298.914 380.307 li
298.914 376.906 li
302.314 376.906 li
cp
262.255 390.188 mo
263.567 390.801 li
260.48 396.275 li
257.654 396.275 li
257.654 400.475 li
261.854 400.475 li
261.854 396.275 li
261.398 396.275 li
264.294 391.141 li
269.965 393.791 li
269.965 397.018 li
274.965 397.018 li
274.965 392.018 li
274.082 392.018 li
278.008 383.664 li
283.518 386.303 li
283.518 388.965 li
287.717 388.965 li
287.717 384.764 li
287.607 384.764 li
294.914 374.531 li
298.114 377.107 li
298.114 381.105 li
303.114 381.105 li
303.114 376.105 li
298.146 376.105 li
295.38 373.879 li
301.706 365.021 li
304.814 365.021 li
304.814 360.82 li
300.614 360.82 li
300.614 365.021 li
300.724 365.021 li
294.756 373.377 li
288.117 368.033 li
288.117 364.035 li
283.117 364.035 li
283.117 369.035 li
284 369.035 li
277.627 382.594 li
272.465 380.123 li
272.465 377.461 li
268.264 377.461 li
268.264 381.66 li
268.722 381.66 li
263.962 390.102 li
262.255 389.303 li
262.255 386.076 li
257.255 386.076 li
257.255 391.076 li
262.255 391.076 li
262.255 390.188 li
cp
f
210.24 98.1538 mo
210.24 103.654 205.74 108.154 200.24 108.154 cv
143.083 108.154 li
137.583 108.154 133.083 103.654 133.083 98.1538 cv
133.083 40.9966 li
133.083 35.4966 137.583 30.9966 143.083 30.9966 cv
200.24 30.9966 li
205.74 30.9966 210.24 35.4966 210.24 40.9966 cv
210.24 98.1538 li
cp
.0117647 .658824 .870588 rgb
f
166.197 96.3813 mo
167.963 96.7397 170 97.0752 171.871 97.0752 cv
179.024 97.0752 184.844 94.5698 190.198 89.6846 cv
172.257 71.7173 li
166.197 96.3813 li
cp
.945098 .203922 .321569 rgb
f
189.992 89.748 mo
189.118 90.6211 li
189.492 90.311 189.857 89.9941 190.214 89.6631 cv
190.146 89.5938 li
189.992 89.748 li
cp
1 1 1 rgb
f
164.047 95.9897 mo
170.57 69.4307 li
170.57 42.0752 li
155.99 42.6538 144.308 54.7627 144.308 69.5645 cv
144.308 81.8911 152.371 92.604 164.047 95.9897 cv
cp
f
187.591 89.8643 mo
186.292 91.1719 li
185.191 92.2783 li
183.891 93.5854 li
182.792 94.6919 li
182.76 94.7231 li
183.763 94.2749 184.737 93.7598 185.682 93.1899 cv
185.89 92.9805 li
186.99 91.874 li
188.29 90.5669 li
189.39 89.4604 li
189.644 89.2051 li
188.946 88.502 li
188.691 88.7578 li
187.591 89.8643 li
cp
f
185.191 87.4502 mo
183.891 88.7578 li
182.792 89.8643 li
181.492 91.1719 li
180.391 92.2783 li
179.091 93.5854 li
177.992 94.6919 li
176.691 95.999 li
175.963 96.7319 li
176.542 96.6401 177.118 96.5317 177.688 96.4028 cv
178.69 95.394 li
179.79 94.2881 li
181.089 92.9805 li
182.19 91.874 li
183.49 90.5669 li
184.589 89.4604 li
185.89 88.1528 li
186.99 87.0464 li
187.245 86.791 li
186.546 86.0884 li
186.292 86.3442 li
185.191 87.4502 li
cp
f
182.792 85.0366 mo
181.492 86.3442 li
180.391 87.4502 li
179.091 88.7578 li
177.992 89.8643 li
176.691 91.1719 li
175.591 92.2783 li
174.292 93.5854 li
173.191 94.6919 li
171.891 95.999 li
170.843 97.0542 li
171.117 97.062 171.388 97.0752 171.66 97.0752 cv
171.852 97.0752 172.042 97.0659 172.234 97.062 cv
172.589 96.7021 li
173.89 95.394 li
174.99 94.2881 li
176.29 92.9805 li
177.39 91.874 li
178.69 90.5669 li
179.79 89.4604 li
181.089 88.1528 li
182.19 87.0464 li
183.49 85.7393 li
184.589 84.6328 li
184.844 84.3774 li
184.146 83.6748 li
183.891 83.9302 li
182.792 85.0366 li
cp
f
180.391 82.6226 mo
179.091 83.9302 li
177.992 85.0366 li
176.691 86.3442 li
175.591 87.4502 li
174.292 88.7578 li
173.191 89.8643 li
171.891 91.1719 li
170.792 92.2783 li
169.492 93.5854 li
168.391 94.6919 li
167.091 95.999 li
166.516 96.5771 li
166.914 96.6533 167.312 96.7236 167.71 96.7827 cv
167.79 96.7021 li
169.089 95.394 li
170.19 94.2881 li
171.49 92.9805 li
172.589 91.874 li
173.89 90.5669 li
174.99 89.4604 li
176.29 88.1528 li
177.39 87.0464 li
178.69 85.7393 li
179.79 84.6328 li
181.089 83.3247 li
182.19 82.2192 li
182.445 81.9639 li
181.746 81.2607 li
181.492 81.5161 li
180.391 82.6226 li
cp
f
177.992 80.209 mo
176.691 81.5161 li
175.591 82.6226 li
174.292 83.9302 li
173.191 85.0366 li
171.891 86.3442 li
170.792 87.4502 li
169.492 88.7578 li
168.391 89.8643 li
167.608 90.6523 li
167.149 92.5186 li
167.79 91.874 li
169.089 90.5669 li
170.19 89.4604 li
171.49 88.1528 li
172.589 87.0464 li
173.89 85.7393 li
174.99 84.6328 li
176.29 83.3247 li
177.39 82.2192 li
178.69 80.9111 li
179.79 79.8047 li
180.044 79.5493 li
179.346 78.8472 li
179.091 79.1025 li
177.992 80.209 li
cp
f
179.024 96.0679 mo
179.721 95.873 180.409 95.6475 181.088 95.3975 cv
181.089 95.394 li
182.19 94.2881 li
183.49 92.9805 li
184.589 91.874 li
185.89 90.5669 li
186.99 89.4604 li
188.29 88.1528 li
188.445 87.998 li
187.746 87.2949 li
187.591 87.4502 li
186.292 88.7578 li
185.191 89.8643 li
183.891 91.1719 li
182.792 92.2783 li
181.492 93.5854 li
180.391 94.6919 li
179.091 95.999 li
179.024 96.0679 li
cp
f
175.591 77.7954 mo
174.292 79.1025 li
173.191 80.209 li
171.891 81.5161 li
170.792 82.6226 li
169.492 83.9302 li
169.182 84.2417 li
168.723 86.1079 li
169.089 85.7393 li
170.19 84.6328 li
171.49 83.3247 li
172.589 82.2192 li
173.89 80.9111 li
174.99 79.8047 li
176.29 78.4976 li
177.39 77.3911 li
177.644 77.1362 li
176.946 76.4336 li
176.691 76.689 li
175.591 77.7954 li
cp
f
173.191 75.3809 mo
171.891 76.689 li
170.792 77.7954 li
170.755 77.8306 li
170.297 79.6973 li
171.49 78.4976 li
172.589 77.3911 li
173.89 76.0835 li
174.99 74.9771 li
175.245 74.7222 li
174.546 74.0195 li
174.292 74.2749 li
173.191 75.3809 li
cp
f
173.274 97.0225 mo
173.787 96.9927 174.297 96.9468 174.804 96.8892 cv
174.99 96.7021 li
176.29 95.394 li
177.39 94.2881 li
178.69 92.9805 li
179.79 91.874 li
181.089 90.5669 li
182.19 89.4604 li
183.49 88.1528 li
184.589 87.0464 li
185.89 85.7393 li
186.044 85.584 li
185.346 84.8813 li
185.191 85.0366 li
183.891 86.3442 li
182.792 87.4502 li
181.492 88.7578 li
180.391 89.8643 li
179.091 91.1719 li
177.992 92.2783 li
176.691 93.5854 li
175.591 94.6919 li
174.292 95.999 li
173.274 97.0225 li
cp
f
171.871 73.2866 mo
172.589 72.5635 li
172.844 72.3086 li
172.257 71.7173 li
171.871 73.2866 li
cp
f
171.085 76.4917 mo
171.49 76.0835 li
172.589 74.9771 li
173.89 73.6699 li
174.044 73.5151 li
173.346 72.8125 li
173.191 72.9673 li
171.891 74.2749 li
171.542 74.6255 li
171.085 76.4917 li
cp
f
170.19 82.2192 mo
171.49 80.9111 li
172.589 79.8047 li
173.89 78.4976 li
174.99 77.3911 li
176.29 76.0835 li
176.445 75.9292 li
175.746 75.2261 li
175.591 75.3809 li
174.292 76.689 li
173.191 77.7954 li
171.891 79.1025 li
170.792 80.209 li
169.968 81.0366 li
169.51 82.9028 li
170.19 82.2192 li
cp
f
168.394 87.4468 mo
167.937 89.3135 li
169.089 88.1528 li
170.19 87.0464 li
171.49 85.7393 li
172.589 84.6328 li
173.89 83.3247 li
174.99 82.2192 li
176.29 80.9111 li
177.39 79.8047 li
178.69 78.4976 li
178.844 78.3433 li
178.146 77.6401 li
177.992 77.7954 li
176.691 79.1025 li
175.591 80.209 li
174.292 81.5161 li
173.191 82.6226 li
171.891 83.9302 li
170.792 85.0366 li
169.492 86.3442 li
168.394 87.4468 li
cp
f
168.601 96.896 mo
169.027 96.9438 169.456 96.9814 169.885 97.0093 cv
170.19 96.7021 li
171.49 95.394 li
172.589 94.2881 li
173.89 92.9805 li
174.99 91.874 li
176.29 90.5669 li
177.39 89.4604 li
178.69 88.1528 li
179.79 87.0464 li
181.089 85.7393 li
182.19 84.6328 li
183.49 83.3247 li
183.644 83.1704 li
182.946 82.4673 li
182.792 82.6226 li
181.492 83.9302 li
180.391 85.0366 li
179.091 86.3442 li
177.992 87.4502 li
176.691 88.7578 li
175.591 89.8643 li
174.292 91.1719 li
173.191 92.2783 li
171.891 93.5854 li
170.792 94.6919 li
169.492 95.999 li
168.601 96.896 li
cp
f
166.363 95.7241 mo
166.69 95.394 li
167.79 94.2881 li
169.089 92.9805 li
170.19 91.874 li
171.49 90.5669 li
172.589 89.4604 li
173.89 88.1528 li
174.99 87.0464 li
176.29 85.7393 li
177.39 84.6328 li
178.69 83.3247 li
179.79 82.2192 li
181.089 80.9111 li
181.245 80.7563 li
180.546 80.0542 li
180.391 80.209 li
179.091 81.5161 li
177.992 82.6226 li
176.691 83.9302 li
175.591 85.0366 li
174.292 86.3442 li
173.191 87.4502 li
171.891 88.7578 li
170.792 89.8643 li
169.492 91.1719 li
168.391 92.2783 li
167.091 93.5854 li
166.821 93.8579 li
166.363 95.7241 li
cp
f
172.752 69.1099 mo
191.76 88.2261 li
196.446 83.1299 199.015 76.5459 199.015 69.5645 cv
199.015 62.2158 196.169 55.3066 191.002 50.1113 cv
186.094 45.1748 179.649 42.3457 172.752 42.0752 cv
172.752 69.1099 li
cp
.945098 .203922 .321569 rgb
f
102.469 304.422 mo
102.469 309.922 97.9688 314.422 92.4688 314.422 cv
35.3115 314.422 li
29.8115 314.422 25.3115 309.922 25.3115 304.422 cv
25.3115 247.264 li
25.3115 241.764 29.8115 237.264 35.3115 237.264 cv
92.4688 237.264 li
97.9688 237.264 102.469 241.764 102.469 247.264 cv
102.469 304.422 li
cp
.780392 .921569 .984314 rgb
f
85.8296 275.646 mo
82.0293 274.176 li
81.6196 274.017 li
77.1294 272.276 li
76.6592 272.097 li
74.0396 271.076 li
73.2993 270.796 li
70.8696 269.847 li
70.1592 269.576 li
69.8994 269.546 li
64.4692 268.966 li
64.0894 268.756 li
63.6895 268.536 li
61.5396 267.356 li
61.0396 267.086 li
58.3193 265.597 li
57.6196 265.206 li
56.6592 264.687 li
56.2593 264.466 li
52.3296 262.307 li
51.9395 262.097 li
48.5693 260.246 li
47.9692 259.916 li
48.1792 260.416 li
49.8096 264.296 li
49.9795 264.706 li
51.8794 269.236 li
52.0796 269.706 li
52.2793 270.187 li
52.5894 270.926 li
54.5693 275.646 li
54.8794 276.376 li
54.8193 277.446 li
54.4292 285.017 li
54.4194 285.116 li
54.3994 285.557 li
54.5996 285.906 li
58.3896 292.796 li
58.6694 293.296 li
61.2695 298.017 li
61.5093 298.446 li
63.6895 302.406 li
63.8394 302.676 li
63.8896 302.767 li
63.9194 302.676 li
64.0596 302.227 li
64.0894 302.116 li
65.1895 298.536 li
65.3193 298.126 li
66.6396 293.856 li
66.7695 293.426 li
68.1694 288.876 li
68.3193 288.396 li
70.0996 282.626 li
70.2295 282.187 li
70.7295 281.996 li
74.1494 280.656 li
74.8994 280.366 li
76.6396 279.687 li
77.0996 279.506 li
81.6094 277.746 li
82.0195 277.586 li
85.9795 276.046 li
86.4194 275.876 li
85.8296 275.646 li
cp
1 1 1 rgb
f
86.6094 275.646 mo
86.5596 269.526 84.0796 263.986 80.0894 259.926 cv
82.9893 257.026 li
87.7295 261.826 90.6694 268.396 90.7192 275.646 cv
86.6094 275.646 li
cp
83.1895 294.456 mo
81.0195 290.756 li
84.4541 286.823 86.5518 281.683 86.6079 276.073 cv
86.6777 276.046 li
90.7192 276.046 li
90.6694 283.187 87.8096 289.676 83.1895 294.456 cv
cp
65.2495 302.646 mo
81.6592 295.916 li
77.2393 299.847 71.5293 302.326 65.2495 302.646 cv
cp
45.0693 294.946 mo
47.9692 292.046 li
51.4492 295.466 56.0093 297.776 61.0996 298.396 cv
63.3794 302.666 li
56.2495 302.536 49.8096 299.616 45.0693 294.946 cv
cp
37.0596 276.046 mo
40.9692 276.046 li
41.1792 276.206 li
41.2593 282.256 43.7295 287.746 47.6895 291.767 cv
44.7896 294.666 li
40.0493 289.866 37.1094 283.286 37.0596 276.046 cv
cp
44.7896 257.026 mo
47.6895 259.926 li
43.7295 263.946 41.2593 269.426 41.1792 275.486 cv
40.8394 275.646 li
37.0596 275.646 li
37.1094 268.396 40.0493 261.826 44.7896 257.026 cv
cp
63.6895 249.006 mo
63.6895 252.796 li
63.5293 253.126 li
57.4717 253.216 51.9941 255.685 47.9741 259.632 cv
47.9531 259.62 li
45.0693 256.736 li
49.8794 252.006 56.4395 249.057 63.6895 249.006 cv
cp
81.9912 273.892 mo
81.5552 269.768 79.7363 266.061 77.0093 263.216 cv
77.1094 262.966 li
77.0796 262.937 li
79.8096 260.206 li
83.7026 264.169 86.1201 269.563 86.2021 275.524 cv
81.9912 273.892 li
cp
78.5796 286.616 mo
80.4141 284.111 81.6289 281.114 81.9824 277.876 cv
86.1992 276.232 li
86.105 281.639 84.1016 286.58 80.7993 290.396 cv
78.5796 286.616 li
cp
76.9951 279.819 mo
81.5688 278.037 li
81.1992 281.074 80.0645 283.872 78.3496 286.236 cv
76.0093 282.246 li
76.418 281.482 76.7422 280.664 76.9951 279.819 cv
cp
76.5283 280.001 mo
76.3164 280.637 76.0698 281.255 75.7695 281.847 cv
75.0283 280.586 li
76.5283 280.001 li
cp
51.1494 288.866 mo
53.1494 290.816 55.5996 292.316 58.3193 293.187 cv
60.8696 297.966 li
55.9893 297.307 51.5996 295.057 48.2495 291.767 cv
51.1494 288.866 li
cp
46.1196 279.887 mo
46.8794 283.227 48.5596 286.216 50.8696 288.576 cv
47.9692 291.477 li
44.1494 287.597 41.7495 282.326 41.5894 276.506 cv
46.1196 279.887 li
cp
49.6333 264.525 mo
47.6621 267.003 46.3154 269.986 45.8496 273.256 cv
41.5796 275.296 li
41.7178 269.48 44.0898 264.219 47.8677 260.319 cv
49.6333 264.525 li
cp
61.2393 257.816 mo
57.8042 258.313 54.6855 259.781 52.1523 261.924 cv
48.3481 259.837 li
52.2485 256.051 57.5166 253.665 63.3296 253.526 cv
61.2393 257.816 li
cp
64.8394 253.546 mo
70.5493 253.776 75.6992 256.176 79.5293 259.926 cv
76.7495 262.696 li
64.8394 253.546 li
cp
77.0317 271.969 mo
76.6167 270.565 75.9893 269.249 75.1792 268.076 cv
76.8594 263.637 li
79.4063 266.349 81.1157 269.847 81.5781 273.731 cv
77.0317 271.969 li
cp
74.1279 270.842 mo
74.9995 268.536 li
75.6689 269.535 76.1875 270.623 76.5557 271.783 cv
74.1279 270.842 li
cp
58.6094 263.187 mo
57.8701 263.498 57.1699 263.882 56.5083 264.313 cv
52.5405 262.137 li
54.9233 260.151 57.832 258.771 61.0293 258.246 cv
58.6094 263.187 li
cp
57.7295 264.983 mo
56.9097 264.533 li
57.3726 264.241 57.8472 263.976 58.3394 263.746 cv
57.7295 264.983 li
cp
54.1494 285.866 mo
54.375 286.032 li
58.0366 292.671 li
55.542 291.811 53.2861 290.394 51.4395 288.576 cv
54.1494 285.866 li
cp
53.8193 285.626 mo
51.1494 288.296 li
48.9995 286.097 47.4092 283.336 46.6294 280.267 cv
53.8193 285.626 li
cp
52.0542 270.293 mo
51.7295 270.446 li
51.7939 270.299 51.8662 270.155 51.9355 270.01 cv
52.0542 270.293 li
cp
51.7378 269.538 mo
51.541 269.918 51.3486 270.301 51.1895 270.706 cv
46.2896 273.046 li
46.7637 270.025 48.0122 267.262 49.8062 264.938 cv
51.7378 269.538 li
cp
70.6406 281.763 mo
70.0249 281.997 li
63.8481 302.051 li
63.8257 302.135 li
54.8164 285.782 li
54.6523 285.495 li
55.0688 277.46 li
55.1323 276.332 li
48.4775 260.481 li
64.3481 269.185 li
69.8706 269.794 li
70.0703 269.81 li
85.7285 275.875 li
70.6406 281.763 li
cp
64.0894 249.006 mo
71.3394 249.057 77.8994 252.006 82.7095 256.736 cv
79.8096 259.637 li
75.7993 255.696 70.3296 253.227 64.2993 253.126 cv
64.0894 252.966 li
64.0894 249.006 li
cp
91.1196 275.646 mo
91.0693 268.286 88.0796 261.616 83.2793 256.736 cv
87.5195 252.496 li
87.2393 252.216 li
82.9893 256.456 li
78.1094 251.646 71.4492 248.656 64.0894 248.606 cv
64.0894 242.626 li
63.6895 242.626 li
63.6895 248.606 li
56.3296 248.656 49.6694 251.646 44.7896 256.456 cv
40.5396 252.216 li
40.2593 252.496 li
44.4995 256.736 li
39.6992 261.616 36.7095 268.286 36.6592 275.646 cv
30.6694 275.646 li
30.6694 276.046 li
36.6592 276.046 li
36.7095 283.396 39.6992 290.076 44.4995 294.946 cv
40.2593 299.187 li
40.5396 299.477 li
44.7896 295.227 li
49.6494 300.017 56.2695 302.996 63.5996 303.066 cv
63.6895 303.236 li
63.6895 309.057 li
64.0894 309.057 li
64.0894 303.116 li
64.2095 303.066 li
71.3896 302.986 77.8994 300.116 82.7192 295.486 cv
83.0894 295.326 li
87.2393 299.477 li
87.5195 299.187 li
83.4995 295.166 li
83.5894 295.126 li
83.4092 294.816 li
88.1294 289.956 91.0693 283.336 91.1196 276.046 cv
97.1094 276.046 li
97.1094 275.646 li
91.1196 275.646 li
cp
.945098 .203922 .321569 rgb
f
210.24 304.422 mo
210.24 309.922 205.74 314.422 200.24 314.422 cv
143.083 314.422 li
137.583 314.422 133.083 309.922 133.083 304.422 cv
133.083 247.264 li
133.083 241.764 137.583 237.264 143.083 237.264 cv
200.24 237.264 li
205.74 237.264 210.24 241.764 210.24 247.264 cv
210.24 304.422 li
cp
.00392157 .239216 .47451 rgb
f
198.31 274.219 mo
198.953 273.576 li
198.917 273.152 198.875 272.73 198.821 272.311 cv
198.62 272.512 li
197.32 273.813 li
196.912 274.219 li
198.31 274.219 li
cp
.945098 .203922 .321569 rgb
f
195.948 263.184 mo
194.919 264.211 li
193.82 265.313 li
192.519 266.611 li
191.419 267.711 li
190.12 269.012 li
189.988 269.143 li
190.115 269.488 190.234 269.836 190.339 270.188 cv
190.818 269.711 li
192.118 268.41 li
193.218 267.311 li
194.518 266.01 li
195.618 264.91 li
196.414 264.115 li
196.263 263.803 196.11 263.49 195.948 263.184 cv
cp
f
197.14 265.789 mo
197.008 265.457 196.871 265.129 196.727 264.805 cv
196.219 265.313 li
194.919 266.611 li
193.82 267.711 li
192.519 269.012 li
191.419 270.111 li
190.562 270.969 li
190.659 271.348 190.74 271.73 190.815 272.115 cv
190.818 272.109 li
192.118 270.811 li
193.218 269.711 li
194.518 268.41 li
195.618 267.311 li
196.917 266.01 li
197.14 265.789 li
cp
f
197.774 267.555 mo
197.664 267.205 197.544 266.857 197.419 266.512 cv
197.32 266.611 li
196.219 267.711 li
194.919 269.012 li
193.82 270.111 li
192.519 271.412 li
191.419 272.512 li
190.964 272.967 li
191.026 273.379 191.082 273.793 191.117 274.213 cv
192.118 273.211 li
193.218 272.109 li
194.518 270.811 li
195.618 269.711 li
196.917 268.41 li
197.774 267.555 li
cp
f
195.91 274.219 mo
196.917 273.211 li
198.018 272.109 li
198.693 271.436 li
198.628 271.041 198.557 270.646 198.476 270.256 cv
197.32 271.412 li
196.219 272.512 li
194.919 273.813 li
194.511 274.219 li
195.91 274.219 li
cp
f
194.691 261.037 mo
194.508 260.756 194.323 260.477 194.13 260.201 cv
193.82 260.512 li
192.519 261.813 li
191.419 262.912 li
190.12 264.211 li
189.019 265.313 li
188.445 265.887 li
188.62 266.182 188.787 266.48 188.946 266.783 cv
189.718 266.01 li
190.818 264.91 li
192.118 263.609 li
193.218 262.51 li
194.518 261.211 li
194.691 261.037 li
cp
f
195.594 262.533 mo
195.429 262.236 195.255 261.943 195.079 261.652 cv
194.919 261.813 li
193.82 262.912 li
192.519 264.211 li
191.419 265.313 li
190.12 266.611 li
189.279 267.453 li
189.43 267.77 189.583 268.086 189.718 268.41 cv
189.718 268.41 li
190.818 267.311 li
192.118 266.01 li
193.218 264.91 li
194.518 263.609 li
195.594 262.533 li
cp
f
193.51 274.219 mo
194.518 273.211 li
195.618 272.109 li
196.917 270.811 li
198.018 269.711 li
198.294 269.436 li
198.206 269.063 198.109 268.695 198.003 268.328 cv
197.32 269.012 li
196.219 270.111 li
194.919 271.412 li
193.82 272.512 li
192.519 273.813 li
192.112 274.219 li
193.51 274.219 li
cp
f
187.495 264.438 mo
187.693 264.709 187.871 264.992 188.054 265.273 cv
188.417 264.91 li
189.718 263.609 li
190.818 262.51 li
192.118 261.211 li
193.218 260.109 li
193.71 259.619 li
193.513 259.352 193.308 259.09 193.102 258.83 cv
192.519 259.412 li
191.419 260.512 li
190.12 261.813 li
189.019 262.912 li
187.719 264.211 li
187.495 264.438 li
cp
f
188.417 262.51 mo
189.718 261.211 li
190.818 260.109 li
192.118 258.811 li
192.649 258.279 li
192.482 258.08 192.315 257.879 192.141 257.684 cv
186.568 263.256 li
186.738 263.457 186.891 263.668 187.054 263.875 cv
187.318 263.609 li
188.417 262.51 li
cp
f
152.187 275.842 mo
152.187 270.643 154.216 265.748 157.904 262.061 cv
161.204 258.762 165.471 256.789 170.062 256.412 cv
170.062 256.34 li
171.685 256.34 li
176.347 256.344 180.755 257.967 184.263 260.941 cv
189.841 255.363 li
184.875 250.945 178.542 248.516 171.829 248.477 cv
171.54 248.477 li
171.127 248.479 170.714 248.492 170.3 248.512 cv
170.023 248.531 li
169.66 248.555 169.3 248.578 168.943 248.613 cv
168.612 248.654 li
168.265 248.693 167.917 248.734 167.583 248.785 cv
167.318 248.83 li
166.945 248.891 166.573 248.955 166.177 249.035 cv
166.091 249.055 li
160.859 250.135 156.097 252.703 152.321 256.479 cv
148.546 260.252 145.979 265.012 144.891 270.271 cv
144.873 270.359 li
144.797 270.727 144.732 271.098 144.672 271.469 cv
144.628 271.736 li
144.578 272.076 144.537 272.416 144.5 272.752 cv
144.457 273.1 li
144.422 273.451 144.398 273.805 144.375 274.17 cv
144.354 274.465 li
144.332 274.92 144.32 275.375 144.32 275.844 cv
144.32 282.598 146.761 288.986 151.23 294.002 cv
156.802 288.43 li
153.815 284.91 152.187 280.498 152.187 275.842 cv
cp
1 1 1 rgb
f
199.003 277.467 mo
191.118 277.467 li
190.74 282.055 188.768 286.322 185.466 289.625 cv
181.779 293.311 176.885 295.342 171.685 295.342 cv
167.029 295.342 162.618 293.713 159.099 290.725 cv
153.526 296.299 li
158.542 300.766 164.93 303.209 171.685 303.209 cv
178.982 303.209 185.851 300.357 191.026 295.184 cv
195.815 290.395 198.613 284.154 199.003 277.467 cv
cp
.945098 .203922 .321569 rgb
f
319.047 200.884 mo
319.047 206.384 314.547 210.884 309.047 210.884 cv
251.89 210.884 li
246.39 210.884 241.89 206.384 241.89 200.884 cv
241.89 143.727 li
241.89 138.227 246.39 133.727 251.89 133.727 cv
309.047 133.727 li
314.547 133.727 319.047 138.227 319.047 143.727 cv
319.047 200.884 li
cp
.00392157 .239216 .47451 rgb
f
308.24 195.95 mo
304.74 194.549 li
304.74 195.512 li
254.533 195.512 li
254.533 150.76 li
255.496 150.76 li
254.096 147.26 li
252.697 150.76 li
253.658 150.76 li
253.658 195.512 li
253.658 195.95 li
253.658 196.387 li
304.74 196.387 li
304.74 197.35 li
308.24 195.95 li
cp
.945098 .203922 .321569 rgb
f
259.348 189.03 mo
259.348 189.25 259.525 189.429 259.748 189.429 cv
259.969 189.429 260.148 189.25 260.148 189.03 cv
260.148 185.76 li
262.15 185.76 li
262.15 175.772 li
260.148 175.772 li
260.148 167.85 li
260.148 167.628 259.969 167.45 259.748 167.45 cv
259.525 167.45 259.348 167.628 259.348 167.85 cv
259.348 175.772 li
257.346 175.772 li
257.346 185.76 li
259.348 185.76 li
259.348 189.03 li
cp
1 1 1 rgb
f
269.336 181.959 mo
269.336 182.18 269.514 182.359 269.736 182.359 cv
269.955 182.359 270.135 182.18 270.135 181.959 cv
270.135 171.206 li
272.139 171.206 li
272.139 161.412 li
270.135 161.412 li
270.135 157.862 li
270.135 157.641 269.955 157.462 269.736 157.462 cv
269.514 157.462 269.336 157.641 269.336 157.862 cv
269.336 161.412 li
267.332 161.412 li
267.332 171.206 li
269.336 171.206 li
269.336 181.959 li
cp
.945098 .203922 .321569 rgb
f
280.213 189.915 mo
280.209 190.135 280.387 190.316 280.607 190.319 cv
280.609 190.319 280.611 190.319 280.611 190.319 cv
280.83 190.319 281.01 190.142 281.012 189.922 cv
281.043 186.649 li
283.014 186.649 li
283.014 172.288 li
281.18 172.288 li
281.299 159.945 li
281.299 159.724 281.123 159.543 280.9 159.542 cv
280.678 159.524 280.5 159.716 280.498 159.937 cv
280.379 172.288 li
278.209 172.288 li
278.209 186.649 li
280.244 186.649 li
280.213 189.915 li
cp
1 1 1 rgb
f
289.197 190.663 mo
289.197 190.884 289.375 191.063 289.596 191.063 cv
289.816 191.063 289.996 190.884 289.996 190.663 cv
289.996 178.387 li
292 178.387 li
292 156.706 li
289.996 156.706 li
289.996 151.347 li
289.996 151.126 289.816 150.948 289.596 150.948 cv
289.375 150.948 289.197 151.126 289.197 151.347 cv
289.197 156.706 li
287.193 156.706 li
287.193 178.387 li
289.197 178.387 li
289.197 190.663 li
cp
.945098 .203922 .321569 rgb
f
298.754 187.708 mo
298.754 187.928 298.932 188.108 299.154 188.108 cv
299.375 188.108 299.555 187.928 299.555 187.708 cv
299.555 179.975 li
301.557 179.975 li
301.557 175.209 li
299.555 175.209 li
299.555 163.846 li
299.555 163.625 299.375 163.446 299.154 163.446 cv
298.932 163.446 298.754 163.625 298.754 163.846 cv
298.754 175.209 li
296.752 175.209 li
296.752 179.975 li
298.754 179.975 li
298.754 187.708 li
cp
1 1 1 rgb
f
319.047 304.422 mo
319.047 309.922 314.547 314.422 309.047 314.422 cv
251.89 314.422 li
246.39 314.422 241.89 309.922 241.89 304.422 cv
241.89 247.264 li
241.89 241.764 246.39 237.264 251.89 237.264 cv
309.047 237.264 li
314.547 237.264 319.047 241.764 319.047 247.264 cv
319.047 304.422 li
cp
.0117647 .658824 .870588 rgb
f
308.24 299.486 mo
304.74 298.088 li
304.74 299.049 li
254.533 299.049 li
254.533 254.299 li
255.496 254.299 li
254.096 250.799 li
252.697 254.299 li
253.658 254.299 li
253.658 299.049 li
253.658 299.486 li
253.658 299.924 li
304.74 299.924 li
304.74 300.887 li
308.24 299.486 li
cp
.945098 .203922 .321569 rgb
f
258.861 288.922 mo
259.59 288.922 260.182 289.516 260.182 290.244 cv
260.182 290.973 259.59 291.566 258.861 291.566 cv
258.133 291.566 257.539 290.973 257.539 290.244 cv
257.539 289.516 258.133 288.922 258.861 288.922 cv
cp
265.381 273.646 mo
265.381 272.918 265.973 272.324 266.703 272.324 cv
267.432 272.324 268.025 272.918 268.025 273.646 cv
268.025 274.375 267.432 274.969 266.703 274.969 cv
265.973 274.969 265.381 274.375 265.381 273.646 cv
cp
282.033 278.574 mo
282.033 277.846 282.627 277.252 283.355 277.252 cv
284.084 277.252 284.678 277.846 284.678 278.574 cv
284.678 279.303 284.084 279.896 283.355 279.896 cv
282.627 279.896 282.033 279.303 282.033 278.574 cv
cp
291.189 256.24 mo
291.189 255.512 291.783 254.918 292.514 254.918 cv
293.242 254.918 293.836 255.512 293.836 256.24 cv
293.836 256.969 293.242 257.563 292.514 257.563 cv
291.783 257.563 291.189 256.969 291.189 256.24 cv
cp
258.861 292.367 mo
260.031 292.367 260.982 291.414 260.982 290.244 cv
260.982 289.543 260.637 288.924 260.111 288.537 cv
266.178 275.695 li
266.346 275.738 266.521 275.768 266.703 275.768 cv
267.521 275.768 268.225 275.297 268.578 274.617 cv
281.254 278.369 li
281.248 278.438 281.234 278.504 281.234 278.574 cv
281.234 279.744 282.186 280.697 283.355 280.697 cv
284.525 280.697 285.479 279.744 285.479 278.574 cv
285.479 277.832 285.094 277.18 284.516 276.801 cv
292.094 258.318 li
292.229 258.346 292.369 258.361 292.514 258.361 cv
293.684 258.361 294.635 257.41 294.635 256.24 cv
294.635 255.07 293.684 254.117 292.514 254.117 cv
291.344 254.117 290.391 255.07 290.391 256.24 cv
290.391 256.982 290.775 257.635 291.354 258.014 cv
283.775 276.494 li
283.641 276.467 283.5 276.453 283.355 276.453 cv
282.537 276.453 281.834 276.922 281.48 277.604 cv
268.805 273.852 li
268.811 273.783 268.824 273.717 268.824 273.646 cv
268.824 272.477 267.873 271.523 266.703 271.523 cv
265.533 271.523 264.58 272.477 264.58 273.646 cv
264.58 274.348 264.928 274.967 265.455 275.354 cv
259.385 288.195 li
259.217 288.152 259.043 288.123 258.861 288.123 cv
257.689 288.123 256.738 289.074 256.738 290.244 cv
256.738 291.414 257.689 292.367 258.861 292.367 cv
cp
1 1 1 rgb
f
258.861 297.637 mo
260.031 297.637 260.982 296.686 260.982 295.516 cv
260.982 295.064 260.838 294.646 260.596 294.303 cv
271.486 283.09 li
271.822 283.309 272.221 283.439 272.65 283.439 cv
273.158 283.439 273.619 283.252 273.986 282.953 cv
281.508 289.225 li
281.338 289.527 281.234 289.873 281.234 290.244 cv
281.234 291.414 282.186 292.367 283.355 292.367 cv
284.525 292.367 285.479 291.414 285.479 290.244 cv
285.479 289.773 285.316 289.34 285.057 288.988 cv
291.4 282.096 li
291.725 282.297 292.104 282.418 292.514 282.418 cv
293.684 282.418 294.635 281.467 294.635 280.297 cv
294.635 279.127 293.684 278.174 292.514 278.174 cv
291.344 278.174 290.391 279.127 290.391 280.297 cv
290.391 280.768 290.551 281.201 290.813 281.553 cv
284.469 288.445 li
284.143 288.244 283.766 288.123 283.355 288.123 cv
282.846 288.123 282.385 288.311 282.02 288.609 cv
274.498 282.338 li
274.666 282.033 274.771 281.689 274.771 281.318 cv
274.771 280.146 273.82 279.195 272.65 279.195 cv
271.479 279.195 270.525 280.146 270.525 281.318 cv
270.525 281.77 270.672 282.188 270.912 282.531 cv
260.023 293.744 li
259.689 293.523 259.291 293.393 258.861 293.393 cv
257.689 293.393 256.738 294.346 256.738 295.516 cv
256.738 296.686 257.689 297.637 258.861 297.637 cv
cp
.945098 .203922 .321569 rgb
f
424.688 98.1538 mo
424.688 103.654 420.188 108.154 414.688 108.154 cv
357.53 108.154 li
352.03 108.154 347.53 103.654 347.53 98.1538 cv
347.53 40.9966 li
347.53 35.4966 352.03 30.9966 357.53 30.9966 cv
414.688 30.9966 li
420.188 30.9966 424.688 35.4966 424.688 40.9966 cv
424.688 98.1538 li
cp
.00392157 .239216 .47451 rgb
f
358.568 96.4141 mo
367.848 96.4141 li
367.848 87.1348 li
358.568 87.1348 li
358.568 96.4141 li
cp
.945098 .203922 .321569 rgb
f
370.019 96.4141 mo
379.299 96.4141 li
379.299 87.1348 li
370.019 87.1348 li
370.019 96.4141 li
cp
f
381.471 96.4141 mo
390.75 96.4141 li
390.75 87.1348 li
381.471 87.1348 li
381.471 96.4141 li
cp
f
392.921 96.4141 mo
402.201 96.4141 li
402.201 87.1348 li
392.921 87.1348 li
392.921 96.4141 li
cp
f
404.372 96.4141 mo
413.651 96.4141 li
413.651 87.1348 li
404.372 87.1348 li
404.372 96.4141 li
cp
f
358.568 85.3149 mo
367.848 85.3149 li
367.848 76.0352 li
358.568 76.0352 li
358.568 85.3149 li
cp
f
370.019 85.3149 mo
379.299 85.3149 li
379.299 76.0352 li
370.019 76.0352 li
370.019 85.3149 li
cp
f
381.471 85.3149 mo
390.75 85.3149 li
390.75 76.0352 li
381.471 76.0352 li
381.471 85.3149 li
cp
f
392.921 85.3149 mo
402.201 85.3149 li
402.201 76.0352 li
392.921 76.0352 li
392.921 85.3149 li
cp
f
404.372 85.3149 mo
413.651 85.3149 li
413.651 76.0352 li
404.372 76.0352 li
404.372 85.3149 li
cp
f
358.968 65.3354 mo
367.447 65.3354 li
367.447 73.8154 li
358.968 73.8154 li
358.968 65.3354 li
cp
358.568 74.2153 mo
367.848 74.2153 li
367.848 64.9355 li
358.568 64.9355 li
358.568 74.2153 li
cp
1 1 1 rgb
f
370.019 74.2153 mo
379.299 74.2153 li
379.299 64.9355 li
370.019 64.9355 li
370.019 74.2153 li
cp
.945098 .203922 .321569 rgb
f
381.471 74.2153 mo
390.75 74.2153 li
390.75 64.9355 li
381.471 64.9355 li
381.471 74.2153 li
cp
f
392.921 74.2153 mo
402.201 74.2153 li
402.201 64.9355 li
392.921 64.9355 li
392.921 74.2153 li
cp
f
404.372 74.2153 mo
413.651 74.2153 li
413.651 64.9355 li
404.372 64.9355 li
404.372 74.2153 li
cp
f
358.968 54.2358 mo
367.447 54.2358 li
367.447 62.7153 li
358.968 62.7153 li
358.968 54.2358 li
cp
358.568 63.1152 mo
367.848 63.1152 li
367.848 53.8359 li
358.568 53.8359 li
358.568 63.1152 li
cp
1 1 1 rgb
f
370.419 54.2358 mo
378.898 54.2358 li
378.898 62.7153 li
370.419 62.7153 li
370.419 54.2358 li
cp
370.019 63.1152 mo
379.299 63.1152 li
379.299 53.8359 li
370.019 53.8359 li
370.019 63.1152 li
cp
f
381.471 63.1152 mo
390.75 63.1152 li
390.75 53.8359 li
381.471 53.8359 li
381.471 63.1152 li
cp
.945098 .203922 .321569 rgb
f
392.921 63.1152 mo
402.201 63.1152 li
402.201 53.8359 li
392.921 53.8359 li
392.921 63.1152 li
cp
f
404.771 54.2358 mo
413.252 54.2358 li
413.252 62.7153 li
404.771 62.7153 li
404.771 54.2358 li
cp
404.372 63.1152 mo
413.651 63.1152 li
413.651 53.8359 li
404.372 53.8359 li
404.372 63.1152 li
cp
1 1 1 rgb
f
358.968 43.1362 mo
367.447 43.1362 li
367.447 51.6157 li
358.968 51.6157 li
358.968 43.1362 li
cp
358.568 52.0156 mo
367.848 52.0156 li
367.848 42.7363 li
358.568 42.7363 li
358.568 52.0156 li
cp
f
370.419 43.1362 mo
378.898 43.1362 li
378.898 51.6157 li
370.419 51.6157 li
370.419 43.1362 li
cp
370.019 52.0156 mo
379.299 52.0156 li
379.299 42.7363 li
370.019 42.7363 li
370.019 52.0156 li
cp
f
381.471 52.0156 mo
390.75 52.0156 li
390.75 42.7363 li
381.471 42.7363 li
381.471 52.0156 li
cp
.945098 .203922 .321569 rgb
f
393.321 43.1362 mo
401.801 43.1362 li
401.801 51.6157 li
393.321 51.6157 li
393.321 43.1362 li
cp
392.921 52.0156 mo
402.201 52.0156 li
402.201 42.7363 li
392.921 42.7363 li
392.921 52.0156 li
cp
1 1 1 rgb
f
413.252 51.6157 mo
404.771 51.6157 li
404.771 43.1362 li
413.252 43.1362 li
413.252 51.6157 li
cp
404.372 42.7363 mo
404.372 52.0156 li
413.651 52.0156 li
413.651 42.7363 li
404.372 42.7363 li
cp
f
102.469 200.884 mo
102.469 206.384 97.9688 210.884 92.4688 210.884 cv
35.3115 210.884 li
29.8115 210.884 25.3115 206.384 25.3115 200.884 cv
25.3115 143.727 li
25.3115 138.227 29.8115 133.727 35.3115 133.727 cv
92.4688 133.727 li
97.9688 133.727 102.469 138.227 102.469 143.727 cv
102.469 200.884 li
cp
.0117647 .658824 .870588 rgb
f
48.8516 195.332 mo
42.1123 195.332 li
42.1123 175.148 li
48.8516 175.148 li
48.8516 195.332 li
cp
1 1 1 rgb
f
61.4766 185.24 mo
53.7871 185.24 li
53.7871 165.056 li
61.4766 165.056 li
61.4766 185.24 li
cp
f
73.6514 174.533 mo
65.9619 174.533 li
65.9619 154.349 li
73.6514 154.349 li
73.6514 174.533 li
cp
f
84.5439 182.174 mo
76.8545 182.174 li
76.8545 161.99 li
84.5439 161.99 li
84.5439 182.174 li
cp
f
42.9121 183.108 mo
42.9121 175.444 li
48.0518 175.444 li
48.0518 183.108 li
42.9121 183.108 li
cp
88.2012 195.512 mo
84.5439 195.512 li
84.5439 182.174 li
83.9727 182.174 li
84.5439 181.603 li
84.5439 180.205 li
84.376 180.372 li
83.0762 181.672 li
82.5752 182.174 li
81.5723 182.174 li
82.6748 181.07 li
83.7744 179.971 li
84.5439 179.202 li
84.5439 177.805 li
84.376 177.972 li
83.0762 179.272 li
81.9766 180.372 li
80.6768 181.672 li
80.1748 182.174 li
79.1729 182.174 li
80.2744 181.07 li
81.375 179.971 li
82.6748 178.671 li
83.7744 177.57 li
84.5439 176.803 li
84.5439 175.405 li
84.376 175.572 li
83.0762 176.872 li
81.9766 177.972 li
80.6768 179.272 li
79.5762 180.372 li
78.2764 181.672 li
77.7744 182.174 li
76.8545 182.174 li
76.8545 195.512 li
73.6504 195.512 li
73.6504 173.523 li
73.4229 173.523 li
73.6504 173.296 li
73.6504 171.897 li
73.4766 172.072 li
72.376 173.172 li
72.0244 173.523 li
71.0225 173.523 li
71.7744 172.771 li
73.0752 171.471 li
73.6504 170.896 li
73.6504 169.498 li
73.4766 169.672 li
72.376 170.772 li
71.0762 172.072 li
69.9766 173.172 li
69.625 173.523 li
68.6221 173.523 li
69.375 172.771 li
70.6748 171.471 li
71.7744 170.37 li
73.0752 169.07 li
73.6504 168.495 li
73.6504 167.098 li
73.4766 167.272 li
72.376 168.372 li
71.0762 169.672 li
69.9766 170.772 li
68.6768 172.072 li
67.5762 173.172 li
67.2246 173.523 li
66.2227 173.523 li
66.9746 172.771 li
68.2744 171.471 li
69.375 170.37 li
70.6748 169.07 li
71.7744 167.971 li
73.0752 166.671 li
73.6504 166.096 li
73.6504 164.698 li
73.4766 164.872 li
72.376 165.972 li
71.0762 167.272 li
69.9766 168.372 li
68.6768 169.672 li
67.5762 170.772 li
66.2764 172.072 li
65.9619 172.387 li
65.9619 173.523 li
65.9619 195.512 li
61.4766 195.512 li
61.4766 183.139 li
61.4072 183.139 li
61.4766 183.069 li
61.4766 181.672 li
60.376 182.772 li
60.0088 183.139 li
59.0078 183.139 li
59.7744 182.37 li
61.0752 181.07 li
61.4766 180.67 li
61.4766 179.272 li
60.376 180.372 li
59.0762 181.672 li
57.9766 182.772 li
57.6094 183.139 li
56.6074 183.139 li
57.375 182.37 li
58.6748 181.07 li
59.7744 179.971 li
61.0752 178.671 li
61.4766 178.27 li
61.4766 176.872 li
60.376 177.972 li
59.0762 179.272 li
57.9766 180.372 li
56.6768 181.672 li
55.5762 182.772 li
55.209 183.139 li
54.208 183.139 li
54.9746 182.37 li
56.2744 181.07 li
57.375 179.971 li
58.6748 178.671 li
59.7744 177.57 li
61.0752 176.271 li
61.4766 175.87 li
61.4766 174.472 li
60.376 175.572 li
59.0762 176.872 li
57.9766 177.972 li
56.6768 179.272 li
55.5762 180.372 li
54.2764 181.672 li
53.7871 182.161 li
53.7871 183.139 li
53.7871 195.512 li
48.8516 195.512 li
48.8516 188.963 li
48.3838 188.963 li
48.8516 188.495 li
48.8516 187.097 li
48.376 187.572 li
47.0762 188.872 li
46.9854 188.963 li
45.9834 188.963 li
46.6748 188.271 li
47.7744 187.171 li
48.8516 186.095 li
48.8516 184.697 li
48.376 185.172 li
47.0762 186.472 li
45.9766 187.572 li
44.6768 188.872 li
44.5859 188.963 li
43.583 188.963 li
44.2744 188.271 li
45.375 187.171 li
46.6748 185.87 li
47.7744 184.771 li
48.6377 183.908 li
48.8516 183.908 li
48.8516 174.645 li
42.1123 174.645 li
42.1123 183.908 li
42.4404 183.908 li
42.2764 184.072 li
42.1123 184.237 li
42.1123 185.635 li
42.9746 184.771 li
43.8379 183.908 li
44.8408 183.908 li
44.6768 184.072 li
43.5762 185.172 li
42.2764 186.472 li
42.1123 186.637 li
42.1123 188.034 li
42.9746 187.171 li
44.2744 185.87 li
45.375 184.771 li
46.2383 183.908 li
47.2402 183.908 li
47.0762 184.072 li
45.9766 185.172 li
44.6768 186.472 li
43.5762 187.572 li
42.2764 188.872 li
42.1855 188.963 li
42.1123 188.963 li
42.1123 195.512 li
37.915 195.512 li
37.915 150.761 li
38.8779 150.761 li
37.4775 147.261 li
36.0781 150.761 li
37.04 150.761 li
37.04 195.512 li
37.04 196.145 li
37.04 196.387 li
88.2012 196.387 li
88.2012 197.35 li
91.7012 195.949 li
88.2012 194.55 li
88.2012 195.512 li
cp
.945098 .203922 .321569 rgb
f
60.6768 165.675 mo
54.5869 165.675 li
54.5869 160.872 li
60.6768 160.872 li
60.6768 165.675 li
cp
61.2705 166.476 mo
61.4766 166.476 li
61.4766 160.072 li
53.7871 160.072 li
53.7871 166.476 li
53.7871 166.759 li
53.875 166.671 li
54.0713 166.476 li
55.0732 166.476 li
54.2764 167.272 li
53.7871 167.761 li
53.7871 169.159 li
53.875 169.07 li
54.9746 167.971 li
56.2744 166.671 li
56.4707 166.476 li
57.4736 166.476 li
56.6768 167.272 li
55.5762 168.372 li
54.2764 169.672 li
53.7871 170.161 li
53.7871 171.559 li
53.875 171.471 li
54.9746 170.37 li
56.2744 169.07 li
57.375 167.971 li
58.6748 166.671 li
58.8711 166.476 li
59.873 166.476 li
59.0762 167.272 li
57.9766 168.372 li
56.6768 169.672 li
55.5762 170.772 li
54.2764 172.072 li
53.7871 172.562 li
53.7871 173.959 li
53.875 173.87 li
54.9746 172.771 li
56.2744 171.471 li
57.375 170.37 li
58.6748 169.07 li
59.7744 167.971 li
61.0752 166.671 li
61.2705 166.476 li
cp
f
61.4766 168.67 mo
61.4766 167.272 li
60.376 168.372 li
59.0762 169.672 li
57.9766 170.772 li
56.6768 172.072 li
55.5762 173.172 li
54.2764 174.472 li
53.7871 174.961 li
53.7871 176.358 li
53.875 176.271 li
54.9746 175.171 li
56.2744 173.87 li
57.375 172.771 li
58.6748 171.471 li
59.7744 170.37 li
61.0752 169.07 li
61.4766 168.67 li
cp
f
61.4766 171.069 mo
61.4766 169.672 li
60.376 170.772 li
59.0762 172.072 li
57.9766 173.172 li
56.6768 174.472 li
55.5762 175.572 li
54.2764 176.872 li
53.7871 177.361 li
53.7871 178.759 li
53.875 178.671 li
54.9746 177.57 li
56.2744 176.271 li
57.375 175.171 li
58.6748 173.87 li
59.7744 172.771 li
61.0752 171.471 li
61.4766 171.069 li
cp
f
61.4766 173.47 mo
61.4766 172.072 li
60.376 173.172 li
59.0762 174.472 li
57.9766 175.572 li
56.6768 176.872 li
55.5762 177.972 li
54.2764 179.272 li
53.7871 179.761 li
53.7871 181.159 li
53.875 181.07 li
54.9746 179.971 li
56.2744 178.671 li
57.375 177.57 li
58.6748 176.271 li
59.7744 175.171 li
61.0752 173.87 li
61.4766 173.47 li
cp
f
66.7617 151.257 mo
72.8506 151.257 li
72.8506 155.423 li
66.7617 155.423 li
66.7617 151.257 li
cp
73.6504 156.495 mo
73.6504 156.223 li
73.6504 150.456 li
65.9619 150.456 li
65.9619 156.223 li
65.9619 156.984 li
66.7236 156.223 li
67.7256 156.223 li
67.5762 156.372 li
66.2764 157.672 li
65.9619 157.987 li
65.9619 159.385 li
66.9746 158.37 li
68.2744 157.07 li
69.123 156.223 li
70.126 156.223 li
69.9766 156.372 li
68.6768 157.672 li
67.5762 158.772 li
66.2764 160.072 li
65.9619 160.387 li
65.9619 161.784 li
66.9746 160.771 li
68.2744 159.471 li
69.375 158.37 li
70.6748 157.07 li
71.5234 156.223 li
72.5254 156.223 li
72.376 156.372 li
71.0762 157.672 li
69.9766 158.772 li
68.6768 160.072 li
67.5762 161.172 li
66.2764 162.472 li
65.9619 162.787 li
65.9619 164.185 li
66.9746 163.171 li
68.2744 161.87 li
69.375 160.771 li
70.6748 159.471 li
71.7744 158.37 li
73.0752 157.07 li
73.6504 156.495 li
cp
f
73.6504 158.896 mo
73.6504 157.498 li
73.4766 157.672 li
72.376 158.772 li
71.0762 160.072 li
69.9766 161.172 li
68.6768 162.472 li
67.5762 163.572 li
66.2764 164.872 li
65.9619 165.187 li
65.9619 166.585 li
66.9746 165.57 li
68.2744 164.271 li
69.375 163.171 li
70.6748 161.87 li
71.7744 160.771 li
73.0752 159.471 li
73.6504 158.896 li
cp
f
73.6504 161.296 mo
73.6504 159.897 li
73.4766 160.072 li
72.376 161.172 li
71.0762 162.472 li
69.9766 163.572 li
68.6768 164.872 li
67.5762 165.972 li
66.2764 167.272 li
65.9619 167.587 li
65.9619 168.984 li
66.9746 167.971 li
68.2744 166.671 li
69.375 165.57 li
70.6748 164.271 li
71.7744 163.171 li
73.0752 161.87 li
73.6504 161.296 li
cp
f
73.6504 163.695 mo
73.6504 162.298 li
73.4766 162.472 li
72.376 163.572 li
71.0762 164.872 li
69.9766 165.972 li
68.6768 167.272 li
67.5762 168.372 li
66.2764 169.672 li
65.9619 169.987 li
65.9619 171.385 li
66.9746 170.37 li
68.2744 169.07 li
69.375 167.971 li
70.6748 166.671 li
71.7744 165.57 li
73.0752 164.271 li
73.6504 163.695 li
cp
f
83.7744 170.37 mo
84.5439 169.603 li
84.5439 168.205 li
84.376 168.372 li
83.0762 169.672 li
81.9766 170.772 li
80.6768 172.072 li
79.5762 173.172 li
78.2764 174.472 li
77.1768 175.572 li
76.8545 175.894 li
76.8545 177.292 li
77.875 176.271 li
78.9746 175.171 li
80.2744 173.87 li
81.375 172.771 li
82.6748 171.471 li
83.7744 170.37 li
cp
f
83.7744 172.771 mo
84.5439 172.003 li
84.5439 170.604 li
84.376 170.772 li
83.0762 172.072 li
81.9766 173.172 li
80.6768 174.472 li
79.5762 175.572 li
78.2764 176.872 li
77.1768 177.972 li
76.8545 178.294 li
76.8545 179.691 li
77.875 178.671 li
78.9746 177.57 li
80.2744 176.271 li
81.375 175.171 li
82.6748 173.87 li
83.7744 172.771 li
cp
f
83.7744 175.171 mo
84.5439 174.402 li
84.5439 173.005 li
84.376 173.172 li
83.0762 174.472 li
81.9766 175.572 li
80.6768 176.872 li
79.5762 177.972 li
78.2764 179.272 li
77.1768 180.372 li
76.8545 180.694 li
76.8545 182.092 li
77.875 181.07 li
78.9746 179.971 li
80.2744 178.671 li
81.375 177.57 li
82.6748 176.271 li
83.7744 175.171 li
cp
f
83.7432 162.79 mo
83.7432 165.675 li
77.6543 165.675 li
77.6543 162.79 li
83.7432 162.79 li
cp
76.8545 166.476 mo
76.8545 167.691 li
77.875 166.671 li
78.0713 166.476 li
79.0732 166.476 li
78.2764 167.272 li
77.1768 168.372 li
76.8545 168.694 li
76.8545 170.092 li
77.875 169.07 li
78.9746 167.971 li
80.2744 166.671 li
80.4707 166.476 li
81.4736 166.476 li
80.6768 167.272 li
79.5762 168.372 li
78.2764 169.672 li
77.1768 170.772 li
76.8545 171.094 li
76.8545 172.491 li
77.875 171.471 li
78.9746 170.37 li
80.2744 169.07 li
81.375 167.971 li
82.6748 166.671 li
82.8711 166.476 li
83.873 166.476 li
83.0762 167.272 li
81.9766 168.372 li
80.6768 169.672 li
79.5762 170.772 li
78.2764 172.072 li
77.1768 173.172 li
76.8545 173.494 li
76.8545 174.892 li
77.875 173.87 li
78.9746 172.771 li
80.2744 171.471 li
81.375 170.37 li
82.6748 169.07 li
83.7744 167.971 li
84.5439 167.202 li
84.5439 166.476 li
84.5439 161.99 li
76.8545 161.99 li
76.8545 166.476 li
cp
f
48.8516 183.908 mo
42.1123 183.908 li
42.1123 174.645 li
48.8516 174.645 li
48.8516 183.908 li
cp
1 1 1 rgb
f
61.4766 166.476 mo
53.7871 166.476 li
53.7871 158.334 li
61.4766 158.334 li
61.4766 166.476 li
cp
f
73.6514 158.639 mo
65.9619 158.639 li
65.9619 150.498 li
73.6514 150.498 li
73.6514 158.639 li
cp
f
84.5439 170.131 mo
76.8545 170.131 li
76.8545 161.99 li
84.5439 161.99 li
84.5439 170.131 li
cp
f
210.24 200.884 mo
210.24 206.384 205.74 210.884 200.24 210.884 cv
143.083 210.884 li
137.583 210.884 133.083 206.384 133.083 200.884 cv
133.083 143.727 li
133.083 138.227 137.583 133.727 143.083 133.727 cv
200.24 133.727 li
205.74 133.727 210.24 138.227 210.24 143.727 cv
210.24 200.884 li
cp
.780392 .921569 .984314 rgb
f
186.676 157.293 mo
190.816 161.433 192.886 166.863 192.886 172.303 cv
192.886 177.743 190.816 183.183 186.676 187.323 cv
185.136 185.773 li
183.586 184.233 li
186.875 180.943 188.526 176.623 188.526 172.303 cv
188.526 170.143 188.116 167.983 187.286 165.953 cv
186.466 163.923 185.226 162.023 183.586 160.383 cv
180.296 157.093 175.986 155.443 171.666 155.443 cv
170.246 155.443 168.836 155.643 167.456 155.993 cv
164.625 156.723 161.946 158.173 159.736 160.383 cv
157.236 162.873 155.696 165.963 155.096 169.203 cv
154.906 170.223 154.806 171.263 154.806 172.303 cv
154.806 176.623 156.446 180.943 159.736 184.233 cv
163.026 187.523 167.346 189.163 171.666 189.163 cv
171.666 191.353 li
171.666 193.533 li
166.226 193.533 160.786 191.463 156.646 187.323 cv
154.576 185.253 153.026 182.863 151.986 180.303 cv
150.956 177.743 150.436 175.023 150.436 172.303 cv
150.436 170.943 150.566 169.583 150.826 168.243 cv
151.596 164.233 153.536 160.393 156.646 157.293 cv
156.646 157.283 li
160.186 153.753 164.666 151.743 169.286 151.223 cv
170.076 151.133 170.866 151.083 171.666 151.083 cv
171.696 151.083 171.726 151.083 171.756 151.083 cv
177.166 151.113 182.566 153.173 186.676 157.283 cv
186.676 157.293 li
cp
.945098 .203922 .321569 rgb
f
171.666 161.563 mo
171.266 161.563 170.866 161.593 170.466 161.633 cv
171.176 160.923 li
172.476 159.623 li
173.576 158.523 li
174.616 157.483 li
174.996 157.563 175.366 157.653 175.736 157.763 cv
175.576 157.923 li
174.276 159.223 li
173.176 160.323 li
171.926 161.573 li
171.836 161.573 171.746 161.563 171.666 161.563 cv
cp
f
186.776 172.303 mo
186.196 172.303 li
186.746 171.753 li
186.756 171.943 186.776 172.123 186.776 172.303 cv
cp
f
158.776 165.123 mo
157.976 165.923 li
158.696 164.363 159.686 162.903 160.976 161.613 cv
162.256 160.333 163.726 159.343 165.286 158.623 cv
164.676 159.223 li
163.576 160.323 li
162.276 161.623 li
161.176 162.723 li
159.875 164.023 li
158.776 165.123 li
cp
f
163.976 184.923 mo
165.276 183.623 li
166.375 182.523 li
166.946 181.953 li
167.266 182.113 167.596 182.253 167.926 182.373 cv
167.076 183.223 li
165.976 184.323 li
164.676 185.623 li
164.616 185.683 li
164.316 185.523 164.026 185.343 163.736 185.163 cv
163.976 184.923 li
cp
f
165.296 186.003 mo
166.375 184.923 li
167.676 183.623 li
168.676 182.623 li
169.056 182.733 169.436 182.813 169.816 182.883 cv
169.476 183.223 li
168.375 184.323 li
167.076 185.623 li
166.276 186.423 li
165.946 186.293 165.625 186.153 165.296 186.003 cv
cp
f
175.576 160.323 mo
174.276 161.623 li
174.056 161.843 li
173.666 161.753 173.266 161.683 172.866 161.633 cv
173.576 160.923 li
174.875 159.623 li
175.976 158.523 li
176.496 158.003 li
176.846 158.113 177.186 158.233 177.526 158.373 cv
176.676 159.223 li
175.576 160.323 li
cp
f
168.936 187.163 mo
170.076 186.023 li
171.176 184.923 li
171.666 184.443 li
171.666 185.233 li
171.666 185.833 li
170.776 186.723 li
170.156 187.343 li
169.746 187.303 169.346 187.233 168.936 187.163 cv
cp
f
169.256 161.843 mo
168.526 162.013 167.816 162.253 167.125 162.573 cv
167.676 162.023 li
168.776 160.923 li
170.076 159.623 li
171.176 158.523 li
172.466 157.233 li
172.896 157.253 173.326 157.293 173.746 157.353 cv
173.176 157.923 li
171.875 159.223 li
170.776 160.323 li
169.476 161.623 li
169.256 161.843 li
cp
f
157.476 168.823 mo
156.816 169.483 li
156.936 168.843 157.116 168.213 157.316 167.583 cv
158.076 166.823 li
159.176 165.723 li
160.476 164.423 li
161.576 163.323 li
162.875 162.023 li
163.976 160.923 li
165.276 159.623 li
166.375 158.523 li
166.946 157.963 li
167.566 157.753 168.196 157.583 168.836 157.463 cv
168.375 157.923 li
167.076 159.223 li
165.976 160.323 li
164.676 161.623 li
163.576 162.723 li
162.276 164.023 li
161.176 165.123 li
159.875 166.423 li
158.776 167.523 li
157.476 168.823 li
cp
f
162.875 183.623 mo
163.976 182.523 li
165.276 181.223 li
165.446 181.053 li
165.726 181.253 166.006 181.433 166.296 181.603 cv
165.976 181.923 li
164.676 183.223 li
163.576 184.323 li
163.125 184.773 li
162.855 184.583 162.586 184.393 162.326 184.183 cv
162.875 183.623 li
cp
f
167.676 186.023 mo
168.776 184.923 li
170.076 183.623 li
170.696 183.003 li
171.016 183.033 171.336 183.053 171.666 183.053 cv
171.666 183.433 li
170.776 184.323 li
169.476 185.623 li
168.375 186.723 li
168.116 186.983 li
167.746 186.893 167.386 186.793 167.026 186.683 cv
167.676 186.023 li
cp
f
180.375 162.723 mo
179.076 164.023 li
178.806 164.293 li
178.556 164.073 178.296 163.863 178.036 163.663 cv
178.375 163.323 li
179.676 162.023 li
180.776 160.923 li
181.156 160.543 li
181.416 160.753 181.656 160.983 181.896 161.203 cv
181.476 161.623 li
180.375 162.723 li
cp
f
156.776 172.923 mo
158.076 171.623 li
159.176 170.523 li
160.476 169.223 li
161.576 168.123 li
161.926 167.773 li
161.616 168.453 161.366 169.173 161.196 169.893 cv
161.176 169.923 li
159.875 171.223 li
158.776 172.323 li
157.476 173.623 li
156.706 174.393 li
156.656 173.963 156.616 173.543 156.586 173.113 cv
156.776 172.923 li
cp
f
161.776 183.723 mo
161.526 183.503 161.276 183.293 161.046 183.063 cv
161.576 182.523 li
162.875 181.223 li
163.976 180.123 li
164.136 179.973 li
164.366 180.203 164.616 180.423 164.866 180.633 cv
164.676 180.823 li
163.576 181.923 li
162.276 183.223 li
161.776 183.723 li
cp
f
177.276 159.623 mo
178.206 158.693 li
178.516 158.843 178.826 159.003 179.125 159.173 cv
179.076 159.223 li
177.976 160.323 li
176.676 161.623 li
175.875 162.423 li
175.536 162.283 175.196 162.153 174.855 162.053 cv
174.875 162.023 li
175.976 160.923 li
177.276 159.623 li
cp
f
181.726 168.573 mo
181.605 168.243 181.466 167.913 181.306 167.593 cv
182.076 166.823 li
183.176 165.723 li
184.476 164.423 li
184.526 164.383 li
184.696 164.673 184.886 164.963 185.036 165.263 cv
183.875 166.423 li
182.776 167.523 li
181.726 168.573 li
cp
f
161.176 179.523 mo
159.875 180.823 li
159.476 181.223 li
159.276 180.953 159.086 180.683 158.906 180.403 cv
159.176 180.123 li
160.476 178.823 li
161.576 177.723 li
162.096 177.203 li
162.256 177.503 162.426 177.803 162.605 178.093 cv
162.276 178.423 li
161.176 179.523 li
cp
f
158.076 176.423 mo
159.176 175.323 li
160.476 174.023 li
160.996 173.513 li
161.036 173.913 161.105 174.303 161.196 174.703 cv
161.176 174.723 li
159.875 176.023 li
158.776 177.123 li
157.736 178.163 li
157.596 177.833 157.476 177.483 157.355 177.143 cv
158.076 176.423 li
cp
f
177.276 162.023 mo
178.375 160.923 li
179.676 159.623 li
179.756 159.543 li
180.036 159.723 180.306 159.923 180.576 160.123 cv
180.375 160.323 li
179.076 161.623 li
177.976 162.723 li
177.446 163.253 li
177.156 163.063 176.866 162.893 176.556 162.743 cv
177.276 162.023 li
cp
f
158.076 178.823 mo
159.176 177.723 li
160.476 176.423 li
161.406 175.493 li
161.516 175.843 161.636 176.183 161.786 176.523 cv
161.176 177.123 li
159.875 178.423 li
158.776 179.523 li
158.536 179.773 li
158.355 179.463 158.196 179.163 158.056 178.853 cv
158.076 178.823 li
cp
f
183.875 171.223 mo
182.796 172.303 li
182.406 172.303 li
182.406 171.983 182.386 171.663 182.355 171.343 cv
183.176 170.523 li
184.476 169.223 li
185.576 168.123 li
186.036 167.663 li
186.156 168.023 186.246 168.393 186.336 168.763 cv
186.276 168.823 li
185.176 169.923 li
183.875 171.223 li
cp
f
156.776 170.523 mo
158.076 169.223 li
159.176 168.123 li
160.476 166.823 li
161.576 165.723 li
162.875 164.423 li
163.976 163.323 li
165.276 162.023 li
166.375 160.923 li
167.676 159.623 li
168.776 158.523 li
170.006 157.293 li
170.506 157.243 170.996 157.203 171.496 157.203 cv
170.776 157.923 li
169.476 159.223 li
168.375 160.323 li
167.076 161.623 li
165.976 162.723 li
164.676 164.023 li
163.576 165.123 li
162.276 166.423 li
161.176 167.523 li
159.875 168.823 li
158.776 169.923 li
157.476 171.223 li
156.556 172.143 li
156.566 171.643 156.596 171.143 156.646 170.653 cv
156.776 170.523 li
cp
f
186.526 169.583 mo
186.596 169.983 186.656 170.393 186.696 170.803 cv
186.276 171.223 li
185.196 172.303 li
184.586 172.303 li
183.796 172.303 li
184.476 171.623 li
185.576 170.523 li
186.526 169.583 li
cp
f
199.006 172.303 mo
196.816 172.303 li
194.636 172.303 li
194.636 169.363 194.076 166.423 192.956 163.653 cv
191.836 160.883 190.156 158.293 187.916 156.053 cv
185.676 153.813 183.086 152.133 180.316 151.013 cv
177.546 149.893 174.605 149.333 171.666 149.333 cv
168.855 149.333 166.056 149.843 163.406 150.863 cv
160.486 151.983 157.756 153.703 155.406 156.053 cv
151.206 160.263 148.976 165.703 148.716 171.233 cv
148.696 171.583 148.686 171.943 148.686 172.303 cv
148.686 178.193 150.926 184.073 155.406 188.553 cv
159.886 193.043 165.776 195.283 171.666 195.283 cv
171.666 197.463 li
171.666 199.643 li
164.656 199.643 157.656 196.983 152.316 191.643 cv
146.986 186.313 144.316 179.313 144.316 172.303 cv
144.316 171.493 144.355 170.683 144.436 169.873 cv
144.706 166.783 145.496 163.733 146.816 160.863 cv
148.125 158.003 149.966 155.323 152.316 152.963 cv
156.986 148.293 162.936 145.673 169.036 145.093 cv
169.906 145.003 170.786 144.963 171.666 144.963 cv
175.166 144.963 178.666 145.633 181.966 146.963 cv
185.256 148.303 188.346 150.303 191.006 152.963 cv
196.336 158.293 199.006 165.303 199.006 172.303 cv
cp
1 1 1 rgb
f
183.875 168.823 mo
182.776 169.923 li
182.236 170.463 li
182.176 170.073 182.086 169.693 181.986 169.323 cv
182.076 169.223 li
183.176 168.123 li
184.476 166.823 li
185.355 165.943 li
185.506 166.263 185.656 166.593 185.776 166.923 cv
185.176 167.523 li
183.875 168.823 li
cp
.945098 .203922 .321569 rgb
f
156.846 175.263 mo
158.076 174.023 li
159.176 172.923 li
160.476 171.623 li
160.996 171.113 li
160.946 171.503 160.916 171.903 160.916 172.303 cv
160.916 172.393 160.926 172.483 160.936 172.573 cv
159.875 173.623 li
158.776 174.723 li
157.476 176.023 li
157.116 176.383 li
157.016 176.013 156.916 175.633 156.846 175.263 cv
cp
f
180.776 163.323 mo
182.076 162.023 li
182.416 161.683 li
182.656 161.923 182.866 162.173 183.076 162.423 cv
182.776 162.723 li
181.476 164.023 li
180.375 165.123 li
179.986 165.513 li
179.786 165.253 179.556 165.013 179.326 164.773 cv
179.676 164.423 li
180.776 163.323 li
cp
f
180.776 165.723 mo
182.076 164.423 li
183.176 163.323 li
183.536 162.963 li
183.746 163.223 183.946 163.493 184.125 163.773 cv
183.875 164.023 li
182.776 165.123 li
181.476 166.423 li
180.966 166.933 li
180.796 166.643 180.616 166.363 180.416 166.083 cv
180.776 165.723 li
cp
f
171.666 186.843 mo
171.666 187.413 li
171.476 187.413 171.296 187.393 171.116 187.393 cv
171.176 187.323 li
171.666 186.843 li
cp
f
160.556 182.543 mo
160.336 182.293 160.105 182.053 159.906 181.803 cv
160.476 181.223 li
161.576 180.123 li
162.875 178.823 li
163.026 178.683 li
163.216 178.943 163.426 179.203 163.646 179.453 cv
163.576 179.523 li
162.276 180.823 li
161.176 181.923 li
160.556 182.543 li
cp
f
177.996 177.513 mo
179.206 176.053 179.855 174.233 179.855 172.303 cv
179.855 170.113 179.006 168.053 177.456 166.503 cv
175.916 164.963 173.855 164.113 171.666 164.113 cv
169.466 164.113 167.406 164.963 165.866 166.503 cv
164.316 168.053 163.466 170.113 163.466 172.303 cv
163.466 174.503 164.316 176.553 165.866 178.103 cv
167.216 179.463 168.976 180.283 170.866 180.463 cv
170.866 179.123 li
170.866 177.673 li
169.716 177.503 168.656 176.983 167.826 176.143 cv
166.796 175.123 166.236 173.753 166.236 172.303 cv
166.236 170.853 166.796 169.493 167.826 168.463 cv
168.846 167.443 170.206 166.873 171.666 166.873 cv
173.116 166.873 174.476 167.443 175.506 168.463 cv
176.526 169.493 177.086 170.853 177.086 172.303 cv
177.086 173.483 176.716 174.613 176.026 175.533 cv
177.046 176.563 li
177.996 177.513 li
cp
178.026 165.943 mo
179.786 167.693 180.656 170.003 180.656 172.303 cv
180.656 174.613 179.786 176.913 178.026 178.673 cv
176.486 177.123 li
174.936 175.583 li
175.836 174.673 176.286 173.493 176.286 172.303 cv
176.286 171.123 175.836 169.933 174.936 169.033 cv
174.036 168.133 172.846 167.673 171.666 167.673 cv
170.476 167.673 169.296 168.123 168.386 169.033 cv
167.486 169.933 167.036 171.123 167.036 172.303 cv
167.036 173.493 167.486 174.673 168.386 175.583 cv
169.296 176.483 170.476 176.933 171.666 176.933 cv
171.666 179.123 li
171.666 181.303 li
169.355 181.303 167.056 180.423 165.296 178.673 cv
163.546 176.913 162.666 174.613 162.666 172.303 cv
162.666 171.153 162.886 170.003 163.326 168.913 cv
163.766 167.833 164.426 166.823 165.296 165.943 cv
167.056 164.183 169.355 163.313 171.666 163.313 cv
173.966 163.313 176.276 164.183 178.026 165.943 cv
cp
f
179.855 172.303 mo
179.855 174.233 179.206 176.053 177.996 177.513 cv
177.046 176.563 li
176.026 175.533 li
176.716 174.613 177.086 173.483 177.086 172.303 cv
177.086 170.853 176.526 169.493 175.506 168.463 cv
174.476 167.443 173.116 166.873 171.666 166.873 cv
170.206 166.873 168.846 167.443 167.826 168.463 cv
166.796 169.493 166.236 170.853 166.236 172.303 cv
166.236 173.753 166.796 175.123 167.826 176.143 cv
168.656 176.983 169.716 177.503 170.866 177.673 cv
170.866 179.123 li
170.866 180.463 li
168.976 180.283 167.216 179.463 165.866 178.103 cv
164.316 176.553 163.466 174.503 163.466 172.303 cv
163.466 170.113 164.316 168.053 165.866 166.503 cv
167.406 164.963 169.466 164.113 171.666 164.113 cv
173.855 164.113 175.916 164.963 177.456 166.503 cv
179.006 168.053 179.855 170.113 179.855 172.303 cv
cp
f
102.469 98.1538 mo
102.469 103.654 97.9688 108.154 92.4688 108.154 cv
35.3115 108.154 li
29.8115 108.154 25.3115 103.654 25.3115 98.1538 cv
25.3115 40.9966 li
25.3115 35.4966 29.8115 30.9966 35.3115 30.9966 cv
92.4688 30.9966 li
97.9688 30.9966 102.469 35.4966 102.469 40.9966 cv
102.469 98.1538 li
cp
.00392157 .239216 .47451 rgb
f
37.1963 95.9224 mo
44.9883 95.9224 li
44.9883 73.752 li
37.1963 73.752 li
37.1963 95.9224 li
cp
.945098 .203922 .321569 rgb
f
47.7822 95.9224 mo
56.5586 95.9224 li
56.5586 78.4507 li
47.7822 78.4507 li
47.7822 95.9224 li
cp
f
59.4805 95.9224 mo
68.2568 95.9224 li
68.2568 71.4297 li
59.4805 71.4297 li
59.4805 95.9224 li
cp
f
71.1787 95.9224 mo
79.9541 95.9224 li
79.9541 64.9004 li
71.1787 64.9004 li
71.1787 95.9224 li
cp
f
82.877 95.9224 mo
91.6533 95.9224 li
91.6533 53.793 li
82.877 53.793 li
82.877 95.9224 li
cp
f
88.6416 46.8926 mo
89.3369 47.8135 li
92.1133 43.2285 li
86.9395 44.6333 li
87.3369 45.1592 li
87.6338 45.5547 li
52.1631 72.2856 li
35.666 60.0713 li
35.666 62.2578 li
52.1704 74.4165 li
52.2085 74.4414 88.6416 46.8926 88.6416 46.8926 cv
cp
1 1 1 rgb
f
424.688 409.004 mo
424.688 414.504 420.188 419.004 414.688 419.004 cv
357.53 419.004 li
352.03 419.004 347.53 414.504 347.53 409.004 cv
347.53 351.846 li
347.53 346.346 352.03 341.846 357.53 341.846 cv
414.688 341.846 li
420.188 341.846 424.688 346.346 424.688 351.846 cv
424.688 409.004 li
cp
.00392157 .239216 .47451 rgb
f
413.355 368.35 mo
413.355 369.35 li
413.055 369.65 li
411.755 370.95 li
410.655 372.05 li
409.355 373.35 li
408.255 374.45 li
406.955 375.75 li
405.855 376.85 li
404.555 378.15 li
403.455 379.25 li
402.155 380.55 li
401.055 381.65 li
399.755 382.95 li
399.165 383.53 li
398.535 383.16 li
399.355 382.34 li
400.455 381.24 li
401.755 379.94 li
402.855 378.84 li
404.155 377.55 li
405.165 376.53 li
403.935 376.36 li
403.455 376.85 li
402.155 378.15 li
401.055 379.25 li
399.755 380.55 li
398.655 381.65 li
397.655 382.65 li
397.025 382.28 li
398.055 381.24 li
399.355 379.94 li
400.455 378.84 li
401.755 377.55 li
402.855 376.44 li
403.055 376.24 li
401.835 376.07 li
401.055 376.85 li
399.755 378.15 li
398.655 379.25 li
397.355 380.55 li
396.255 381.65 li
396.145 381.76 li
395.505 381.39 li
395.655 381.24 li
396.955 379.94 li
398.055 378.84 li
399.355 377.55 li
400.455 376.44 li
400.955 375.94 li
399.725 375.77 li
398.655 376.85 li
397.355 378.15 li
396.255 379.25 li
394.955 380.55 li
394.625 380.87 li
393.995 380.5 li
394.555 379.94 li
395.655 378.84 li
396.955 377.55 li
398.055 376.44 li
398.855 375.65 li
397.625 375.48 li
397.355 375.75 li
396.255 376.85 li
394.955 378.15 li
393.855 379.25 li
392.555 380.55 li
391.455 381.65 li
390.155 382.95 li
389.055 384.05 li
387.755 385.35 li
386.655 386.45 li
385.355 387.75 li
384.255 388.85 li
382.955 390.15 li
381.855 391.25 li
380.555 392.55 li
379.455 393.65 li
378.155 394.95 li
377.055 396.05 li
375.835 397.27 li
375.125 396.97 li
375.355 396.74 li
376.455 395.65 li
377.755 394.34 li
378.855 393.24 li
380.155 391.94 li
381.255 390.84 li
382.555 389.55 li
383.655 388.44 li
384.955 387.15 li
386.055 386.05 li
387.355 384.74 li
388.455 383.65 li
389.755 382.34 li
390.855 381.24 li
392.155 379.94 li
393.255 378.84 li
394.555 377.55 li
395.655 376.44 li
396.745 375.35 li
395.525 375.18 li
394.955 375.75 li
393.855 376.85 li
392.555 378.15 li
391.455 379.25 li
390.155 380.55 li
389.055 381.65 li
387.755 382.95 li
386.655 384.05 li
385.355 385.35 li
384.255 386.45 li
382.955 387.75 li
381.855 388.85 li
380.555 390.15 li
379.455 391.25 li
378.155 392.55 li
377.055 393.65 li
375.755 394.95 li
374.655 396.05 li
374.145 396.55 li
373.445 396.25 li
374.055 395.65 li
375.355 394.34 li
376.455 393.24 li
377.755 391.94 li
378.855 390.84 li
380.155 389.55 li
381.255 388.44 li
382.555 387.15 li
383.655 386.05 li
384.955 384.74 li
386.055 383.65 li
387.355 382.34 li
388.455 381.24 li
389.755 379.94 li
390.855 378.84 li
392.155 377.55 li
393.255 376.44 li
394.555 375.15 li
394.645 375.06 li
393.865 374.95 li
391.175 377.13 li
390.155 378.15 li
389.055 379.25 li
387.755 380.55 li
386.655 381.65 li
385.355 382.95 li
384.255 384.05 li
382.955 385.35 li
381.855 386.45 li
380.555 387.75 li
379.455 388.85 li
378.155 390.15 li
377.055 391.25 li
375.755 392.55 li
374.655 393.65 li
373.355 394.95 li
372.465 395.84 li
371.755 395.54 li
372.955 394.34 li
374.055 393.24 li
375.355 391.94 li
376.455 390.84 li
377.755 389.55 li
378.855 388.44 li
380.155 387.15 li
381.255 386.05 li
382.555 384.74 li
383.655 383.65 li
384.955 382.34 li
385.945 381.36 li
378.925 387.03 li
378.875 387.03 li
378.155 387.75 li
377.055 388.85 li
375.755 390.15 li
374.655 391.25 li
373.355 392.55 li
372.255 393.65 li
370.955 394.95 li
370.055 395.85 li
367.565 397.34 li
368.155 396.74 li
369.255 395.65 li
370.555 394.34 li
371.655 393.24 li
372.955 391.94 li
374.055 390.84 li
375.355 389.55 li
376.455 388.44 li
377.755 387.15 li
378.005 386.89 li
376.785 386.71 li
375.755 387.75 li
374.655 388.85 li
373.355 390.15 li
372.255 391.25 li
370.955 392.55 li
369.855 393.65 li
368.555 394.95 li
367.455 396.05 li
366.155 397.35 li
365.055 398.45 li
364.085 399.41 li
361.595 400.9 li
362.055 400.44 li
363.355 399.15 li
364.455 398.05 li
365.755 396.74 li
366.855 395.65 li
368.155 394.34 li
369.255 393.24 li
370.555 391.94 li
371.655 390.84 li
372.955 389.55 li
374.055 388.44 li
375.355 387.15 li
375.915 386.58 li
374.695 386.4 li
374.655 386.45 li
373.355 387.75 li
372.255 388.85 li
370.955 390.15 li
369.855 391.25 li
368.555 392.55 li
367.455 393.65 li
366.155 394.95 li
365.055 396.05 li
363.755 397.35 li
362.655 398.45 li
361.355 399.75 li
360.255 400.85 li
359.905 401.2 li
359.905 400.19 li
360.955 399.15 li
362.055 398.05 li
363.355 396.74 li
364.455 395.65 li
365.755 394.34 li
366.855 393.24 li
368.155 391.94 li
369.255 390.84 li
370.555 389.55 li
371.655 388.44 li
372.955 387.15 li
373.825 386.27 li
372.615 386.09 li
372.255 386.45 li
370.955 387.75 li
369.855 388.85 li
368.555 390.15 li
367.455 391.25 li
366.155 392.55 li
365.055 393.65 li
363.755 394.95 li
362.655 396.05 li
361.355 397.35 li
360.255 398.45 li
359.905 398.8 li
359.905 397.79 li
360.955 396.74 li
362.055 395.65 li
363.355 394.34 li
364.455 393.24 li
365.755 391.94 li
366.855 390.84 li
368.155 389.55 li
369.255 388.44 li
370.555 387.15 li
371.655 386.05 li
371.735 385.96 li
371.355 385.9 li
359.905 396.92 li
359.905 387.16 li
370.995 377.52 li
378.075 381.14 li
378.625 381.42 li
379.035 380.96 li
394.045 364.35 li
404.965 370.18 li
405.635 370.54 li
406.025 369.88 li
413.355 357.56 li
413.355 364.55 li
410.555 368.74 li
411.355 367.94 li
412.455 366.84 li
413.355 365.95 li
413.355 366.95 li
413.055 367.25 li
411.755 368.55 li
410.655 369.65 li
409.355 370.95 li
408.545 371.75 li
405.745 375.95 li
406.555 375.15 li
407.655 374.05 li
408.955 372.74 li
410.055 371.65 li
411.355 370.34 li
412.455 369.24 li
413.355 368.35 li
cp
1 1 1 rgb
f
413.355 364.55 mo
410.555 368.74 li
411.355 367.94 li
412.455 366.84 li
413.355 365.95 li
413.355 366.95 li
413.055 367.25 li
411.755 368.55 li
410.655 369.65 li
409.355 370.95 li
408.545 371.75 li
405.745 375.95 li
406.555 375.15 li
407.655 374.05 li
408.955 372.74 li
410.055 371.65 li
411.355 370.34 li
412.455 369.24 li
413.355 368.35 li
413.355 369.35 li
413.055 369.65 li
411.755 370.95 li
410.655 372.05 li
409.355 373.35 li
408.255 374.45 li
406.955 375.75 li
405.855 376.85 li
404.555 378.15 li
403.455 379.25 li
402.155 380.55 li
401.055 381.65 li
399.755 382.95 li
399.165 383.53 li
398.535 383.16 li
399.355 382.34 li
400.455 381.24 li
401.755 379.94 li
402.855 378.84 li
404.155 377.55 li
405.165 376.53 li
403.935 376.36 li
403.455 376.85 li
402.155 378.15 li
401.055 379.25 li
399.755 380.55 li
398.655 381.65 li
397.655 382.65 li
397.025 382.28 li
398.055 381.24 li
399.355 379.94 li
400.455 378.84 li
401.755 377.55 li
402.855 376.44 li
403.055 376.24 li
401.835 376.07 li
401.055 376.85 li
399.755 378.15 li
398.655 379.25 li
397.355 380.55 li
396.255 381.65 li
396.145 381.76 li
395.505 381.39 li
395.655 381.24 li
396.955 379.94 li
398.055 378.84 li
399.355 377.55 li
400.455 376.44 li
400.955 375.94 li
399.725 375.77 li
398.655 376.85 li
397.355 378.15 li
396.255 379.25 li
394.955 380.55 li
394.625 380.87 li
393.995 380.5 li
394.555 379.94 li
395.655 378.84 li
396.955 377.55 li
398.055 376.44 li
398.855 375.65 li
397.625 375.48 li
397.355 375.75 li
396.255 376.85 li
394.955 378.15 li
393.855 379.25 li
392.555 380.55 li
391.455 381.65 li
390.155 382.95 li
389.055 384.05 li
387.755 385.35 li
386.655 386.45 li
385.355 387.75 li
384.255 388.85 li
382.955 390.15 li
381.855 391.25 li
380.555 392.55 li
379.455 393.65 li
378.155 394.95 li
377.055 396.05 li
375.835 397.27 li
375.125 396.97 li
375.355 396.74 li
376.455 395.65 li
377.755 394.34 li
378.855 393.24 li
380.155 391.94 li
381.255 390.84 li
382.555 389.55 li
383.655 388.44 li
384.955 387.15 li
386.055 386.05 li
387.355 384.74 li
388.455 383.65 li
389.755 382.34 li
390.855 381.24 li
392.155 379.94 li
393.255 378.84 li
394.555 377.55 li
395.655 376.44 li
396.745 375.35 li
395.525 375.18 li
394.955 375.75 li
393.855 376.85 li
392.555 378.15 li
391.455 379.25 li
390.155 380.55 li
389.055 381.65 li
387.755 382.95 li
386.655 384.05 li
385.355 385.35 li
384.255 386.45 li
382.955 387.75 li
381.855 388.85 li
380.555 390.15 li
379.455 391.25 li
378.155 392.55 li
377.055 393.65 li
375.755 394.95 li
374.655 396.05 li
374.145 396.55 li
373.445 396.25 li
374.055 395.65 li
375.355 394.34 li
376.455 393.24 li
377.755 391.94 li
378.855 390.84 li
380.155 389.55 li
381.255 388.44 li
382.555 387.15 li
383.655 386.05 li
384.955 384.74 li
386.055 383.65 li
387.355 382.34 li
388.455 381.24 li
389.755 379.94 li
390.855 378.84 li
392.155 377.55 li
393.255 376.44 li
394.555 375.15 li
394.645 375.06 li
393.865 374.95 li
391.175 377.13 li
390.155 378.15 li
389.055 379.25 li
387.755 380.55 li
386.655 381.65 li
385.355 382.95 li
384.255 384.05 li
382.955 385.35 li
381.855 386.45 li
380.555 387.75 li
379.455 388.85 li
378.155 390.15 li
377.055 391.25 li
375.755 392.55 li
374.655 393.65 li
373.355 394.95 li
372.465 395.84 li
371.755 395.54 li
372.955 394.34 li
374.055 393.24 li
375.355 391.94 li
376.455 390.84 li
377.755 389.55 li
378.855 388.44 li
380.155 387.15 li
381.255 386.05 li
382.555 384.74 li
383.655 383.65 li
384.955 382.34 li
385.945 381.36 li
378.925 387.03 li
378.875 387.03 li
378.155 387.75 li
377.055 388.85 li
375.755 390.15 li
374.655 391.25 li
373.355 392.55 li
372.255 393.65 li
370.955 394.95 li
370.055 395.85 li
367.565 397.34 li
368.155 396.74 li
369.255 395.65 li
370.555 394.34 li
371.655 393.24 li
372.955 391.94 li
374.055 390.84 li
375.355 389.55 li
376.455 388.44 li
377.755 387.15 li
378.005 386.89 li
376.785 386.71 li
375.755 387.75 li
374.655 388.85 li
373.355 390.15 li
372.255 391.25 li
370.955 392.55 li
369.855 393.65 li
368.555 394.95 li
367.455 396.05 li
366.155 397.35 li
365.055 398.45 li
364.085 399.41 li
361.595 400.9 li
362.055 400.44 li
363.355 399.15 li
364.455 398.05 li
365.755 396.74 li
366.855 395.65 li
368.155 394.34 li
369.255 393.24 li
370.555 391.94 li
371.655 390.84 li
372.955 389.55 li
374.055 388.44 li
375.355 387.15 li
375.915 386.58 li
374.695 386.4 li
374.655 386.45 li
373.355 387.75 li
372.255 388.85 li
370.955 390.15 li
369.855 391.25 li
368.555 392.55 li
367.455 393.65 li
366.155 394.95 li
365.055 396.05 li
363.755 397.35 li
362.655 398.45 li
361.355 399.75 li
360.255 400.85 li
359.905 401.2 li
359.905 400.19 li
360.955 399.15 li
362.055 398.05 li
363.355 396.74 li
364.455 395.65 li
365.755 394.34 li
366.855 393.24 li
368.155 391.94 li
369.255 390.84 li
370.555 389.55 li
371.655 388.44 li
372.955 387.15 li
373.825 386.27 li
372.615 386.09 li
372.255 386.45 li
370.955 387.75 li
369.855 388.85 li
368.555 390.15 li
367.455 391.25 li
366.155 392.55 li
365.055 393.65 li
363.755 394.95 li
362.655 396.05 li
361.355 397.35 li
360.255 398.45 li
359.905 398.8 li
359.905 397.79 li
360.955 396.74 li
362.055 395.65 li
363.355 394.34 li
364.455 393.24 li
365.755 391.94 li
366.855 390.84 li
368.155 389.55 li
369.255 388.44 li
370.555 387.15 li
371.655 386.05 li
371.735 385.96 li
371.355 385.9 li
359.905 396.92 li
359.905 387.16 li
370.995 377.52 li
378.075 381.14 li
378.625 381.42 li
379.035 380.96 li
394.045 364.35 li
404.965 370.18 li
405.635 370.54 li
406.025 369.88 li
413.355 357.56 li
413.355 364.55 li
cp
405.345 369.47 mo
393.865 363.35 li
378.435 380.43 li
370.865 376.56 li
359.905 386.12 li
359.905 360.74 li
360.865 360.74 li
359.465 357.24 li
358.065 360.74 li
359.035 360.74 li
359.035 406.2 li
359.465 406.2 li
359.905 406.2 li
414.155 406.2 li
414.155 374.3 li
414.155 363.35 li
414.155 354.65 li
405.345 369.47 li
cp
.945098 .203922 .321569 rgb
f
424.688 304.422 mo
424.688 309.922 420.188 314.422 414.688 314.422 cv
357.53 314.422 li
352.03 314.422 347.53 309.922 347.53 304.422 cv
347.53 247.264 li
347.53 241.764 352.03 237.264 357.53 237.264 cv
414.688 237.264 li
420.188 237.264 424.688 241.764 424.688 247.264 cv
424.688 304.422 li
cp
.780392 .921569 .984314 rgb
f
408.383 253.855 mo
408.367 254.014 li
408.354 254.004 408.347 253.988 408.334 253.98 cv
408.302 253.959 408.264 253.949 408.229 253.938 cv
408.383 253.855 li
cp
413.881 299.486 mo
410.381 298.086 li
410.381 299.049 li
360.175 299.049 li
360.175 296.518 li
368.761 283.414 li
376.427 288.686 li
389.273 271.873 li
396.979 271.873 li
408.294 254.768 li
407.997 257.797 li
407.977 258.016 408.138 258.211 408.356 258.234 cv
408.37 258.234 408.383 258.234 408.396 258.234 cv
408.6 258.234 408.773 258.08 408.794 257.875 cv
409.323 252.453 li
404.472 255.018 li
404.276 255.121 404.201 255.363 404.305 255.559 cv
404.409 255.754 404.651 255.828 404.846 255.727 cv
407.698 254.217 li
396.55 271.074 li
388.878 271.074 li
382.542 279.365 li
380.672 277.701 li
380.506 277.555 380.255 277.57 380.106 277.734 cv
379.959 277.9 379.975 278.152 380.141 278.301 cv
382.023 279.975 li
382.034 279.984 382.049 279.988 382.06 279.996 cv
376.253 287.594 li
368.541 282.293 li
360.175 295.066 li
360.175 275.143 li
360.974 274.672 li
361.164 274.559 361.229 274.314 361.115 274.123 cv
361.003 273.932 360.758 273.869 360.567 273.982 cv
360.175 274.213 li
360.175 254.299 li
361.138 254.299 li
359.737 250.799 li
358.338 254.299 li
359.3 254.299 li
359.3 299.049 li
359.3 299.486 li
359.3 299.924 li
410.381 299.924 li
410.381 300.887 li
413.881 299.486 li
cp
.945098 .203922 .321569 rgb
f
365.744 271.795 mo
365.814 271.795 365.883 271.777 365.947 271.738 cv
367.604 270.762 li
367.795 270.648 367.857 270.404 367.745 270.215 cv
367.633 270.023 367.388 269.961 367.198 270.072 cv
365.541 271.051 li
365.35 271.162 365.287 271.408 365.4 271.598 cv
365.474 271.725 365.607 271.795 365.744 271.795 cv
cp
f
362.428 273.75 mo
362.498 273.75 362.567 273.73 362.631 273.693 cv
364.289 272.717 li
364.479 272.604 364.544 272.359 364.432 272.168 cv
364.318 271.977 364.072 271.914 363.883 272.027 cv
362.225 273.004 li
362.034 273.117 361.972 273.361 362.084 273.553 cv
362.158 273.68 362.292 273.75 362.428 273.75 cv
cp
f
369.263 269.785 mo
370.045 269.324 li
370.724 269.926 li
370.8 269.994 370.896 270.027 370.989 270.027 cv
371.1 270.027 371.209 269.982 371.287 269.895 cv
371.435 269.729 371.42 269.477 371.255 269.33 cv
370.143 268.338 li
368.856 269.096 li
368.666 269.207 368.602 269.453 368.714 269.643 cv
368.825 269.834 369.07 269.895 369.263 269.785 cv
cp
f
374.49 273.275 mo
374.565 273.344 374.661 273.377 374.756 273.377 cv
374.865 273.377 374.975 273.332 375.055 273.242 cv
375.201 273.078 375.188 272.824 375.021 272.678 cv
373.139 271.004 li
372.974 270.857 372.722 270.871 372.573 271.037 cv
372.427 271.201 372.442 271.455 372.607 271.602 cv
374.49 273.275 li
cp
f
378.256 276.625 mo
378.333 276.691 378.428 276.727 378.521 276.727 cv
378.633 276.727 378.742 276.68 378.822 276.592 cv
378.969 276.426 378.953 276.174 378.787 276.027 cv
376.904 274.352 li
376.74 274.207 376.487 274.219 376.341 274.387 cv
376.193 274.551 376.208 274.805 376.373 274.951 cv
378.256 276.625 li
cp
f
383.872 281.084 mo
383.725 281.25 383.74 281.502 383.906 281.648 cv
385.789 283.324 li
385.865 283.391 385.961 283.424 386.055 283.424 cv
386.166 283.424 386.275 283.379 386.354 283.289 cv
386.502 283.125 386.486 282.871 386.32 282.725 cv
384.438 281.051 li
384.271 280.906 384.019 280.918 383.872 281.084 cv
cp
f
389.63 284.512 mo
388.873 284.996 li
388.203 284.4 li
388.039 284.254 387.784 284.268 387.639 284.434 cv
387.492 284.598 387.508 284.852 387.672 284.998 cv
388.795 285.996 li
390.061 285.186 li
390.247 285.066 390.302 284.818 390.182 284.633 cv
390.061 284.445 389.813 284.393 389.63 284.512 cv
cp
f
394.039 281.684 mo
391.834 283.098 li
391.648 283.217 391.594 283.465 391.714 283.65 cv
391.791 283.77 391.919 283.834 392.05 283.834 cv
392.125 283.834 392.2 283.814 392.266 283.771 cv
394.471 282.357 li
394.656 282.238 394.711 281.99 394.592 281.805 cv
394.472 281.617 394.222 281.564 394.039 281.684 cv
cp
f
407.271 273.199 mo
405.065 274.613 li
404.88 274.732 404.825 274.979 404.943 275.164 cv
405.021 275.285 405.15 275.35 405.281 275.35 cv
405.354 275.35 405.43 275.328 405.497 275.285 cv
407.701 273.871 li
407.888 273.752 407.942 273.506 407.822 273.32 cv
407.701 273.133 407.453 273.078 407.271 273.199 cv
cp
f
398.45 278.855 mo
396.245 280.27 li
396.06 280.389 396.005 280.637 396.123 280.822 cv
396.2 280.941 396.33 281.006 396.461 281.006 cv
396.534 281.006 396.609 280.986 396.677 280.943 cv
398.881 279.529 li
399.067 279.41 399.122 279.162 399.002 278.977 cv
398.883 278.789 398.633 278.734 398.45 278.855 cv
cp
f
402.859 276.027 mo
400.654 277.441 li
400.469 277.561 400.414 277.807 400.534 277.992 cv
400.611 278.113 400.739 278.178 400.87 278.178 cv
400.945 278.178 401.021 278.156 401.086 278.113 cv
403.291 276.699 li
403.477 276.58 403.531 276.334 403.412 276.148 cv
403.292 275.961 403.044 275.906 402.859 276.027 cv
cp
f
411.037 271.258 mo
410.917 271.07 410.667 271.018 410.484 271.137 cv
409.475 271.785 li
409.289 271.904 409.234 272.15 409.354 272.336 cv
409.43 272.457 409.56 272.521 409.69 272.521 cv
409.764 272.521 409.839 272.5 409.906 272.457 cv
410.916 271.811 li
411.102 271.691 411.156 271.443 411.037 271.258 cv
cp
f
410.859 274.412 mo
410.916 274.438 410.974 274.451 411.031 274.451 cv
411.182 274.451 411.325 274.367 411.394 274.223 cv
413.729 269.303 li
408.295 270.07 li
408.076 270.102 407.925 270.305 407.956 270.523 cv
407.986 270.74 408.183 270.887 408.408 270.863 cv
412.369 270.303 li
410.67 273.879 li
410.575 274.078 410.661 274.316 410.859 274.412 cv
cp
f
210.24 409.004 mo
210.24 414.504 205.74 419.004 200.24 419.004 cv
143.083 419.004 li
137.583 419.004 133.083 414.504 133.083 409.004 cv
133.083 351.846 li
133.083 346.346 137.583 341.846 143.083 341.846 cv
200.24 341.846 li
205.74 341.846 210.24 346.346 210.24 351.846 cv
210.24 409.004 li
cp
.0117647 .658824 .870588 rgb
f
161.819 370.025 mo
150.834 370.025 li
150.834 364.193 li
161.819 364.193 li
161.819 370.025 li
cp
1 1 1 rgb
f
187.448 379.691 mo
159.661 379.691 li
159.661 373.02 li
187.448 373.02 li
187.448 379.691 li
cp
f
180.281 388.889 mo
158.865 388.889 li
158.865 382.215 li
180.281 382.215 li
180.281 388.889 li
cp
f
191.622 398.074 mo
162.846 398.074 li
162.846 391.402 li
191.622 391.402 li
191.622 398.074 li
cp
f
195.962 399.492 mo
195.962 400.455 li
145.699 400.455 li
145.699 398.064 li
164.067 398.064 li
164.964 398.064 li
165.462 397.564 li
166.562 396.465 li
167.863 395.166 li
168.962 394.064 li
170.262 392.766 li
171.363 391.666 li
171.616 391.412 li
170.218 391.412 li
169.564 392.066 li
168.264 393.367 li
167.164 394.467 li
165.864 395.768 li
164.764 396.867 li
164.067 397.564 li
164.067 396.561 li
164.163 396.465 li
165.462 395.166 li
166.562 394.064 li
167.863 392.766 li
168.962 391.666 li
169.215 391.412 li
167.819 391.412 li
167.164 392.066 li
165.864 393.367 li
164.764 394.467 li
164.067 395.164 li
164.067 394.16 li
164.163 394.064 li
165.462 392.766 li
166.562 391.666 li
166.816 391.412 li
165.418 391.412 li
164.764 392.066 li
164.067 392.764 li
164.067 391.76 li
164.163 391.666 li
164.416 391.412 li
164.067 391.412 li
145.699 391.412 li
145.699 388.879 li
159.036 388.879 li
159.75 388.879 li
160.663 387.965 li
161.762 386.865 li
163.062 385.564 li
164.163 384.465 li
165.462 383.166 li
166.402 382.227 li
165.004 382.227 li
164.764 382.467 li
163.464 383.768 li
162.364 384.867 li
161.064 386.166 li
159.964 387.268 li
159.036 388.195 li
159.036 387.193 li
159.363 386.865 li
160.663 385.564 li
161.762 384.465 li
163.062 383.166 li
164.001 382.227 li
162.605 382.227 li
162.364 382.467 li
161.064 383.768 li
159.964 384.867 li
159.036 385.795 li
159.036 384.793 li
159.363 384.465 li
160.663 383.166 li
161.601 382.227 li
160.205 382.227 li
159.964 382.467 li
159.036 383.395 li
159.036 382.393 li
159.202 382.227 li
159.036 382.227 li
145.699 382.227 li
145.699 379.691 li
159.742 379.691 li
159.742 379.287 li
160.663 378.365 li
161.762 377.266 li
163.062 375.965 li
164.163 374.865 li
165.462 373.564 li
165.989 373.039 li
164.59 373.039 li
163.464 374.166 li
162.364 375.268 li
161.064 376.566 li
159.964 377.666 li
159.742 377.889 li
159.742 376.887 li
160.663 375.965 li
161.762 374.865 li
163.062 373.564 li
163.589 373.039 li
162.191 373.039 li
161.064 374.166 li
159.964 375.268 li
159.742 375.49 li
159.742 374.486 li
160.663 373.564 li
161.189 373.039 li
159.791 373.039 li
159.742 373.09 li
159.742 373.039 li
145.699 373.039 li
145.699 370.025 li
150.708 370.025 li
150.708 369.119 li
151.062 368.766 li
152.163 367.666 li
153.462 366.365 li
154.562 365.266 li
154.631 365.197 li
154.631 366.201 li
153.864 366.967 li
152.764 368.066 li
151.464 369.367 li
150.806 370.025 li
152.203 370.025 li
153.462 368.766 li
154.562 367.666 li
154.631 367.598 li
154.631 368.6 li
153.864 369.367 li
153.207 370.025 li
154.603 370.025 li
154.631 369.998 li
154.631 370.025 li
154.631 364.193 li
154.238 364.193 li
153.864 364.566 li
152.764 365.666 li
151.464 366.967 li
150.708 367.723 li
150.708 366.721 li
151.062 366.365 li
152.163 365.266 li
153.234 364.193 li
151.837 364.193 li
151.464 364.566 li
150.708 365.322 li
150.708 364.32 li
150.834 364.193 li
150.708 364.193 li
145.699 364.193 li
145.699 362.059 li
146.661 362.059 li
145.261 358.559 li
143.861 362.059 li
144.824 362.059 li
144.824 400.455 li
144.824 400.857 li
144.824 401.33 li
195.962 401.33 li
195.962 402.291 li
199.462 400.893 li
195.962 399.492 li
cp
.945098 .203922 .321569 rgb
f
174.739 379.691 mo
176.136 379.691 li
176.163 379.666 li
177.462 378.365 li
178.562 377.266 li
178.578 377.25 li
178.578 378.252 li
177.864 378.967 li
177.139 379.691 li
178.536 379.691 li
178.562 379.666 li
178.578 379.65 li
178.578 379.691 li
178.578 373.039 li
178.578 373.453 li
177.864 374.166 li
176.764 375.268 li
175.464 376.566 li
174.364 377.666 li
173.064 378.967 li
172.339 379.691 li
173.736 379.691 li
173.762 379.666 li
175.062 378.365 li
176.163 377.266 li
177.462 375.965 li
178.562 374.865 li
178.578 374.85 li
178.578 375.854 li
177.864 376.566 li
176.764 377.666 li
175.464 378.967 li
174.739 379.691 li
cp
f
169.939 379.691 mo
171.335 379.691 li
171.363 379.666 li
172.663 378.365 li
173.762 377.266 li
175.062 375.965 li
176.163 374.865 li
177.462 373.564 li
177.989 373.039 li
176.59 373.039 li
175.464 374.166 li
174.364 375.268 li
173.064 376.566 li
171.964 377.666 li
170.664 378.967 li
169.939 379.691 li
cp
f
168.936 379.691 mo
168.962 379.666 li
170.262 378.365 li
171.363 377.266 li
172.663 375.965 li
173.762 374.865 li
175.062 373.564 li
175.589 373.039 li
174.191 373.039 li
173.064 374.166 li
171.964 375.268 li
170.664 376.566 li
169.564 377.666 li
168.264 378.967 li
167.539 379.691 li
168.936 379.691 li
cp
f
165.139 379.691 mo
166.536 379.691 li
166.562 379.666 li
167.863 378.365 li
168.962 377.266 li
170.262 375.965 li
171.363 374.865 li
172.663 373.564 li
173.189 373.039 li
171.791 373.039 li
170.664 374.166 li
169.564 375.268 li
168.264 376.566 li
167.164 377.666 li
165.864 378.967 li
165.139 379.691 li
cp
f
162.739 379.691 mo
164.136 379.691 li
164.163 379.666 li
165.462 378.365 li
166.562 377.266 li
167.863 375.965 li
168.962 374.865 li
170.262 373.564 li
170.789 373.039 li
169.39 373.039 li
168.264 374.166 li
167.164 375.268 li
165.864 376.566 li
164.764 377.666 li
163.464 378.967 li
162.739 379.691 li
cp
f
160.339 379.691 mo
161.736 379.691 li
161.762 379.666 li
163.062 378.365 li
164.163 377.266 li
165.462 375.965 li
166.562 374.865 li
167.863 373.564 li
168.389 373.039 li
166.991 373.039 li
165.864 374.166 li
164.764 375.268 li
163.464 376.566 li
162.364 377.666 li
161.064 378.967 li
160.339 379.691 li
cp
f
163.153 388.879 mo
164.55 388.879 li
165.462 387.965 li
166.562 386.865 li
167.863 385.564 li
168.962 384.465 li
169.663 383.766 li
169.663 384.768 li
169.564 384.867 li
168.264 386.166 li
167.164 387.268 li
165.864 388.566 li
165.553 388.879 li
166.95 388.879 li
167.863 387.965 li
168.962 386.865 li
169.663 386.166 li
169.663 387.168 li
169.564 387.268 li
168.264 388.566 li
167.953 388.879 li
169.35 388.879 li
169.663 388.566 li
169.663 388.879 li
169.663 382.227 li
169.663 382.227 li
169.663 382.369 li
169.564 382.467 li
168.264 383.768 li
167.164 384.867 li
165.864 386.166 li
164.764 387.268 li
163.464 388.566 li
163.153 388.879 li
cp
f
160.753 388.879 mo
162.15 388.879 li
163.062 387.965 li
164.163 386.865 li
165.462 385.564 li
166.562 384.465 li
167.863 383.166 li
168.801 382.227 li
167.405 382.227 li
167.164 382.467 li
165.864 383.768 li
164.764 384.867 li
163.464 386.166 li
162.364 387.268 li
161.064 388.566 li
160.753 388.879 li
cp
f
182.218 391.412 mo
181.564 392.066 li
180.264 393.367 li
179.164 394.467 li
177.864 395.768 li
176.764 396.867 li
175.566 398.064 li
176.964 398.064 li
177.462 397.564 li
178.562 396.465 li
179.863 395.166 li
180.962 394.064 li
182.262 392.766 li
183.363 391.666 li
183.616 391.412 li
182.218 391.412 li
cp
f
176.163 396.465 mo
177.462 395.166 li
178.562 394.064 li
179.863 392.766 li
180.962 391.666 li
181.215 391.412 li
179.819 391.412 li
179.164 392.066 li
177.864 393.367 li
176.764 394.467 li
175.464 395.768 li
174.364 396.867 li
173.166 398.064 li
174.564 398.064 li
175.062 397.564 li
176.163 396.465 li
cp
f
173.762 396.465 mo
175.062 395.166 li
176.163 394.064 li
177.462 392.766 li
178.562 391.666 li
178.816 391.412 li
177.418 391.412 li
176.764 392.066 li
175.464 393.367 li
174.364 394.467 li
173.064 395.768 li
171.964 396.867 li
170.765 398.064 li
172.164 398.064 li
172.663 397.564 li
173.762 396.465 li
cp
f
171.363 396.465 mo
172.663 395.166 li
173.762 394.064 li
175.062 392.766 li
176.163 391.666 li
176.416 391.412 li
175.019 391.412 li
174.364 392.066 li
173.064 393.367 li
171.964 394.467 li
170.664 395.768 li
169.564 396.867 li
168.366 398.064 li
169.764 398.064 li
170.262 397.564 li
171.363 396.465 li
cp
f
167.364 398.064 mo
167.863 397.564 li
168.962 396.465 li
170.262 395.166 li
171.363 394.064 li
172.663 392.766 li
173.762 391.666 li
174.015 391.412 li
172.619 391.412 li
171.964 392.066 li
170.664 393.367 li
169.564 394.467 li
168.264 395.768 li
167.164 396.867 li
165.965 398.064 li
167.364 398.064 li
cp
f
185.499 391.412 mo
184.619 391.412 li
183.964 392.066 li
182.664 393.367 li
181.564 394.467 li
180.264 395.768 li
179.164 396.867 li
177.965 398.064 li
179.364 398.064 li
179.863 397.564 li
180.962 396.465 li
182.262 395.166 li
183.363 394.064 li
184.663 392.766 li
185.499 391.93 li
185.499 392.932 li
185.064 393.367 li
183.964 394.467 li
182.664 395.768 li
181.564 396.867 li
180.366 398.064 li
181.764 398.064 li
182.262 397.564 li
183.363 396.465 li
184.663 395.166 li
185.499 394.33 li
185.499 395.332 li
185.064 395.768 li
183.964 396.867 li
182.765 398.064 li
184.164 398.064 li
184.663 397.564 li
185.499 396.729 li
185.499 397.732 li
185.166 398.064 li
185.499 398.064 li
185.499 398.064 li
185.499 391.412 li
cp
f
424.688 200.884 mo
424.688 206.384 420.188 210.884 414.688 210.884 cv
357.53 210.884 li
352.03 210.884 347.53 206.384 347.53 200.884 cv
347.53 143.727 li
347.53 138.227 352.03 133.727 357.53 133.727 cv
414.688 133.727 li
420.188 133.727 424.688 138.227 424.688 143.727 cv
424.688 200.884 li
cp
.0117647 .658824 .870588 rgb
f
377.314 154.203 mo
377.158 154.203 li
377.158 154.587 li
377.314 154.203 li
cp
1 1 1 rgb
f
368.119 163.354 mo
368.007 163.354 li
368.007 163.585 li
368.119 163.354 li
cp
f
359.092 171.578 mo
359.204 171.578 li
359.204 171.42 li
359.092 171.578 li
cp
f
396.188 181.256 mo
395.46 180.015 li
395.46 181.256 li
396.188 181.256 li
cp
f
403.83 190.408 mo
404.212 190.408 li
404.212 189.165 li
403.83 190.408 li
cp
f
377.158 198.654 mo
377.158 199.559 li
377.438 199.559 li
377.158 198.654 li
cp
f
411.415 163.354 mo
413.363 163.354 li
413.363 165.18 li
411.415 163.354 li
cp
413.363 181.256 mo
412.134 181.256 li
413.363 176.13 li
413.363 181.256 li
cp
413.363 190.408 mo
409.939 190.408 li
412.038 181.656 li
413.363 181.656 li
413.363 190.408 li
cp
413.363 199.559 mo
404.611 199.559 li
404.611 190.808 li
413.363 190.808 li
413.363 199.559 li
cp
404.212 199.559 mo
395.46 199.559 li
395.46 190.808 li
399.64 190.808 li
401.674 197.432 li
403.707 190.808 li
404.212 190.808 li
404.212 199.559 li
cp
390.568 181.256 mo
393.593 176.829 li
395.061 179.333 li
395.061 181.256 li
390.568 181.256 li
cp
395.061 190.408 mo
386.311 190.408 li
386.311 187.696 li
389.921 182.203 li
390.295 181.656 li
395.061 181.656 li
395.061 190.408 li
cp
395.061 199.559 mo
386.311 199.559 li
386.311 190.808 li
395.061 190.808 li
395.061 199.559 li
cp
380.007 190.408 mo
381.718 183.835 li
385.592 188.789 li
385.91 188.304 li
385.91 190.408 li
380.007 190.408 li
cp
385.91 199.559 mo
377.626 199.559 li
379.904 190.808 li
385.91 190.808 li
385.91 199.559 li
cp
377.158 198.654 mo
377.438 199.559 li
377.158 199.559 li
377.158 198.654 li
cp
368.007 199.559 mo
368.007 191.799 li
369.451 194.845 li
371.365 190.808 li
374.73 190.808 li
376.759 197.361 li
376.759 199.559 li
368.007 199.559 li
cp
358.855 199.559 mo
358.855 190.808 li
367.538 190.808 li
367.607 190.955 li
367.607 199.559 li
358.855 199.559 li
cp
367.607 163.354 mo
367.607 164.407 li
367.365 164.906 li
363.429 164.002 li
358.855 170.457 li
358.855 163.354 li
367.607 163.354 li
cp
358.855 154.203 mo
367.607 154.203 li
367.607 162.954 li
358.855 162.954 li
358.855 154.203 li
cp
358.855 145.052 mo
367.607 145.052 li
367.607 153.803 li
358.855 153.803 li
358.855 145.052 li
cp
368.119 163.354 mo
368.007 163.585 li
368.007 163.354 li
368.119 163.354 li
cp
368.007 154.203 mo
376.759 154.203 li
376.759 155.571 li
375.686 158.208 li
371.535 156.339 li
368.314 162.954 li
368.007 162.954 li
368.007 154.203 li
cp
368.007 145.052 mo
376.759 145.052 li
376.759 153.803 li
368.007 153.803 li
368.007 145.052 li
cp
377.314 154.203 mo
377.158 154.587 li
377.158 154.203 li
377.314 154.203 li
cp
377.158 145.052 mo
385.91 145.052 li
385.91 147.489 li
384.327 145.91 li
379.76 148.188 li
377.478 153.803 li
377.158 153.803 li
377.158 145.052 li
cp
395.061 145.052 mo
395.061 153.55 li
392.807 148.089 li
388.507 150.081 li
386.311 147.888 li
386.311 145.052 li
395.061 145.052 li
cp
404.212 154.203 mo
404.212 160.916 li
401.079 154.972 li
396.943 158.111 li
395.46 154.519 li
395.46 154.203 li
404.212 154.203 li
cp
395.46 145.052 mo
404.212 145.052 li
404.212 153.803 li
395.46 153.803 li
395.46 145.052 li
cp
358.855 181.656 mo
360.376 181.656 li
361.043 183.14 li
364.162 188.992 li
365.423 186.345 li
367.348 190.408 li
358.855 190.408 li
358.855 181.656 li
cp
360.197 181.256 mo
358.855 181.256 li
358.855 178.27 li
360.197 181.256 li
cp
373.4 186.513 mo
374.607 190.408 li
371.556 190.408 li
373.4 186.513 li
cp
404.611 187.862 mo
405.821 183.923 li
409.741 190.408 li
404.611 190.408 li
404.611 187.862 li
cp
397.277 183.113 mo
399.517 190.408 li
395.46 190.408 li
395.46 181.656 li
396.423 181.656 li
397.277 183.113 li
cp
413.363 154.203 mo
413.363 162.954 li
410.986 162.954 li
409.382 161.45 li
405.418 162.954 li
405.287 162.954 li
404.611 161.675 li
404.611 154.203 li
413.363 154.203 li
cp
404.611 145.052 mo
413.363 145.052 li
413.363 153.803 li
404.611 153.803 li
404.611 145.052 li
cp
358.455 144.652 mo
358.455 199.958 li
413.764 199.958 li
413.764 174.462 li
413.764 172.377 li
413.764 171.578 li
413.764 165.555 li
413.764 144.652 li
358.455 144.652 li
cp
.945098 .203922 .321569 rgb
f
359.201 171.423 mo
363.752 165.033 li
367.741 165.963 li
371.911 157.383 li
376.111 159.283 li
380.392 148.773 li
384.172 146.883 li
388.342 151.043 li
392.382 149.163 li
396.602 159.373 li
400.812 156.183 li
404.932 163.993 li
409.201 162.373 li
413.451 166.073 li
413.361 171.573 li
359.602 171.573 li
359.201 171.573 li
359.092 171.573 li
359.201 171.423 li
cp
1 1 1 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.2.0
%%For: (\704\750\755\740) ()
%%Title: (1406.i032.017.F.m003.c5.business chart icon.eps)
%%CreationDate: 6/22/2014 11:57 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3Q<XdP1TJhWpX1+HI0o+En<GD%r(k/IVi"*6,ubC-Y81$8^`@nGN!hW_RB0,rH/_M-J:ipF\)K#o-43'Dh.QI!a5?eQWjc
%p:hOa,I?gJ7L&n=pu=S_mlmos7_OWq`HHCNN*?14DS$h[HA-O;h<f&i$K!A9b[0B4I]6l77u^"8T1lsrWEql[goc!-W]-YM]A'FZ
%1LAWTTRBFlht3QVFF\iSgcsV3!pD&tpL+]]2iW1Z/?]S@'>sjOHp!??lFhYUd]^,aT,o+iDV&B(+%;_-qZ/b4aI)Ih(&0L^N6Wr+
%7\>[.;-<=#s$6k$=O$2V&CR=S*XlT-Igl;up+J4`!:c\('E>g6)uU0E[PE$G@H/=I'QFP>+aD(Bpt=X9b`Mo;Z9jaC%N\-b:8?6u
%85to:B&1Zlq]GbY!Z>N6M!HYn4ThSHflf81$n('R!-1F;BX4s1(l#\_&pNtl4o/e9o/s&&U+VdIY1l1@rthKO<J5u8#E>\ZVH*'e
%q`KIa9H\]L>1<Om<V'+`66b!ZV>oZpa-H']e-DO\2[1[kND*`9hd-b\ji[<'[Emodm!#2TEVh=^F<)dOQsnQ)>bEPcqB/;GbCl`C
%j9BZ`8[_O.]P$R83t^<G.&mBrao-,UU>FU+&!1q"ajp&e[pE"el<B[,r>-'/%CH-C`W,K(!qlM@e.MnOenJPgdsE=OGD&?PZtb;<
%'?/>9J*'&W>Heq_m0iooq?Qs'>mrca(':#?C.!W"$Tn@J5Hi^X_<F6q!'`[5[KiAZep7.Rs/b9rmB\542QHK*>nCg(Z[_Z`rp_,;
%6>J>tgoXPL&,<WPa]@\t#?*Yd3kJ7Dr<dE+TCBVYpqLOs_h&'HTfQT.S^u[qUYX<YQB4_>Q8tpd4)$`?BN/0#DMEV%I@'8L__2a4
%RHe(o;KWAIdfCdm,Jk<:@KM/T;lZN@rCaB';6/93]sE1u9qDC7FF!MlH.Hl_HVN1e%Zu7=S6\AE[e<pARb^9u13;5g2\[JR!rkgu
%\_Cb6k%50]S2:6D35;"#.ZHprU0HkeeuMC@-i>S%)UgU0(0-4W8L)6)P(Sb&R&=qW'(+36@/S"ql\RSks&AjF9/&#3h+G-t9j*B&
%hXc%$*,anP;"$nH?L;>0UU87mAYk#e`%5ViWaGK7*/*_[f%6h2#1HsE*kct+JQj5pr?M,^Acr&*DQisFS2pORXB3e.=1[:er3Vkp
%q7#$j_2motUi--Id#YtOXT;n6gT:nE<%mQs=uU1.L6[%k$cZ<JM#Z$*NjQ]b/#Hb1I?8_r"J)tRi^eQ#)?Z#m:VG>o*.uhB1`7'&
%JE*cV2)1FprSk,TJf92".rs&Lo5=ssrgb&9\_Y_>UN9Qu25cX9YGIlqO_.$URmK.fadZ&S3A#W9kYi$/_k(MCqjrD,mo'+]c#_`X
%@Xl`fK1)e@NM^cK[@55Hg%e;IC:0-!Fmu!OalsBYk.>@"2247MIE`\uFMc<Q]r9G?^(!?/Bs`'iIoaL].S_@o)taDp1`f@6cAETW
%3\@I"F2-G4r1-F\Fl\e,B&(>L8J@_6kG.'O7RN[>AG4>;1.U^t[i.D>a[unIh+H_.>P#RJlE,%E)5kB@*?eoQXc_$!7,8429IXXP
%W&%a5P_eu\2+t2ZIa]hrhO6WZ8&a[SZaickk)Pg?.Q;uZc<7#bb>`@F;RuC:"ldG>X*21c9]d*7R7gC*>39ksONXJ>"3XqeREI1'
%\RdD&biQ"..Ah0MEk,/f/5.\*DV^7f/g($423':>[IugD@XB_u>]+`!_d#Ffkr6EJV[,#(rE:rP]2#8#;^FFbqQ/mACCJ4.Wh7K<
%Af1b7Wsj<fHDQlK:YgE=bph/EQH"=%Asd,+TcoD2Wm/mLV->!^DnXlfkImfY@5TV*>2L^](35[!0RC[dHr[`fn^$=l]Hu]Q^,OKi
%#!(PAF=tO(Lu+eO?E$CaeOhlS@d$IKn5ElUg%>6Z\95-6<C##(TlE?jTMatAr7bqpU/i2<7[qV\_"@76g9"\rE\7,eP6FZ?em60a
%T`T;,%7BEJMN%S4+QL3m,f<;G`imX<IohSKd&skSj`Eqb[GNp&,JI.#4Dn9BTI7/-R<o`rbmMMkkrjUn<jbB>H*4X"0lIgM73$A[
%V[s%Vbt>BA\@/GX"csQ1c<SDR=)!WEeI6:q)EEbO1Id!WCHli\2T`/]iTK&F<k@u'AM`VL&^3T;`^[X;fAN"@nY_a=Dnbm*Q/:gD
%P$&-60Buk3aN9-pG1&%NRjjEU3fE)KT3i<@R`eVnj/ACA.3CJP203*TbjCu;g?hAD)b'd$Z,\`r-[bo3gtGk+[?,;"3@6POii6t,
%;QC>VLfGSC2V5SjVm:&[HoUSLAS*@oZS6a3Bp@s&VLGC>DnFc7`$bCZR(G@P6Z/2->8j\*2-r6+>$7;`5"jr/^PP<r^j4R3(WY[n
%At>dN1Kp=ArJRkJb]87fn1!!/GVMCIB$L3V^Yu[!;hW$rHFs2.9r,NP7QSLCnt3JI5IU\t'Z[Q<%hssaB;Ab@[+>t'HnXG*pmb;6
%A,]8`S>B&_KsAF-Lme/=RTt_eN5B/&eVY88;1lT@O_.[)Urf_%4%unHG^]EXS'9O>'^NG-UJd*@4">TBc9f+4Ad,b=Z!Y!PR?%-B
%;.elb1\U!RK'CT<0q:M!CPt1HXu8^CD/jsQ07F4JQ8XbOAS[HkQuDkf8f%$43mufk>fcY';WQ;bZg(I#o;bsk]WJX6PUEKVl]"BF
%@n2Lr7MFgp^L!._/lGg_N]/Id;HO0`-oq&QU0oHj6hmu3Z5ZXtSq=[[Xc?c*91,.9SJ>.i`]oaW.5VX\?bb#`Bdak]*4rQKDS)=V
%5S2YNkX].Oqs?43;gW[E[+_W=/#HJj1^=[hLr@l'L-.9>Uf]@Z1s^.rXBC\5W4/KnMT[g+8u%99_G*=W6Chh&;/+RMWRPYLGKo%M
%4Nt5T/5N"a7=nRR8LIB`&@3eHMrdNpH)f2fd]@_$lSn_eapn>`@.bie77m*dgqoUN8L'otEBO\Y(*uC_\KGN^DM6V5[5-nE/5#R^
%SOH+;bjm=-ngqr`_V6WfU<HcC1Z\VZbrgoIas,-EX1_);;:6#^-kZ-HT1)<tMg8YM2t\^ood64u8OL^rXSQ;79='FeC/W1E)HL@6
%Z<Zb:o2;.K>"W8o?JJX&62];:b]3nHlM\TTmV.g?;`Xfq'r".h?YM!=Mt5<B9m[lWGJEu1;o<pp=([bAm5fF8>M?J!/6LW6V-R<Z
%[=ti#4'd@f_mO'c2U>te67#o@[A?m8SlJu!CWg+&C"8MMmA<uCI7NLC#5d0H`f_#ept77PL"ZN3/u._c,Cd7_;QsQ>N0_X8VDGB;
%EDmk8@mhE93l@lSc71"?j)@ip2ej<h.c4$OnSQ(0&G/3e5ggk1^M_P;O*q^Pd2m5*[qa<9]f#f,S$?I/SZ'siVKr_;_jqNV2s=P9
%Bm+Ll-qtn"b=?8q4\7U)+VZ_l[9.sG:jO.0$Y;@J5Pc#8CkS!,2_?7a]("TH#6&NSreCI/KHDtak?>sn16Ch7pbHc]dEVMaiVt%J
%S^$uc<$*#cQp^f9aSESqN.7G<1%1&#g:KjrJ#@ZFbC@@jd;3]J[%!V0%oV$X_)OOLPP/gYL7fZf>=^9+U)J24mKee)$q-Oe!?hUU
%j7\^H1cR9"SQ!ms`c>A0cu>hD_`0\e1mj21WtrW8V@N7]hD\KHp&8MYlDJXp$gT$ee)Q?F_FZB>7`7/q]=dC;]]lo\s8?g3^VBP8
%^?,@_]UI[<rpOn-GIdach#C*4<\3upQi"Pt;`]C%QS<"f4lQsUASe6&,aWklF'8p>o>9(!cZcq_]A3"kXuO-cNCNf;klPSK0/!-P
%Y[59r.T6Uc\A?D+K=#FW.-4\%1$gotW`D>K+7u9o]*31e.ue6[Becrm+b_?eFO),r81V&,qOH<SH2"[N:Mu7m8km]-^EL%eO=_tn
%s7<l^7:`YSP9lC#/<_[/A8*:.jTf;Y[nOfIYg&)D'X]hB8rP[EGL\A#Rt'&ENMsVFNG=sMDP]46?[Gp?S&LRQ.B8e5"9+RkhPB,U
%bXr!eBWD!>hAl1.I3(.Up]T`<b;@1!A[H"W2.h.mV8s:/166\r;XM:;h;in0ZM6-*`J7bIW^8,arG=Iuk#^k.jZEKc+@Jq(d2QpX
%1BLMM'f"HYPUo=o/.4,S_TT7SZ7NX>$ST]?bHgWC/A+[L<*3a@Kbn'LU&)s<n1r$%kd'\uS\iS:Jr?+>c=_#%84Pf$=m-4@[;u&Q
%Y=RHU)mqWm[>EdI17G%N>3s9VdQA)FHu*7UBUJP7-IP#D1%1/tgpA_AUd%s?s*jLX^,469pCAbHZ1[geF.?`m[WIQ$+bt>eN]5oC
%VY#%Hmeu-&1Z5*JS@-Wo?XUHJ0/-[!Y05F`QEMsd8kjB=Vam)=>5OrR7r&%,4Ap:-DWRd@>AJL7Ir7T)Ktkp)i^8j9'ON=9UfjZt
%)B-Uuc57#jcMR1"HgB3G5OV$h>RfMfQI7$3g7$nH)ZMJQ!'_[`S!a]/Rq.!.2TXk`AXT5D6AB)5`nfktqG4ejlJ*/qS!C`Em52ad
%7d5q!8]4boZYm?'a@R%<bqPA[-%P)=`BR0#Qt+*.PDFTnehQ;2'C_<1N!7@<(;>e@gjhFT)B+oaN4I2T(N%DMlPRf+`k4lT=iXXq
%0c$RFJSA`2P3N%n1<I08qon6Z9!r#?]P?'ISBkg7VD:Va5803[^\BY3N39u=p$;SA\8#G'iC(?=H6^tBiu%KkLbl=c*kFA4oV,5B
%qDO.5eMKkC&H9n\01C;,E?6AtEF?:6B^UKZq)al<l,`HIU#c[.dNL4b)OfX$j"s5Eq)D.oC!4PBB&pJJ]Bs2KRmC_oUEmgFK)4jk
%_/=Uc;<!R_/8=o\dPuP^D^EZ2piE!=K76n\kBP?:)`5>`/nRs7<>7L_=mGS*PDQZb0!<I)<-u;O?HYZLR`tOR*V`5qbeb@p8jgi#
%+88\4m<%.Vrads9hMuu[;8&HIi2]'o/6fLKKH"6S2f<L^*`__7(#r5_V#$K_r%-mW"jc;Y.G?PH>@qs"Ci5Zcbm,uHCi3;,>`+&I
%RE[=i\[aDQ2t2(E%F=38]Gn+LkN3qY9-L6F3]G*:[S5kMl.e%bS'Q3%]h.Hn.Uj/?SQe$k7RD=IDV$MPPr(sERE`uF2O@21DK\3f
%e%RAq,)BPha>!Kr-fkO."o/S^_S7V+HlmG*Y/CCU.ksENDN=8`2%O6AVAS->R%&N%I,h;*WEsFR(oZ8i<9sMO)l]j0^&IaqROU28
%S!Dj,r#GUNXJ;$P/BT^tU#IZb.S;4IS*5"oO&n=X7SX>$eU$j7BAmIU[`/5PhER@+/qQ%WVmFu&fgB%!_[U4SEiHf>F]>K=$?Tb0
%F%d>KMJ/^>U9Cf!amFgeb_itG7t,c:mWkWIV%m/RI@7nM'H*mb:V/<0.K(',Dtl[I?A]P8U'CNGAU.CqSXHIa;j`ckJ*Y?FWpNN;
%3@fEsZ-M9%T&18H($jptb3:fpf7)mNa9\#Ui3J=(jtN6.7L!oS)-lJ8]aGJoUj:Nc:qlO>Vqm5.L"i@sjuAhAPJ'FH1"p.U'J4s3
%h\[%ZA"m<oOX%Sp(HNtUk',kKgrD%n.F38Cs0i5!b@:4,MC+$%^DcimN%PN,R[&2qTjc`jIZ+JD^1g,J\?9FW[o*@R=6"7/1mkWC
%,rb"7C\g*[r;4H*\)+l97]AR(Yu(G);=>T+l=3c6V/r/:K=5l^o-&m7GE-Cu0^m:A]q(U=^Ne!3Gj-11?g%F7qSkt*+>5r;33PWo
%mkOBk,EL_CMhTZ:)u,06c2+I8NII#R-9j1GopqSAH8o=.0[WQ^e#YfY.3<,(#TIYn%/ulp^Ed>N[Ie)M721Q9?nUTuBg%+"]a73W
%(-8d;[(C[Kf%PM@M455#h:*f9IfGD;=g"HPIj8Gd7G'ZqO(>?LKNBpX?^5=PjQuo-m_d=joe5eZ'A&%UDPX9a^h1]J4(*hJ#q2Y1
%htFqWNS#X^!85T08MJV@_0I3aBjFOaDA+YV.U)UtqBe4'e?sM`;7BNncER:&D\DJ>cI,7-+f^`,-:JfB#_&8Or#!>CYr*s>>1LNE
%1a=qNag-B8aP:kpHaZn[=f[s9o8Qn%VM@Me`PF(Na5'@gGFmqi$?N0;f8FD+5"N<Z?'&XV@hp!'`&-4>H<L)8Oq&LXb;C3]%-L.R
%Fa:prpDgI99f'<A8!*0$G"q"=VcAp&6R%nUT[R!0ecGD0D[`ahGWr^;\+F&,ps6"d&%;kuDn0cc#bS-bJYKen[Jssg^JJ-8E\4<K
%]n34>4b?])G9hZf7-841Wi7X3XV<B<oi?g@PW1ns*6odhZ^0D5W*cN1?,'O2dINQ/]c%iigV/Ol2mVWhNVtJ"?5p0^^lrsA0WMRn
%[AZR01.9D+m3L,lmsk8UaLm&<^&mYnN+lhr1*8^uRG&bPj!"C-s'*D?;(48nAh.%l;Ia*R<11t*K1`VF86<M;[;&Wb0pr72+\mWS
%L'2AYWf-C'T1h_Jh5UqLrGa+$)uh+I5["+$kHG'-\:*::edMZ4`GVu9@G(\[jTgM\!_]knA\)3(IftdK3gk1,AFVO!`Z3PI3<S8&
%bWXj$2_ln%HI:$q;/<pI]CD>3F(g.`49%e#!D\CJ.)).:@%T5e5Yi1JNV(Xi09,T]NO3V.7Xt]rFD\o%crccLi0_`+S#5Y*$.!p8
%&6KG?&blS.\[9p\C]-'?g07bHV6sW5lg%_i'+M2+R/t=PQ=m]3)/dpoI%-jH#d"\J_>frFr8IF2CG(V>dTHO.Z1aO(H>0II`d2@#
%(Ik0;%SbP5f"od:09,YQ=>,[,_J%HDU$::N3a<ThV6O>FlY@<=\bM/#(j^oY,lFo(bY,kO",?Ur^ak%,s-%>fO6Xtb6Q,$R$C^T/
%VJW8%=YKD1bJtV:hmM)YG2W5,LZ7'^lXG6Mg:i7[j&o=IJX_tkKUI%pCFQA7Pa3AkMpXs`>BX1-m9n-0'/BfX7b$lsN4=Krg)P](
%a<Y4]0<j[O_kKCE1ec6S1L9g$#jm!;/mVi]oRQ`-m_?ihp^_lPkFe9^]9O'+6lH%#kBL)Ph#rK\]DM+=Y*HoFG37IfdgIr,a$@-#
%o%GH1TI2N(TeFT4YqO_iIJlRlM1%^OSd?D=(DM(%#(]QZ1JP04#]a/p7+s6?UWo[XHa4XXbI+"H^`"jS5Qnrrd=3AY/k8(G.h.\g
%FM5RnAPeWD&fan]L@Tt0]hF(WGkA[peo"kss.=c>C^<(>"?u'Z]/jUpXa[P'#I`DNI3\f++n2,/e!'jZN`me-4T=7_+NpO<s/U$d
%d4"$M(u@EHGXD&jl,p\?n+?'@\$nBjGUO]p%o]Z9aP$4Fs'0eL5pe>b&1uftg=<6;lBeYe-3A=,/dOS?[q[VUl&V240'LMVe:0p:
%U``W,s-64Ho1YQs#l!b$3`ac#ISm,1O[dbT=+olYKoNjrRg$a$%u!M7X+O`nh4+T=pKLX>UK>:Q)LX$8_t9Do^K<Ebe)0$X?dInI
%/`kjb5BELT$Xh)'NI(9[QuPYa162p?8n.qAs3ti5^G&9$i0\Ro\C48t)5[.T-VZq#c38(6.@^/8*ZKN&kZL\+XJmiddKI;1#t_"m
%:l_C8XPJZ)U)]`upUg*Vl1aIV18Bik-@R)TaK?0<Ytk8@Cue=4%::+A4=dhOc-#Z3=TJ/@]b*uWN[ojE4r4UB8GG27@)(.'M#%ZR
%@6(6p>>.KJBVV%r4triPNE1B:L1]m7Vd`c@_-CZnFOSn1o]scuIo@+R2!hcGDrl/!ra2*ohRoF:S+@uMl#-C"1$Ibgi"4>i0cb[K
%.%I$6;=c?=m1p$6h)8Hq<+M#r=V+auh=a8rlLjFlVkZ&&58Q/F``1:VD,=rrqs!*7M*!Y9f[MV8Ip4XaHgJ;1&pG2"$T_?&l^e&3
%(\;<0rCX3?+8<57FX@e$oOMjkpg.:,or)<>9j2Enb]G>*W13&%RtHHAg/Tj9;(CE$=hE+aAZD2c[5<P#^5(7<FR_FeR>Ysr#6"L%
%9Ye%U.i@#F`laf#_PZ=EiKS/KMVOKUO6=*_4!)r%k:dWPT>OW=2$_U:"'_LWc.G@Zolm6VUtB6.iL"6>!$"GWrB&.A8,r9=410CL
%E`UeNX,Jq,N@:f8%fBAZPE1&fXZgE1%\m@B1#PPDUrLaeE`X)YrLf?'2)(P8JP+;9rJ\2ZA?(Lid^g7f/i/9J?9d^q_kE(-S(L33
%ao7sj)>'ga1*i2Uk?"gn/d@T!.!*c'$p)7b%!t\&';K_#[G%k=2_2SB@;bg#m?-K2?EC'R6'J<kl<+U=3!a'N<N@^\S&l-9D+WeZ
%+@0Op-(2;Y[B!AG@*1pI/I<>J>6dVtq@RCV6p$Ec8oWSRkW7XZ+.kFEB9gJFe/:)h0j\X4&$_e*[uUKYVb2mH]<88bk%N-+?t>Ip
%__RYY^S>\E>?>8!88];hs$orHH)2#Q#HgPPh-uFo:(A!aDRj&T1f-bRfK.#,DGK-:@TAe%f#m8r-!o\V97o]$W7p")M]@=U"V1^W
%LBI=R'@AhmB40puM.8XIp6BckJ;ieML9&MNbFHb`=)%?n),S(?07hH(L'W[cW4/KpO,f1m'"UfSmXm5376N,kA9Rt>[(H:\EB@)Y
%3Z9"X;$r;/#8)"3e;Y420Ym=.hmZ9j0!VnKa*ZoA^/DX2ol&A9H6P:)2aVrAM__n=1]Y(Xeo&EANU8fKe?AL7?#=Ti2UXl[<q&&g
%@B,\DR2\`)Lc.eg@eXt6%eW8g!:_=NV4ZGA<0O/U,J@gAs.,0m;K(+>s7D$Pf21`e=0tjqB([2Ro9Ae7BQ/.ODU^oX22<qTaDS'4
%(dJl/DXUtllEr_2'8<S6.1MDLNoOpm;jX9%h`1!9jIV6$HLJ2,M*'p#NAANcdc$Ck/6js5e]]"iZI6+c`"^Z5`gYR)R(66J7nh=@
%<\sKjRX%-KbSSO,a2hXjlR1o939;(<-LM"1eL`"O)`Gem_OfQH0>im_'jS)=2+@dK)qmO1E1Dq_D<QucE%M#&QZ[;pJHcs,W@%H)
%'""=f*U]@M\:P."!GBn(8Y^dbWDk$)J7,,_,;moYGi"1RZJFfh2TDONFLF6=$XukO7GJ(LH^Yjo-@2k.m4nf(_Bh%%FZGSISS"f"
%]b!%>a[1fm3A-o]<r-lcds9@Yj9,**SR[pf>:IoRT%%eCbs^pW+8$mJ8'j"/lgtH\%//)jFtFUEG:6?B<28'HJsIiUIn,JqZ,M=+
%N^sc:,2Ab*1fc>_X1%P+e%_!;?3%C-M6EY[=Hb?`1[BNX0FK$<j:N.'^+&6^,Q6'/O=;0[<&+>q_6le5?MN`"q^`,#<^XiDj06,1
%ZYhG5rkq]7+iuFDaOe%c<Xq4d@9hf/"fB)ioVV?=!L:5kcVr2:=7siVE;iI25:R<(jbalAZea2X4/6@J5K`2rHG<TK]c,#9=^Il`
%G:o=cfe^h^gZRa&[MQ.,M)"eM9)#>EJtGGT]_auJJu(rIW8N-k6;3Ob:hq7aK3l\k(ol2+A8A8"'$(d[6$/-bQ.mYDG%s`Rpl/>N
%=`eCWHY(5O'kWV"+XuT!P8Fa"HsDfTL2PR7'Hs.7a-m(MbQd)=@u#_25AN7=0I_Lm2BYL*fOIEaW;X0'QahL+23ZQb@X#5*"BIL2
%`XG#-R4Fq?O>tiIBAYMa/pP"r(hLVYX]U023_"7ZJ)dddLRd21cJ&1hN75?W`Z*;,6DJSh'J!CGHM*2^mO>80`pJ_WI[Sh9@Hr2h
%'+l`XAu;G/iOD!>8T&XV:$%MXTiBbu&:5MbKTkUb<9]4bk`XO#jDHOW_&NRfQ%\_k0]kC*mE9\I^T+N)Ldk1f:GLR>i/?r4%HL(>
%fXY^T7ADMbakim=r]Pt`?FA7\I\1#L(fIclS#FM\e?:eDlD,Y(K"r:i:'u/``(:)na,4&&FI[$/&ZmGLKoT)>6=\#>>8S#m60%k8
%^03j+b8oo'_;8ZbE6&ehnA3S8Wnhi2)@cs?FU1sDiH;PTR8_/FYkkHLm7e4$4I"4j9FC.#:=h=5h:&0UJ[Ci@^fE6_JZR0CBcWbR
%qUo%^MY1IMSaLd82:;%>?>jd0f;+r_XWEQCbA!,9cKZ7P:(hk+gPRU5I<C3P$l3G8FOjp,%O!%+T%9._)J58?>X;c'SHHgeAHfB#
%BG.cc/*^W!eUmTGIO+VGK]XZ8rdR#_G[@9@XG5*5,EY.Vlm8?3,UEI_Ltk..3t"Wc<JYJ/@L=SE]ZHr.4pc(i`/K'VB"M!4A8qmM
%2bEq#;&dTXA)bf!:r=^o#c+*+'HVnRc3LK:,\:CT4E'[_:/M>,dV?mpcO"8`o7q'ZO.o[$LX5OZh49.1L7YklA^,5J=VIMi4m#BE
%,68,B/@C[$Ace\@;JglT(j7@PG5j<951)&0]H5t[r!2sQV=BQ.hDrtMcbB'X3*2B$%dO'`NJ"0V*_B%&"Y*T"IBfn$cgf"uh'")e
%m:Mr4.lE8(1R2"#Do5B+G\=/$\Fg*_;_'n)0[_F7QC6Dd34f)sXBCG.Y.`/"l3CBoD,p,Ke6>o!ia6+dZU=su-67>eDpRF_546VV
%iW_oVZ;H[i6!E4.[DQ*lD$5'Tn&QQ0h7nrC*@p`]=6^'HSMtfcQBg\)0iq`miU.5C$IbLZ6)gaE(1L'L([Ek'^DQN`L;i]&E/Ys:
%A/XhjTtDjj[mSm(WO-2po-6]6HL%TYl[uB?B7>QNfkk#+n-oZZdRZ8*+#l5p<>*X!,YV_0j)1VHTR[u+nKTp!jELbSI8DJcm^69d
%l=IH\N/I"P>3oG[W;T<U^qpT6fc`Hrdd$EK_Dq<V]2>2f.uFXhUJr/"Gb,7U.o\Rr<)l)M(h$^F-Cu%kMOB913YPb_S2?VKh9!d%
%5X"PdRsQ"IVr6Z6+0;b/].n`BAZ[GKgol@?U,Y5[\e^cQV:1ie8J@a[PIsNU-4+tmaO)8<7Td>].9$kg-'7dkFS<-ar?ElUnKmBt
%VUCGZ&49uQkqpj&qapfm7]f@Fm0Zlt):Z5&/2H3X$l(a#l/@]6>5J^j?*PZ9H=c=X6_B+sZ$*C4^UFH9%ObSZh9&,ZMeO*2dgLO)
%XkmOS17H(`ARJp!5muo&o\8"q29OFjMcMTm$>]AV&#Fi9BHIr7l1G829:YKhX%:2oeJT<oNsBtfJ6BA-eV*5$bb0*4moX/A(_iYY
%cuZU!mnBch`C+r1--9/5`,\-L8lA2"*0It(VGAG?(Q9_?a\3SdF;M"-N@EBd0CY/R28QM9PdPpBDbXAP;pL8'XuC4)@h?+mSft'9
%TSm=T%+->8+:e@A8;oRVmi2e^?qlq0]g"nB:15-!O928X=>u$rR)GGO1d4lE07f/d(&Oob^!a!ZPF,eEc;DtY>LC!f[Oc<0@<oM.
%\jO!Z862S#PC(\.cI:SH<#mBcRYrepM%#1J2f2f]E`;j=MfH31k-oeGQYGFO7%W6P`B!TPG%\h#`l&r*bSnkE-WLj=7S5*2W*Hab
%5-+>!Q1'k-ak($cML?fb3b6#q-qtr=Oao1"8gPR^SRaeV0Q`+_`-+g1DI^*5HHaW0gJXXXOf)Ni6_]uJ&f<N0kq3!1FuIFF+^[#S
%fS!Xi$8ojkgHjl[4f/A&g;T@7;FIploV:Hi61_0XWAf,PD!$iCVgIZb#K8&;'C<(-`Xp0^f8YqQa'ZmbrbC.!#;(O[BXEr^]L>/F
%fQr+-(OfuqV]ZXJOj<+T,*gCn'm=d'[g;57NLiMNlTF"<pMk?AjRN2nb.G%tp:^Ftr-%g;o5`lcFmDK\f%S:F6G8QLh=9>ahskT&
%Cqk8hAC#P4;?#n\hKF*>oh.Bt??"M<SD/eG.t0'VX;Q5j2a:psDJuY"HJ?-"efu#DHaA+#/$N@Po,#_[QaaGokbq=-r1mN?B(')c
%N)d$oLB7?_l0a<+iE<qjoi'`CYeHE=[`cA>mSX")ondm>:b"MM:@_a2pJ51aijnU=/?uZGIX(:qIJr]>gi4M7G5S:"hSuJ\XfKmJ
%m>YG\\QW7M4".3nX.@-^`37T*0Up&Q:FCV*Z/'Z6ELsr3(G>XsArIsAmM2d7q:kVoe,(Mo,FESVnG2'b)udGCXghTi]p2q8^>?sP
%Xl"$$8\D+R"u&aGF_.tl;fuHN'J>s*c)oc,qqc)ee_6A?mDAf\V*["`puLh#gR"D[C?5g&Witi\QS7%=VX^VEGO'IeCt(\aW9"tB
%TAErDY5U<"Q&k?]6NS<FDn``g@2NqSmAK>VX*VOkqKQrMOl-*&ES^@2p!2r0\%6@X?>Z(8bA-Q9mk&M(^E<8![SbeX(EQRAaQD@>
%Q1_O5hs_/FN/%)g]A&%qXkP3bCS?Y>eeWHoHFKOAL%a][Xgb^!)qN^0:Xnisem0E_M>-KtMWLUWik94QX.JCU*dI!U6/U89LAC*-
%?L^m(lX&i,lA$u%j5CN@W>@mP@>qNWG9-P#lBBX3s(gq2k9\#!XR1CD]ijg+?-qMR`p/a84)7mel,@/hdE1FNc.^cNT1PJl`mEUl
%hA*p.<rRfC_C%2EF62p8@RUdCgfsU6.BsiCmSh1'i-h`iNf.7GMs$.-IbUi$mbc-5B5_+3#C#(=amBo8#K?;0qR>j1T/J<0R(W%i
%plmN*K3.rSF)%klbrbB7qk`<(PLDksX7p<!]Qs7G<&fA@!Y:oNnbp@/>7DDhI;?R@m?\p///98V?8CpS?F(r..a[Wp?`uYA>PZ90
%HK#*nmEO\jT=NturP9n%6d4(?+b]BgHV8I'"=n0#J5<lHI&Pl7YeFp:/K1J#[VaHFXY3nT,3[+c[FKXdr&cO63-06$$=PX]H$\-_
%&>,%&SQ.>ccZ5p:9[]E4e^!<Dd`VC/CsLZora7n!o6H8=,gI!?E#;'@Q$]&,KhLn(C1jrE/Lc+%Fn!+>`o^s4L5NPOX/gLVLqEVY
%E,iG;o/E^g%WhUSlXX*-#L=?-A"EYqChJ1`/5-[LGSRnC^bE=Z^"OqQRjVW!?[dKi1g`T"n=I>fcXHA1=GHLmfc*q`r^#eb6"@6#
%F?`m.:S*!Na)Dc-5ZdWkZr;)F]XPWTQ>B@JI/\;K7P-h#dWq5[g93C*NRlj-meHA/*U)PFWpHCbZdsS:Q0tdO+*35#QhR3,VgE]-
%[=$(jkC_dirT>6G[sc@lim-;&c\4fC&RKoI[S,?kO5HYEs&(t#/l-M+mT+[S]R.3,j,]2XCL_dNXIJbg3/g1;^G*+e="BhfC$V1t
%U7(igLCYmr>JR^]VV<rQ#!4>r^RZe!1\<1IoLe#UJ-e\8,7),Pe]lq,3S<fcD)ZAC)BX#j?X=HAY@6kBp=Ah%(/V`X"aa([QT%,;
%:3/pX@n6JiaCs$&dbO7k2srD_kmR13qlQdnKpM2BXP>^?oKR4403=T(n6`T9n^=N#fO$;g57ZYUG>A3>g"'To7@m]@0KNs&[sY`,
%;%P=o_I!hj"4i8e(F-/E=Ds`Ci&s5V^V1I$$:jOR@H7P'9CI[kBblL$d&&I#]XXsVq/k8ZE-B_=9S/"-PZ!i-XU"YH#33B/>r2sJ
%+6J`Vo^Jg@/^>C#O&>N=WRgu9It%j1hE6MlqO#aB8`R"%hA2(*HEAoQZ1Ps4=/)&-3Q55C-8)E2q-I,>6]t9`=LXk.I_euDrl6C<
%<ABLf4S;LI1o*;po]RR?;3OI#6j*<ZFNK#lr=a=+A2?\<-KrI)>@j?XV(\VAU*"'9,^qIgM&Cmi)V'Y6aB)7NNG?a+`O''jTb/AC
%p(<pW[TXQb+.pJ@`W"Mgn"-b+UI5k6/RolGamaj!8P=fA9PfIL5Z^r(lRS;2,$^Jj;jE*Irf.SgBpt:#C;e]`7H'#dOi5*CAk\sW
%NMA`-p;LB,&e`&p^&M.r-@D1BIf$ENg:eXL6QU2al2DpO[D7,qPY5BWhJ\Wr4j9X)1SV485XYV<G9EJ+?>Z=iIWJAbIm2]FWEt"b
%a*a?lA%;Jin`c&TMl`LH\qA[>4QE-7(,+5\4Cp8+_<urjPgbQPA&dp'\+`t@_WB_F6h09]Dg@nLr+VBWC_c]RO$7d60Xtt92pM+O
%X-?e(]J:D'>O,WgmGVCorV>@r,cYcE44Ub!7sT$t>1ZYF1OjRFN#qCL=!8@`:bN$HiXLsorX/A,lqWTm+Fh?53,Fi5k:CEgl/8*7
%c.:X1p(%,FiP[F#Jlpn.n2&0ZMTgbUW1Qai;IhC(*0c>lNl83@3gLq=^/>hBd)^C&F#gnDHc<n"G;&M$i@7m-Y&7M(62@t1\=W_#
%I$s`s_[$dunuoMe50UdUql*AbZLQqBkpN]-:K9s_T6N#q`SI_H7<&eN%qH^t6*Bn9J(l@nkP!fG"LX"rb&gV-A6dEr=Sfu-*m/Wp
%/DoqL5#Q7u_l338FK3`;n_)IK#hI\p/M)BNiNKZgZd,1U@CWo5]ScGf*g=KXh<2f?=mi5n]aE";^7!NhVu,'=Rp.%3B9+-(^oo8$
%8o_ZCE-8d3q:D_XR.9F?:k;DF+?59[+Fgf.$AlpA\K_p5#3HAeo2jN'>NuHmo>X8%fe?6%04L?VQS34Cr0<P\pnc</*o8O:Zj+$&
%Xh/!t@/@9SkL%>cYEiPV?QX)+=:a7I?h(**hVZSkIWb8u;f_EGa]Ft<\UDfnY6JVE7_+_"4R;B)h4^O]nf/SH<t>bX8Bi]&GIs2[
%S;k4GV_l8fnT=@1-@c9[4=oi6SaUdnch#F)DjY<YHFI@(q"QicDSBAB59)cBZLo3\eooWQ]77P>?@)BSblQ:9!X[4WXTe.XYZ*Z3
%E9e-N[C<Wj5.@sr?E`5?\6M1sK/X4RP.GG;HDK'\I(f<LqsY!FZr+NI[I]'Fb*<t4/_r1j]\GYjM,^gL[ZYK-VjtDY[@,r.L2=,C
%?E!V`*gIhu5=/2Oo;s^rAVt5Qf'hp/i69.q[`rH=QOQ:70S<T5cjDm[J'cNTHuIT'/0DWS<@cXhiL3TZPs6F_IqfZ*cYkW&[,/Oi
%,g-N!XP.jgf\M@tgl".mSf^);2mS2cFF)H2=9O@eA%m7&I+gUZI.njZs5MW'\,>D(l,#'Lp43\Hmb@tXKY-H#/p>M]IAk12)m\?C
%.E1I&]R582P^g!j3K!]TL?`^1442@:rNfFY=>nS#S3PZ*Xr;fOS<`S$R)5&;`<Ud<qtBa7dl7#Y]?U2m]_hD.2Y[(,_+!e]GdW4j
%k3fQOIf@KkFnG`h3LIjJMRstR%l",G,S[K5>=V96&!$,73@^TV^A#?d%P5d^Jidbe(Fp"s.-+6+JAR5&]2tXCiLcV&GE+9h7WlMK
%*qjbX++!+]^I*9h:@k*ehqmVljj7QMo>N;b?S5bbR!4Utl`o@8h_K@>525(F8=)tlh7^#Tk8X*kYP00j>K`:hn"2g<+teW5Y/2l^
%T@tCeRY:A-U&V.(\NbbQ)1?sQ7<Q)!<u7A!S[J.r'?m7fk)S6FVe=9R_u#8a<>q>=?+Shohm.IJ_OII[]4Zh!Kssj5'SPq'FDlS\
%OS[]T8:(0&(,k`dN%ArC"@#aPq^2\jaML8ll$8=_hk"a$)eE(SaBXh!Dr3%9++7i>l@7Z16,/uh>jKLL4%YQ*2Q2!"m:n$(4+Cf'
%p,@/$DK"Z!H<AJU[^EEs>n70RTso+BVqS32H2-LKcA/?JDht7KfC&TIL]ouWca>G#+!T1n.O1]:qWD4#qCo%L]:,`^H0j3U=qY0'
%G)gWmGY%AcC%;+D&"PP`)LT9FDjLgA:D]kEp;Q"^4-.YB>kmM4Q].)SpiZK$nSY21<U=MM!P<aVcg?^Uk[HX;FAJm#R4ujFp#%"8
%$ZtXk1+fUZrepNVorPFM>^bTrH]J*fgP=&J;Hbt\c(,oApg8Z6I(d#fpAB0.FoK=+0dpWEC[9^oYJ+=WOZWKmZ1hn1<T%(?Enu2f
%=h#3/Dh:34M;WjCd:MtGMdUbikT"l^5:A_qh!5^,c:U0&&+85$!uh"7>J@ZJ`#VjHf7/B6]D=bne>BbX7aJUQ1#2;oiq[R1nj2<K
%W@c*FhPW$QmZqb(h!X%ugb58.]@d>#%De*34M]48GGW1P;d1guOl'Qbi+)SKKjLT;n%R?^bItJ<5'q</K"*&t=QR!fp-VXL]3/=j
%Xdri$qA3=nGK"7]1F<`e<L"fOD'Jl9b(ILsDOs+to^$@2hosi:NBb,1hKmV\XY39Y*Pl*j7iEV3hV&5'aW"k?kH;RIN@)P:(l#8.
%Wh2r8EMAZnZW(i0<8A;u]q0Y6^p!Vqs(JS=Ed3(qCZiuE`XDt)Ii442@g.H6j'lM:eHXoWI.(+9,ob<^/t6hg5h>=^4tPmW<mIq@
%Q<o2YI5,oFn%3IWqg%@o5[J59T]\%HHM2g"6/.GEjB-j.ikl.`6/[J]jW"3m*Qg56L8]kh'E5lMRZ>:Fp%,;gUfFTulofi+j;X*(
%Q_?NKdko=7TC&-d>PIgcSp0G(+**?5KR4WHEO3^,*Oa/iinFC@RL#Rh#'/EPIm_-/gSt2:I=b/U<k#FL*'PI)5e]BG/5nUCH/?2X
%&$l)9SdLSmU4PP4h`FsR3"@_fd+CJ6=l$j-$9\7!4pg]"*j!DKG@9W42JHhA7ZMr'^""Moci`q!hN#T/5[;Li$EnWi0B?MATCb=#
%b#"hs7&h<3]RK>k1RM7)lF/^\GcWF"8uIY=*Z.SSZ0f<<fZ=<CH@=R>?SAOo=FXO/h_]\LdDijH:jr+(+8X*g-A@dsTq>A\\EP!o
%K!WaVjrqhDIX#.D%RFLWfK:6Dh-i\+ITUun[?,aZUcDQ=ph#7N&<%]r9%t/Tlpl]gg2o4G-o32F@$\#%3cngsOKu9\4'LACfj$XU
%`J,NVh5Ln`4O"&qffq2joS/S=r)5,g4'/hYp\)k0[t4Rdn@W`9Z1]QB@"3'4]s^-A?bY=l;sl^X2o@VW<4TKE^%pn%7&9hJ<Pr#;
%<X#8ui<nB0GpdggE)0pi\ajXMpYal"`Kr5od/Meq:6K`7LB%fJprB:b(7+?JDAO?103mtlXgPuPFmmG]LHCSE4oA@7.TO#W8m<Ud
%PV>ngVY,2ZEH#jhn[AI1OU`VO9Kj3hUKW!P6hS`qcg.ST\l#M.O#O/__h3>Hh)p/[m_cXPaJPS2ofn3%lLW]%o]=Q[&l3K%VrVR*
%[<Cnu0Q_jboM&10On2*/-Qr@H/%O6a78MXJ=I5Y^-@&&Igd\C&[h./?*WQ`.hZX\fHD#`KRWaiUIcDM#p4ZT&?ct]^o-@B!6r&4l
%!M@msH9#L$<C\R8'#4#3[uQ@Wl]8&MC[YWmF2?Q_p33^#eBk4\ERHi7$N]eED[0aQHo8D5ni?-M?G&d'=Ksm"rY'ZJoPq3Xdf,+Q
%m\?>VG=t#+]>!n4h;oT[4mVPMn@s3dp-4#f`hm#;CM`11#Q;p@:=X^Lk4]oZW;E^Qf;k.?&!sP.6S,HC\dqtmkJPUAqqr[eSCm.r
%$Ih;D?0%$(]nbIRQ^+J0+bO*Pltae'%k)dMp__W-fuDS&ihuYMgR>^qN[Xi2+4M:^L]+f'\QrDmmPYD"6XbLR^&I>@C#rni5hR-)
%=DM\'LfMebBd;o1UUiO"a#gFZPHgfG?nh,`7[7jg9_f5tq1US<gSi*W1E/E@043=OXf&W<8mbU_=h#mZ._`E8DQ!l!c;-ZCmd<;(
%oJYR>3<O#j&s"&!iOI]g@:4X'j1bgQ_I%V[hqP[>.FkCD2`tC%finnoorYC5=uu*=<1c:.Y27t"g^2m)I(U,!S7!ZQF*ip)rTr_&
%nR]+hZi#;KrfD?G/:93&ZVQo>HC5tjD9aauq=2X^3gt6ME^a8<@>FLEm>3a=)np!bG;84\d)t7nhOr9"G8a=rk_1U.W,_TY>E8\F
%BN4'3rQU"bD;*%MLVAUm(Vcu/(\[jT^<B:6Rb=U^:&^u1r,4gDQr]<B07%89KU0s`ps0:Uj)^dQ(*-&$W@**[kKRm!Z]S\KVh!#;
%@%7;p)g0UgnL\'*_V9AIhq":l12j6[$kZW]MI4Q(caU[dkE#WOOMY78kZdRH2@MbF*r!_tliZh"#qO8ehsnD_IDW(BM"Fc:NDjFR
%b!3g_kC<Embocrl1Fitkn*nuiWSRgDJ3_&fq&cme%@d>S<Z%>?-Le+eDIq&-%bZ(/qYreLh/qB[Z\AS/oe=2M[g+m""Z-ZMlQHu3
%ZRuK&7,(O?*)ums5F-(sK-9eCBEOofQaPjMb>F(C&-WEK%OKIFEI+]N!OU[aK0V;Gc-b$7"9a$LPI=J0MDtW9*"`'!LnjW$_S&Ej
%.O=Re#@F+HGeuS"chQ/V%s&X.-h(:E?^'5hP!4HS8G`p<4GfPeCTJDa>RYL7E*3<-=GEniRUe2c"A:I;o3pV+_6mdZ[A3)E_<m$f
%>dbWiK'Cojb7&f&5_bKq)%a:ZM\=XL#..c86FUN20#.bI*X?e=XC7SV!tntb+eY#V6IuGb2A&2)l\1onKScE6LAM\#f]Wsh.2iD:
%Y&=bHPR)B:pj`PN%WdK[9[/Y<gf`TcONgfCAf]J,H@^%Y$Tqt$#5#2e(ciNB[D3"([dM!DQK\LibITZt!2'pT\U]o=*QnWr$j+*i
%$/kta6O<l.D''_>Y,n^A\rJZk#>dKB/VtdO/peM6YY%T7.+Qej'RreHfp"J,P'=EB>[%5K!c6j;N*nXa5j*ZJ_6cqWcY38ZU)u+Y
%V)8?53M*Eafu"i`$)?1k;j.(^_kRArf*p^TcHQ_JYX5QJ^gu)LE4-fq+N&7f,/H5*O<CF``W9g,)UNVTO3k[kZCV+:PQ2l0C\]eq
%,B2F3!?:lCYaB0NG/+k)^hhJD!/Q,X[K+0t(soMrVFuAO14UIX)RUP]A^\!&M8ul/.KP0H2X:VWO2W4O"98V^cn]Gr$-W(],Wrtb
%)$pesVOYRq[U9^#&(16*'V3#G)2!Ls^pf_F/Xres_Z2lH"b]u$;h!XuN(HdqnmV;KRpThiCdm!TbQN$=Mq0RD5u+9l&g`8OQi[P%
%O2JBG#atCr/u-[8D5L+Cak+5l$%YB\2JIum!m*!(JIrAH$V9qX.GHg\"LEV89rFEu#eCGWJ>Qg<^/#<t!mO5kj#CjW`s5NXT:eBL
%S+R5.;(U1<">FpL"uP!go9dWgLuJ3-VGeJMFilL2V_fs/F,VTd[olLXl#N9oCh=h;*aOlkhu.LbOH*]sXJ`k"0Z3Vj``6.sc1\j'
%^NCLk-6?_mE[3hji.BKapOEj,6QTD5Jf95$bJ;W6ToH)3KtqL!amr/n)rO?pnd5<hHoo^%]DtJZ4fp4<i?M5f$$:D'VRj(>2E2"k
%6k7%fC17fM:0r$"6K>7j,r@!=F$[)Bk2Z^RL(iK$#:A)SX$\]j-m6ah`YBtMZ:.Q04Bl;:Yf[!#;eX7tGY\Z%`:`o<<*/&"LnW*V
%k#$M2d\uaY/?Ah6;Nh4#O@D"@`o=a!ZqTCi?k,I:obu2R'nm[=(t8QhYZO8^//Cq31^oGr(bdBm%&U/b0.<D[TP<@?7N-,]["&pr
%.i&.+gLE;+L88A\$!g?)QU@dS+`q>8d7f0,2W.4A+9iq7!PMuA""_W(PAk=u1WR9:_*e6716XE/88][RfaU<W0$l(fog7\)U(&]W
%,YZbi(an=+_2*+c2_^#s"L]K[4M_Tdo[q<jI:dSK"*h_/XOmhN1MApK@e^FkKg?s!$X-e`I&9%@#6Vd96DdO2IM`>6DBK&dS_<5q
%@N5r\!XAG63Q*D?'c01sJL-gb0Tm#O6\\8>6IHt(KM:!*j7qgp&7U2@+c$g,_9`nhOUW.h>8GEQ>ljS'LWRGEM\[!-DndM">_Am=
%'SgXuE_Or@UUd8>-j(!sN3$Y)6_SS=FiE.GJ2Bh!'t.n&0hERk`)7++AkJG)0HehTSO]>K6P/'[?Gimqh[@Ms#@K1eLPM<2BV@>P
%jM"lTC&rq;gW'R&e<H[d!?q1FbKiO?.+*VX%C<0ZV'(.RCaaj`+<hfQPn0"LNQ+ML-m1W;B+n3W@e-P"@2aW(L4XIJ"XAUFqd<1%
%)(6WPJ2%GA?jEP=dC:<M3-Et`@0>g&aQ$Q_&HtSlh8*&pU&dW:\rr-u^(4"5FJU<K9OfVRJRFa0IHVE:#Zi+FQ2h"OiXrRlR/pb#
%7M(@=oLg=F'T@$d'=+c-LPM<A-3EK6RX0U!"Q5A-:]uG?c=9D7-U'd7X@#nd*RA7]fChn\hopVl6[Rou3l)e6AWlaS-]FgO`F5e6
%+qG7EL?PKH!q)K$%2t[KN,T\q/a!nDl\5/'TPQCOf3,)iDb.7&,X$7G>fH%04U6g&#e6`K$kf9d7YjQfq&q8l`&IocBP31TfO2+#
%A8pEg/dIAD94$d1fJt0eqI9<V;2/a,_iQA\QI/Nc>UH5]$^k%`-AQhsOIF:$mMH`c]7::'kJu5/e:o0P)<Qk8([+WP\O.-,".GVQ
%+N/IX8HVEb2Pnk,">@\Zn:cG^`9.sVg>Xgj!$MB.'=XN_!A1a)5s\1d]D-(C+.\j(]H"eH"btuh3Z=rm_&'9m:c^nQ&]:k->:ShL
%MTHJIMIR1=dSNX1_E\,2LZoc0BT5Xp)S8jY-@;,UHj)q#pe6);hr54[G](F.'G.Qo(u*t),>ofjW3SC@'MQFqZ7#Q!5k2qs"b^M/
%:7q\hEh^..&8aZ5;pu@BWMpD,=;BB%+*&YKLr48#n$H>+oPm<f=9'L/JdIPqKB6t/4;7qA-Qt:B$4%fI:Shp]'kiMXoaNc&LJY"%
%Tc=i''H5V$bZRqI$DNNYJ7;uf.l$i3)B$`6-#bg(i^ZC]EX!\<O160AOa([H#gGU>^_1faQJ"kQNoa]b+Zo6gQFNmP"GC#'8.f%j
%BP?!(,.`pKI7+8"o9)7nR1GK/W5^k1$e8g"-#hlu";i\I#5JG2#/JSE?u_Nb5tHpuM<kHITn+LM0phr;1JIIi*=9E9l0/(:Lc1]P
%aXQb/e>.jJX,_!E=WUT(E(OP"dpj7E7aDX0-m38i_cAXj!D]9iZt6Cj=Fm9JK^:/'J39Td`rOTti[qV0"VSc-JJ[WB6M04^:eXK)
%,j.<aSd:e))bO5<Q>)#h:`:*qA-#((gR3(*qKGL/,t+g-.Nl;mQ_ErP^rp4'W/\kAgeq%STWg!8Q;gWmU(8Z'EaGIf3V?ef\c+t3
%j#S^t%@kcY79Bu`,`IVbJ]%%)c\hg3(5D"pN=#jm/*%81kQjO1(.kgJfY;_"JEj137"V*nOUupl#o#0.rQ$u0&LQ%XioZh;)lXDS
%>&K,0"ulVA!]h1E_#4LoF\G?#Ct_JD0#rSDKr'XBJ`E1*B*obDJe/f8b78E:69>m?#/skDKOX286TADNE&\!0QX'kLZ*GL'\Fg=)
%1Cgc+)Xh$!%+UgMg:1/K5ZHLbJ[hJ55hWp>E&:eXE!Z(_-S0hqS"r[Y(%H;E%HOPg&pTbMQ_)F\)#Tgr^3c<ik.@NUb\5e%:LLR?
%^*^2TSgL`^^d$-66sa24.ij\Cq"e_DXU5ISm%KtkLk)^E$+#6%`<Vj$)A(='87L5c%V-3T@u"QEZ?\I0ca(^'0p?W3^4G>[&&XLo
%5R:h__j/$C%`D'UT)hs`7%i*N#/p'JL#"Z,"'A96l9MSC2T@b-N&KQ2%i!:38U[nL@`XeD1j'oV%PVp^ooKFnc%dYhJ4Q"9=V0.%
%FLlEI$VTfjM(,)eQYN)tN7/Mo$b@$K,=.<S#h2B^m?<Mu-SDWT+F@e]!O&ScWCX*p"k7ipbnGY3oAQr:bN18h0M!6eh,PCX$-([/
%O2GDh6VQIV`43ib24,@QCRYIULP[n_IFj=:KDX[E/(U^1&qQeQn<=&0[]6^>1eh&m$E/r\RO8.aN.ifr%]phuK%NC/Kh:utoZ%cO
%bn%g-;M$GJ`/m@T;M3*R>2(<i/u9CekdLV.>,qj""DXr!g?7s-RZ1-/D<7g9'7lT4)!uBh/Bt%BTOt0'[u!ApI#mt]ChL/\1n1Y0
%'i5iB2,=>bq%%$beQA83<QGNGFfUrY!omc>qk9"G%#p"CJ6KF^Gp74o=Bsk1+mUS1)mclG5YYZVqda1;Z5qlN$=+0Z4@A-)nST(<
%lTmC("NL*g"rG!G!OW**`_$AKMf,oJiN\WhcsY99BHnh>Uj3gADe'\rC_]c&TrQR0TOq7qqikS>=!u"Fq*]e8JD+,*Gp4q+<ih)'
%o)73CNo=V6htLVD,Q_QKiE6KFq2ic5A&Xt55aFZ`/D3,t3&F[[]8<e%IS_.[T\ceeSd6;S9:8=f/7hL4A-pbtQ-BtnPK"g*2MYP0
%&8o]^NWM)o)"!NHV#l-@%onRlFfU$r&#sn!0Wp0c3"I]"Qs>O&n4>=EZq's3)+Jn#"k65(l80*ORB+_!LW@goY*NKF40%C:8O1P1
%NqPJLSqPjTR4$8HB\#<QW-PMm51s$m""2S]AdX7+8t`??Z?[X58DPT*'"L#u=9:L[Jg3O/XO05Tj#3[8^&(-o%4j:!!B\`Wj?Q';
%2II;/f(?2N/:iAu:HtNoq08DC[matC%29XKEN$_m3*?L4?\/:VCk1X0!7(a-4M2g0_4=(6LCjY-dWQmqW1sOQ#fITqLLgTY!,]Wt
%pl5bFn13u.^hjo>hV*2g.Ia>-K,%Z'.KY#Z`f%lO!g<lmqsIQmL<`\b^4<G9!BO!kl9Kqta[SPp"uJI:iosQ_edO.QAcj^r5UdK;
%*KOgjYk),P]u<cef[-`2N!-/JaM@,gfd1X&>!\f!!F9U\D5<jE#"&ji9U9H$?ta1\3<aLc#T'`d=@'sG_eUDE"5f*XL3Pt@Q3?+D
%G!a\G]ZFR6N$/ZPZEcFiD,^NOS^4htJIPe>r!nD\3]8CG8Oaf!j4SUq!B$Tg2H[;eTEg["?kTn<F7iWEaUYXC&.lcfF2c,aOOa\.
%Q*"`FHQC?KJM:lZ+ba#c'@]L+:GJ4p,QiQ`fE"3,+^be];*Q1T^k<Z"bmnKrCG?HMc_fEgK;[m+madp?eChZJaNXOnbfXZojcCtT
%ZosB0$j59=hTRje!YQ(=F?obY6_a)'3Gpr-:<3!'*ur#>L1d7Fj>)S/o"9p^<i/O$67PQq70(dVdTd8%"7a$K6Ouk[B/ggVP@[2t
%Qt*o=[Y.M/-0BN$"bT8J,-Egd0N$I'SbIY:%>'R)?d]>o?hauMBC8e&G[@HdT(/UDM$sT.$sFn5-KPM9i8O9kP%:2TJ8O%l9asI%
%`P<%X_YF$1!Vp0p+e$Z_R().2<)tUXfV$<C>nN/`4Q[?h>i0B\MMXFK>`E$4V?ZEJT#*:n+X838\f$/BY6)PWG;>TliK.fufB?oA
%#fQ<k80Q)HQ,d\jWc?EaTohV7)t:15&r7gC%_&bs*YA`!Ttk@=/V=fWd`9iP:Q"'n,2D-(6/bUa%mdI$5[oaH7n\AWiD;nSf4!;5
%#kNV4A%6V6%u)u9E'<F.kU6IW%?(Lk/0YQU[aOAa&t[9WhAT08gWUu>X;M'jTta9,3D:m/%Nqn*>.Hs<!XVp=3I'%MgcYk$niY*+
%F!Lj=m9hLa!ACk>%4YJ_Y0!JX_*[Y`<@o=JEtC\XD.r`4%6\mkPli3%!K4n7kMlam9Yj^4AT0<dB!@gPrFEu-e%l*?-IIH9HL\i`
%1R%rK"M/lDY[i8u%Q2-C&q6dSiCR^DH[HWn#4r"h6`pJ$e$8T,co.fHp`:7`!.[QGb^^WF]We1,+U/MWb10n:?\plg#Rsqf@#+l_
%\r/k%*J1FN">pI5%1)QLd);#t#!T7*C#fu]S-p[7)+1:MaYO2'f^WGjO6,DaBT7E[,.MM"A(_dY4!6iWB"ENn!n1CZ:)8ltkV=[.
%1q4Q$7Y)%8TJ"kZ^-l;dZ!>H/*H(i>-k,@3i<oqGT@6c("#Vse+heb2kaBkQE$3,LT#45%"p8reRt:](o&t(#"KTrpSO!a\n]%o_
%(0fTSB@G=21P`o=R#]1<g__<f("sX[h\9WepmI.1Qu%&9Gh%]\KGu]?3IH+G!FsM,-MQ^EI8;2cYWtpUQ)pb(j3%EsU+iX>%b/_&
%#3#8X2%4FeR5tnS']r"r%PGd$!?)>-?qb]*B!T4WH)>M"s(;G3_(-BM@l&@(7+5BNLW!G'$uH\flO`%?>YjrkAIc(iYGUui6XlYU
%IrY8C#Mq"f+1fh&M5q9j)H?(RX#oKb6XSYEf1uOJX6d*4(\5_\3Y.mdbKBtgg'rA18*pAkG4n6gj`piKY?l&/CDZ<E'*6h#HL3tJ
%G-,)B-W'R&`?>"WH`b=c4uO`OAe71WnM:U*?S`N[KCKUKO2"m14,<>>N/p,9&3Gg?1X&YUCL]Qb2/iun(7=7&*]AQK_YB5*]EYar
%?+f_MqBH3$:`Go@q/M"D[gh=nn[O-EQU(dS]P\;$(%2e]6fW5a:eo^Me:j98R'pP(b<05oO_&*L?&"BXi430#2$se9GG<4)@(Mru
%0IV5'1-=#[GoK#b&+d@eSPH&Oe]CY/S6;(O4b/,]P*-65omh`K3gpk?@Ur'`0@^dHGnGsd"tHGDlIM4#qV^?-h/[W(';8G8C6/R.
%5Y/TP65gTP4GO@]i'g6RpqXHrpfW"Sb/9Z'4/se\$cu5#eO;G3>bEkU`JZN!.nXQ[CuE-$PJs/=;q#rFTQi<rn$A-gfTW"rFE&`%
%^nYZcMCTh1l'Th9gG#tJ60lP.Z`<p7P^tP#8U(Zn?ni'Ud6Q%u`^'2<n-lnq`M%CIhK;8]k]93;)^t-jgQ]5+LS,c*gU2^e-::-0
%l3m]DpG-T\CT_5tGCeup?<XW#+WqO``-m)1L=s[F/95ui-(qt`N^+cVUO,kFVX\\"3O[@U2b%JZ#5.JGN[7`p6tg6`W+J>YU"lf,
%qF2(YL/3mj>b`F0ZC*/.:s>dk>NFMYFZgTlH7107>NT"5*I:_<fb.P$F>+Z;!`7_uT]J/_@Zc!tej1KV[6J;m6>,LZIHWjmPHABh
%gkLKJj3W<VB$.@g&qR&GN<]Ck8<&9@2OS.r,J$H"(N?]Hf8[r>l2p,.6Ztt&Y%/qmZJ>04bpb$ueI4.W/mfI5djiO6_k&IF5GY[2
%p^5DJ3<h@"0G$kcB$E7hCm2J(=R9Y`gI(+,o)dsF6;c+?JEM$BdS`Z2S2akN#l&P[FaSoRPN(2A,W*<JJ1mE1HWVX5.,("$H];m%
%rRT35[k2]H#!QO.3#Iu"-Eu*4aUhQ=cuoMD'"fe,f%E"?c\*"R1(EcbP'UM0!S+5XL<IIMoer22Ygc<R->jB&"[miEbd;Xu6inOf
%'khst$.5=ZP;)Au0aSMSIEBdRHXLk$g2g_<ZJ&etMCA97RA=(O=!f*E;duM,9?MGkH)lS$ceZ42M>RPH%rrLkNq-;)?Alul>S<Y@
%r.CM7io5*D)a%j&`Z@2=77iMr[Cd'G5^_lF0Zg,Xps]B];\8.[gmTtFIYG:)JjCq'c:m#FnSnq(5Z#ku[]kJ5Z:%'\lo=>`1me?#
%0/WI19Xm08pML>j&D]9N_SX>CQjjt)>BrV"8%1-FHk(])(*5AR86ZZ1`WT[o-e2\8Kb<M[+oq-Z.g,u-^Z?<lSfl>/13*$ikN^`"
%q]u==bsr@aN=9!VO1SggkFf`3B8H]`3hD3$;Ig!gJoba\bd.@3(1SBe?/>p>9`8t+dKiP??4o_V$A&e.i.Fd8^]Y5C>='SGhdL"-
%K<>V11HMoFc.^+<i6Z#d32s\e/B$kCGV'$h+FZ#_$ul(a[g/R!g3+d8bm)+QmbE?S;.b>[i2J`N[3:t@d)3O8N1_cW'[=Jo1Q?sA
%-R9`'D:/O]$2<.n>VE>6&AWWBq]RX!Z$)!W(A#O$Rl9:KDQ*G[/eI*JV]V&]?77(4;eo>?A.Jok>l8\bR^\"TL:<0FHDlh@4Q6HL
%Do>_5b"6D#F7os<dGYTON[UdDH4Wd!H8'>GS#NMB#Qr8bAm>mhG983*$c;YKVWrb`k`sC72'M$7p_2O^@n&^,\dep_pfNgam)&bs
%ddf(JoEdi!EWCX+$eY<qa4*F6J/p[[H9N!pK28#)Ji\3Z.kX5J8NA+cgscf3+X)H"U"1qA$GF79bI)r3?3GMA`H-^N/B;1CPBg2i
%LbA[e0I$iC!G%)hPAeLHiep+D<QJB:d:H)n1j(7eH4X!(H;IMh2+'u5f*iro9f#%n9FG@!iJ>ISCPFDVZ`Y1C=Nm4Gi,(bB1kJcb
%j`AJ?IIM\@!BoQfk[B%0bOF<6+*&6$N1m(!dI:\"aaFU^<_2)`(2h*tKZ@Jp7eMF6>`c`qJ>Qq=YQ1,\iV=gtH^^D^ehLsBe4_<o
%VIi_I@qm>I2l:1RF(8r3<&_VUM*cP[FWIo7a+;H]_B4l23s'*dHgi*N24F>kUs0ZUBisnY6:s,An?tJY8>Tp%%nb)G%nb)geWjkb
%;dH)/1"@"R(/nM<B"I7G_ImP^lUe:^W@gBJ`L:SBMs&TWjt#!$=-?8$jNq*#(T7lNGTJYUpp_V.`V4mR\$4_A!2!Sa5tJd$>nN/I
%Of!_PY<@!e.VK+bV5p7<%%+2L;QDYiPY/'YT[7FZ"f58c.O_].=$`h:\dBppel>PH2.#]or#rJVn7>%fDN<b]-X"6+KVH$Gi+?60
%2qMLk/23JOb"5dY[8lH6#.3_`Yu3li"/UUL"&/rA[?`;@X0kd?Qs'k4eC@a&TWZjD"a.6HW1(l1LZ_hRBK?/%RTu%>mA9'1'"h*g
%?1:1I@Y,E-'GJ.+V3p1p1;sALPt;Y%;C5--8sqNP.qQRR*^%$"b(O]o(d`-`X*67j_EDL$WL`GGVf(]%^mN`+5NpLcEe5bH%?Xcu
%\7j2!Kg##Z>/T:t+ec]V*<XVAicCZ8hL__M+I9%rZ7+-@?,%lgcm'8e@JreKY"'sZ_YR:&L[IK\K_5_&o4>n4MrfKs?W@ZBKMFK@
%Deck`+r*8DF;%?P$JY6`dRl40.K\-&Hm?H1WsD[_*epL;UaVN^SK)5X&(L00WI\<g;@U"`X'5_;H8UVR<j-*In<=P3'HfZa0n$=&
%.4[]B?lFJ2?^.f!,T!;kJE3HS(Q_mdq>uh<;I;[u;<eN[/kS67&c,g];:6P\\^+.i3_/14U,>SLi"$&gS&F)BrXfPBNC"CI7Y:5V
%2E_Vk=Kl-#5]C&qJ:OfGjqQI&-\,7]1R$aN^)^ilN(h(!(n#tuGfh\Dh'(?0nsr@JM$<WqqTk<:$B+>W5])7]3EJ85JX2Kj="LV(
%&Xutj/fFfi^giKm(h/M#IJPLFTZ?7i3hP]A+<q.Y*nAD@<KCm+Yc<Bk102pm$5or1+[nBU=d5&t9p1e"=]DK&Rj9AtZ`#]RO(pgq
%n,o!eJT4(in#9c7g-[2YF3,o3eWV7/_'Q.<68rsTJkK,k8WP]>;QM6;17cjW,ahElAko4%R[G,G$_]5JDMADtcN]YLdrR9"(1b6G
%r*^Oq>QggUZB7?$=S*4>X`pSE)-^>AMNJS!=,^Bg\FCP2>.G$]]bsm\EYjbJ<PrF;c=Zl>JUVEPRCoQXj7?W\.tI03$_iTRfJ>ur
%b^rH]F:0RTdS5WV(qOFD[T7%*a1X3udg]mZ_q_Lm-O>LE;9`K^VF@hVP#&ZkP^Ln"TCcd=n^5W[^g<1f$O7&jVSPUXck-1iQuSXi
%'Y1Nglo8g^dc?JfdR.n!-XD!]4ifGm&mQ^lh+(WT$*NiH\rW*7W9tmA33#VRH9PWO_@":.*/MR%Y;Fu88=;=18jddD9L2>jdRWTN
%OSOVHL<+I(%msm?U*h:"6H6/2m)F]==t1F+RZaL[Qn5u]fX"[*2p2T>lbO4>8"\VqmO9h1JcpYJ90,OU1M7u^<o"Y8ZrM0:12GF2
%Oe#=/<W5_9DnUgEX@b>A1e/l2\d$<Y<HgoE6Bn>eS=\Wl#uMUH04R!qE'YfO]^C])`4kSY1r<5;82%tRB;F^\ZKS%GS2/:89.=16
%Kir,_mbjUg6G9Ddkml!4.+G;lMdB#<72N(j18JYO"+_'q+$IS]1I*A5<6uR9s/M#Z;]:qll:PQFQ@G/<l:PP4P^esTd?V^C./tb1
%URNj7Lq;9&MQ!!rWJGjt6n4pC[]gOalHC(WHaZ`^?>)5r<E3amAn.XbkVbm[NG`7%dc`SY.ZLTe:-q6Nfe$JAc%M&`A[h<k8!pMX
%Tdk22:!ZVfW5.j&=9dOQ$!`U@%;T$*I_P;AG!o2EI+MhG;OU(rZ5T)egRH'U>kiErdU4uKAsYI$0P!tCdi4@.X$cO83!D_+E,cg2
%E_6iW"&F+".3fh[0Q7p_?:ls:oJm*%+o3bq!bAD+UA-l$+#t*dh+Z+$C`F4RLajcYGlGr84@ge`Hb`p6^<LWL-(&9a)RA+Al7k8^
%j/H,?"@R`>:]_TiX+Ct_*iftQCCo$c"G.Y%BBC*eTZN3Mao3l]UWI4@M#OEI"?*Vg"XQtW0*fiiWkS\n2($$eW3\Gn^E/TH<s<_)
%CTe(OQdOOYJNBiAi9N+%HW<mT\+Zi[obj@BbJm<uA=rXQ+K!s1H6%C7Q#;nmf+Qa%hK3;TB:lWJdpsfCFP%%m10p4L6foL&%5RO.
%kVlbZ$V<"YL?p(+Ch0m7lJ*[kRUcMo$Xe_mEIZ=[9FNElhAd&O;4hM<H#rmHUsTe<\Dlm(a((K]>a\<XI4`?F5WWadAl$G)"5<sS
%(\u8@N[1)Amc(a8,0pse7pcq6k&.uK6ai"nn@G,`4@mc-`85@-5$c8A3jRqZ*,)ma3R4#:'+\5"ET"/Er:Hq'Z=Aap'`<(B?6X0&
%Yks_t\qq4Yg>.j^6"Yp\oIYg]E#@_!C`)g"N#i3GX(K7/lr5e\47EE3kmL[2QA.%<,V`-sKIfh`U^3q2(g<G#7nd4P*!>b_I.g/7
%LG9;9Pc'>hWZ8Ta92A?)4[br7Xg&LLHK#)s3tsqN=9KuJ1^q&rc&Ybs-n4k!hcc-4ouP,#'DNR2iB@r1.1G;$FK_"mM9c4lGtRJ@
%A%msHJH7''#k[o7U>*<HbFa$RL%gGEB1FWrE>KLCFP0LBD$14"nb.>QjsbH-'cN".aB4[^Yr,Hs$C&'7HgH<0!]jS&?GJo<4KKJU
%$$gP#";mO];;urYSAc=>H5pO"e0Cee'%,l-PC8.@)%+i$_r.[6iu;#\6NMk=dh6hYS!6`%/)M.qj!GAQD\@kE8"_(%I'M%2@;'bT
%^U[/fHcR"S:LCD;5Yl&0?Lq`mNuH;N&51H\.Yb&[#'PBj#OEQf*gYsScXbpY^ru"Zn_n]gE1%L*m\J#3KOs@dp>VC!bqODoa]JT>
%$u\loari&6rW!%,jJ'b(ejLTFZ(-?$7bLdp(`kgUTE1neQ*!c6n]&d(EXO;8^c+s"fK:./Vb2!@"hKW:%C\eD^?=G^C'=tb]R%`q
%_O4E$)q/-7bTuANNF`LV*f09nEbnuCGa[:te'f!s""H1VR`Br+'RK\nUXrE=9L=AW8i:&R":^Qt+tX5bMGd-`Dkm0Q5U^f0Y-]+-
%pkg$I8g-QV%`o@gMcM(ZWsY9*Z.ZH.KpZ/PV+8m_OK,f8L+*^J.r0iWm>*r?TJF4/@8!pDihQ7XnIpd?;d1fGR#G*!HPjL_O%+*e
%_g6mQL/<3"ECR&ANJE':\W%[iof10\?#n,FGQo,AOd@W'9#(KP4O].eWKqJ<mp^(5SEiIlJon`\2!*)79".9L6s8>GdFKAqJn13.
%OH[*UU*(^/EEs+oEmfaqM?;W.k&H!2[gI@.#.ZMtg*$-cRtUQ=$!Xb2+\boi$7csR:&Km:"kQ?Pbf"lH1!lbPfB((2coKW'F"A*`
%dUE-,m5(F0FRZ(UWeo[Qd\U,ho+?DFm>/9)`'gb8I')(Ef[1$-3[*7?T^UZ6BMOn_368H5&*"=H+3VJnq7b$>X+4KknF._HS.C$<
%/`:P8LO>#6,,W^&JZdrN2@jnh;"td_$=)P*KV'5n#%J:u6Qa(9al6\*L/sLgoWf9=)SsH+9Rbg:&oYqN.oFOYU'!<`q%V@0qD9>H
%5K@9E$=Oj=lX]MFf;<,a8/P$sT:oB8j2#SGZZ?\Q1ZL:"=E03Z`"[huQq%2PeN+<(R>ai[0q_YST#[>KpQI$YG'QHdD,WtBJIcRT
%:_F<=Z9rEK#=enR1("Nd;0@e3-QYE-_Ul>#^^a[:'%$tJQVp?kTe'NS'SEoS!;9Tnm>E]8Y)!+ZVbmlfq5dc_o$9<uoGr%k`TL.O
%>p=A#@*^srK#=kr4AkIOo8TN?o%Eeif-i1tM5<cr2`.b-M*REn2LaT:[mZ,3Qr_6"g%h(Z]!:G1*^644m0``,"Y%m`&:E\,`*f1]
%Ci,At@9o6/LbAl3^r3oQ!X&Ph07I[qi->t&-8?s]NknX<P8bir(rW_*8n>N;*3jj[dNO"@#p5Ef7:qHRIu"u'b`(:!r/ci_Fc[X_
%BbHNnLR'ck+f;_tR(BmF5,c:]m=oKJPKm:gF'VsAT\;B+6IH-eA04#jc]P2kct))f*Kd1Z9]B-WI92)=oRY-r!@$,'=QiSSFqEGL
%ntZj.=\c8_?^)`2&C>XLr/=7[Ys@Z>-,Tfk2L>aFFD>CWH7I*Sd,ItVc3uV%ditHGjT4EV$Z>HN+A?S7_(CBTZ4rGGfloj,90T5C
%1^"oSPTd0T/3MN83Zhd-So2+6DN#Bn\T"h'DVFHj)7&N!Ybb&]4+XWnpn]:+m1!Goklfd'P*9m6r[D$^pC96:*uC5<d'\,&1bppH
%AW4?>Rk(m^n[F'tralgD)=US#puha,0:Ih[L,Y.9^?\*@Z!8&+3%-0e&P,9$ndhp4>Ik+/n5"eE-#Ks.!!CRAfnuIkY)kJ!5%d[2
%*OsqG^6Rf),&Ik#lc6kqbHa?n`SmsNk\(`(Pq)8BIO\51B$4g5'r8\YGpC:K88KCM,tdY68TU(:;OMcDI;K#'k5nI.BP'Vos4[[=
%M/C=N6@iIPj+L6_O&n-u,/c.aA'"p<E%'^_$F_!32CtX\=b^9SRN#W35aFhC&%?T3#CS>hi1Z(FehBRMFPY!32i62Hk=Iblftdhs
%+Nn<:c:!gW14gL54Zc5/1mrPW,JZYiFAOON6<h9,EPUIrV-!O6T#T,)l"Hu"l@B3h4gmRKiY5BC4;;4E8fYLD8ZSJ8%&=Zr//Xor
%]56O56Lt;?ASjD<K3e1Va%O+Q'nZ6GI?Mbt/*@Is^7e44*iAQ59(P&CoR87d_D3.gj%T.874%;a^;,Ol\cHa\\)CGn90Sd.b37%d
%P::N0/[g03XO2#7].U:)qY26LmKVC^51=k7^+WTDTC=bLSWjG4VdaDZoL0?H[!>qFQ2D%nR)I0GL2c_U[OdSW)*E;BZUFG[/6O:S
%qQh0ICSOjnjg4hHV,uo:!kPDC-=/Tq)$5^VfX"YD8!)shfi:)!CLAiUG/JO6H1l&1&B;Yr"jg]smC4A1daEN%<rH.[K-^Y):)R.!
%-kT/+['BcTb4;@Uk/;tZ_Wf].#-qCKm[1<6)mY>>5*P8i@Y.-V+b/Z-:+msh]]qEY'U%XE2[<,KLYSBHqj*ujAqXh<nm&Lm6Z[m]
%-(rs;4fL;r(0nfAK+u!"YHKC`BGOAo6o\=Uk>\dbc!RQa8BLuTm#KB#+J,h"&f,VPB$@M^Oq(PoY-:ZOlbo'S#g>2\-5[\BZQ7+u
%N*b>,AQW8*p:)tM(kmL?SfWW&Z&_Y>9c8-YA6ZV%@Z&$!k_c[ZYLb;GRc?+]=u#Ye"Nkqq1H%d3bMo_Cl=4WA?LA42\HRSgYd&!V
%0D^=G_r]0-qeV,P8^Vu)/4fHd=3-f3UmEapjU+@SA)]a[$4F?k`Q(Rg\+"tp`djftk(IubDQE/"Gp:%s0?8_+!_4.kRtXH+*FlP%
%<D]Yp3Vd]',p9Hlq5R:*(+W%Q9@`u1k>k@Vn,_pjeNb(&EdN36O'hYO4mal5[YLnN`U9b;`\+`.eV/3a%p*%sf62,`'m]m[\*V'>
%)FWmc!;5/P%4JYb7K7,k<D5d;]2^Z<[r)pp&uleA[YH`%f&J1Y)AD!qLi8RY%&:38&`T;A5Kms2m=Y1Gq%#8dIha-@>Q-EP:ZQ0K
%LHiZMbMGZQ%q8ERjmuHPae5>Cn`3D\@M@7%V#m.JUBh3SMPfn`%Xufp5]iS(61i:k!c';Ejmb5G^NkEfLe5,X7VC^G24iAU9i%6W
%3H:q?N1&me*0rg`Fgft;:jU9B)+TI1;3a29g)&_Z/D2?u:+9]s/A4AWAd>++?5gEiaZD1Ere<r<"<CT2%n$b?3rE(uiB"VJi<4_V
%*a53U^/V_Kko>s3C/[<Gd>:*%&=>XO<23[q&is3Da5fb@kelSbnDlBcQPfn@4dnJek>2!uZTR(H1._%fM2a+(CX\PFMd@g)&f88u
%7Am[);>"rrBV*"grk&=##rjJ&a!u8RN_%U7gOLA8TOV8PY*,-A?1s#Y8bZ)1PKejm4;[d?R!4Gp:C13kSeACPiu])E-9NSfT-$Va
%_K/-X=&b5S]&":nRZ`Z666h;X%UnHS[K99K<;lPC`m)"]&SggaTh;%]=Hg$h'%Nh^,cXLE8Q;%j-e<$+qBI1593M'Sdn;BXpe2<e
%Q06iu1^Q;RJKU;^7:<l]lT55iU]>(B(Lg$!-5Imo5=V"OTe7-1_O+S]#]YpWjG1-#&aIpN-0K5\aPX4tj+ip>17LXL9bJj.\RED3
%BepI4r0afu&+8`"Z=>eH$S*Q+.BJnEQ*>AH.UhRn*Kc1jn5pPjB!XYF3igB]2@,e,4un#2_\-4]q+[*84tYbJW'Tmh@#<+j6r<*'
%+NO498C[<S6`u>98in@8.IEMM7t.^2>rVU)U^A/&r5c'18"P*,(k#85kG\Q8Cs*/&LrsoI12XqNn-Xfif;GnkL,N1K0hcGeau*;f
%[J(irTQqN'"ZdX/=n8^GI2/;S!U4_Ah>nDR_#km;?*Ihr;b--thdo*8W6aKX5.;C*H<4E@\+[t&fISlsZ8kt:Ps$Ob@qo1)_L88L
%/fiuK:2kucae8PW'HRY%!XF<.QPGHR]WL-(#U1+*=9QO"6JOK_&l?Hn,p7o<]6knUh.nEIC$#`Z^[VEo2&o]1e3f95$)<3>9*DeM
%<Jp0N@'rn!!+3Z3Em^5^P)F4aQ!ADK._4au<-%g7gO$D99m.aSm!Sm4LO'Od@p!A!H-)!CeD<=m"FL=K_$96R6.dFT1f.CnW!+.3
%n!tu3Mj^Y-Wm[='0jIM^COMUE1<9_j"G7:KLC`tQ]MuKk22[?W;(OIh7L^Od`='kq&2/Yu_^T.QH-YF2g-]+f6>AnRl_;Es<o?GN
%>cJaNQYh609mDFaq8,3]aqp@4\XSfiHOlhVo,sWY5nlIQpkgn+m;0f:c0DnA2%_?)MHD!JkW)?feUa(S$lC%K?&JiBFKk._At2m7
%cZlT<k1X'3lYN?5Yp8ePVYh!ljEdshg1gYW'd\8.Br3IIE]sS=<L54V0r'-I)\_mjDR)\Ai\fDN\3"7K0t666p"7b.Y7KXiX<\C;
%0HVMOR4q4NAYto)E5\Pu/O9kYXbIM9G-$ENn?oH?5U0I*S/mNZEOFHM<M@Z:A]_TlmA<euo616.^kA_61)sYAV*l(!Y#ZWk/>)d&
%>7R+toXq;i-TPL?W/H<+BrgO/4V!Y^>dV/sg+`u).IqLhiu6FX<"mDp'EE%W#ec$,M6h%%@][rSpXRPi71I5\)NE!lQQ&k@(\7^@
%CnsT\YT7c$18$THhYgTfrHJ#oHr0]>K!hgr?m`)%Ab7iTM\GYJ$BgTD:"q9Iod-)H<$M'\&b=O,P?QE;QG]Es7D3rp5$E&tUXo%E
%m*3qQbHQ1^]I/f^":]gZrXi),-*0PR#uJf=NN5R<BhD4#Lk+]3S;Q>Zd^:OV]A$M3@thj$.4=YDI[Nc"O0")1Cmj(@eYR=Q40muM
%ZL&1L@2@-(/$G?tO;;gTZe9Pu_M_qPg5A6E;RK+,`*MN/=]X99I9/'ql&ga,5f;hu<u,$tAnm$`r7't$GZ_@1JEhp*Ooi&1ds'I3
%1XZ/_L9!lgXY+,:=ccP.(_%rIlGB5J5W-gi1XqDfE)IhS%O=HA8>aY/H/qqa5'Lj`gP]uAYU6Kke@5D3#AE"=o9;dZKKpGqK=nmu
%I`"MPo_t&`fD9(pJ=I0QH`[u\[i<KL8^9^E1U]H6f)k=XU=;$(`EK@[5q$ea$.T3\X$(dr[&:WTRqn@@Tb0;RB:B?0P'@@K&@j*m
%!/`@5ibM%8_C'?.0;_3]'WNVU<("JEoL'mk1sF6'b*5ga>K%BNOCmsr^eME3F<sAmmd)^>(lbOT)/>Y!3=(Y>CKRt?mBFJ:.7K*+
%&D%kE\cgh[0#_,>6Ies"^"@lYkO\h^KT'A&,S1uB=(Y]p^?Z:R6:Lc!Hi><'<p\o1Bi/&3/*p!pg=8TGL38pdeA41l=UD(?+oN[J
%:0j;gmVQQK*0K$#Qs!"NmZ/ODX%R`8"jA60KWrW3\VeZ%?'S9V@QC`3W\e#ik0R7<+h/ljnb+W$gDOej(H^?lg*#lN+,;0dAeZ+l
%0/Q=`^o]-uB!mePhRUR!TV&d59qYW=,sK0W[2A*WVl>uP3RN.dHqf%m^3FoWHP=afQad@o1RGTX1^Oa9+fJ7r:HEt(C5ElVpP=;L
%_7@JnPFP;$Hoo`dPRWh)^qZ<,>iLK0cR!JCSbQ-pIf<D5lH#\OlE\tT`ED+fXC9<&`opu3YJgi+GY+AXTRG5"e1WFr1SS4>AsK\G
%7uO6t\io@jC;,3.I:-$oG!iMY2!#^<D3!U:TdjsoRXN:o&3CIFn_]/u<n-%Gd7[j4T)_HeSj;9OOuPt1Lk35)X*Qc`T7_D9V/`iL
%!KtdCBh9=8HdWBI\>\um,ntoE]@GSj#,WNc;]C]c<"qCY3rDMk>7T$m)krIHT/2(=CC/*qhZh5$%hT6+qA2F=2U0Gc20-G1G'sZl
%)_LI_Q0.G2<C9@m9%nk'5-<*XTF)uP*(poP(=9Z.RZJEuq;?/1!&[9.IJ6GdOVk[5lB6I-8IR%9pa$VS-!%)BOtFmT=T$p"4OFW#
%5BS#uAD<rNdjQ6B;&VIi5pI:,Q]QUhD4iNU&N6*!W[Z"6chHV$;tLfnemdt*/fAX&!8=<OW=t\U4q*,Q=aWL-;JG74,^ePP>o(F/
%OHsTY85%hiH86t3e.3)R^Z^;ZL[p'ummOqFb,Q!]5OBP/-.!09P@_5&a60:Q=r(>7;\YSAmG=[-E:2ll'oi&Kd(RCPI\;kn6XDEG
%O\<g`1<+AI5p_WHV)!&tE"Wj&-RFAqRY$=7D'Ajgh>K2kr#0p;)SF60_-tQDAn^K5*N/b#&0E<9T_kL;4;D'cN#n=Fq$E-f<tSqO
%;kWH*CWO-%W7S*FYu<SsDCQh*k*s)".&)H5n!'T,-NN%iZVA1."a!c=eH<L$M#N6W/AA(]i/p$16W4'UF%.Hn/KsrVgHa&XMn9b.
%rt<JLc5,Q@'Ct<4`eiIU<L2$]IFY@\%Ht3U/ch#p'\&NK%;]e$>q-X9]/$NT+O')'iTJ-h`iUs@T7,0i%Gd.kTUTQ#l:q41U0V\p
%^;^qcW8%fg!ac%U8c8Q:q[QCUNrE^N%_Z*6/gWtN(aR;U(m<4Z%C@.e\;>:k94/7"hk-W<d+?$'V:f4Uh@eB.U_l'\/N/S\JpID9
%<=bo333"jY8U7TiB`udol-]jD,D]MsK96i=&F+g\Bn&VI>+2H*!Cqkr`P7N=*6Dg@cL[)N6nLUepiUq2$p"5i#gW/=/O@_?5]jHH
%Db59S#/[]05)(-X/]=:0oiphRra4%oQ](9e(FsSh<:Z=pqlL8WT"R,[(bP20TK&Z,*Hc^V7,8p);8OBQgZ.>#DG>T]*W!RMN9u2=
%287,`SnJiTMM?p\B_KrZ*el[-D93q.N[2)>lN1BnlV[secG]@TOW;q=#pm[b]m"nVcpMnRGtou=W>?Xd&@5IqEk+l!(_O#FjIF9g
%nT*Xh;H,5ITR/iK,-HBsG.h-u)G.Tb;HJJ,eTc@%#ldk^CPLRmOC&T:>,^8!r6k9/p8,$1<o@$,(>;243DpWgC*_J@Q)I1Y2p:(F
%<C:3`M]NC=<)-JeWFK)Qp$=k-nuc8-j9N;g>]FfknTPYsS&CJ2kcC'f5jT'X^tS1!MGt[`S\OrPEg>"/4sFj;hX1Uu<O-2,S9EOl
%Z(d,Go[fWVd6joTDY&KO.Od3.+cDO&L,N>ennt1-P7DPQ9e43RG7B^Z=$?B@#B=E"0c/MJ6Mt+YAT>nMaR863dOFuYY=96]q;0X!
%ZNhe1F&jp%>R3T7-6ZqamJhtoU35CUb[jXpi<QRBU=oio=-=MYMbWuTk[eh:E]MFoK>$^8]nJ+QGb_>M5c*/A3%9nN65&VYDXSKI
%oHY@aGDL4&HTnhHN+nBdg0G3OK2"!CEbc!OB+o.IOHN_5Z<J`M*9V)?EArFk'B>*-.?H#ZLg@r(W0EHF'[^J)`mROGXTF0O1uqrU
%B6HQl*nsX`M>39-V$+&n,h*!4[ME?H.A,KR9a]aa)b7VI5=W"qOFUSC4+,dM5)k[tcLl/=/:(kb*ig39c>=lG4Mn&l2n?=:n^;j\
%W^4XohRe#o7qU"/#5`;GG`1.=:9!tBU.G([+XMuXlj+BIqoiQ-R&F;N`_X"P,o/'Y`.BmEX7f5H+j6Jpf_J6oN3B@!nQbcP)LDnB
%.'Qitp#M<t&M6&5)o<JM7IO6\0!hHA[VrUcDSq*^k"_W$&fHCTURE9X)f%?uoMpN;.!YLG_&S*:p)*+B<!H)%4oOLZr*GgE^emrm
%Nn&%8aehST9pJ:LH:H/M\5L&KJOL#ofA<U:N">=^r)ng;(eW0eBQPqtMd\`gqbFkhn*m.#5^(]1DRuL7XS?Y$NImk,>on,S`:)\t
%4eSQBGR8P79V99$WLf)olpV;?8MJAn=iMnI."!IiPi?te:_5s6G*Z]@81m11g>pa1+S8,U-66ZBY\I.4hU2S6mrnG'+u84?[crBl
%OaoN`/X7+>g8\Z!4;C`96H=^_DFA`,$$GL)\mS)/PSGJB8JfSU6cI72'&r?aMJ,K_PlgNX%&_+hM1-kE.ZM&#W[`X&du.,3W+GTV
%iN;r5mSSm+NDRWk>.TVMmP]fYWaIq)$6E.`fu=>%[/!Q46ns;!ZQb3aIsW2"lHlI8k(BAb7;IG_?Y*3=$/>[KM^PaEFTG4W;(UBe
%n$\a+7p.WE8:80$*`C"^(nllQn5\L];PbLo+>o4TkZ1*4'iJlo+K/gkaMY:c$"l-gpraUVNG,SE2Ob*-A:X%Dl:E31@2F[:*-g(:
%*L3Y?b#_*\Gj&)V/E06VhMo^rLp71$13K\/K_W0<9'EqkT^EG!-eu'Z,[nP.<X)--B>@.PXVp(mc.$b:3?OhI<4,W&L+8jYfW]1E
%]JjNR"S9IZn=#b:"Hf&seE&,:k>M%'T&9POr2%/1peiW`>_K)R'']cmC%GB0lRHEU?32^Mb'N5N[Ri#*Y+K$_&S"3^'-SF(O!I*s
%e.\YSkm;ZUoDF1V5gQ#u!VPe9Pu#`B3LCNMp(O.ZktgThI&'[Z1]6W>7LJ`)SUl8LV6?4uZtB(PWI54r7W47a4"3@gk'mJa8dMfZ
%UgE)Y)a4+nRj>Dr'7;Nj"$'!qRBKCPH<h/bi&h/4lhmm`[*r^f<e/tA]KQL;hnk,_0DkMramh*7aWPIV?Cc\Wn"?P8**C[6)Y-]X
%<pS<Y:6:s)f;IR%XgZ#U.I6c2'o]DX`(lD_c.AlOD-T*+?*BP&lb^JH>p-gPea)#dq@oaWLNUGjasB=1$BUa:f;IQo><07d/RJYQ
%-%i_LG]aAM^695"hk;?X%k#HC`p6QBr"`!XI4LWaI4IQt2IE).j0ub^qklHpD4P"R-0*pfA0e$VYO(B:;ik=0G85Qh2crq]iN&g`
%X:j:mQ_B$b#3G-@JarRNUt>VN,FB5o&LEbu&LB[`J%RrK8#"?3V/Q/rVCrh*9ua54nFiDXSG=1/`qaS*ghaVe"ikQ/ihUMS18\sn
%8Bp;_;fMZc?a[>)G61n_L:-F,YdV/h0Sa4%"mP^Cg;`sGotPK`4#j>/%;ERoMK9Z]5^M8;G)Vtm*/uf,-B0iI*`Td9"_T&KIUe`I
%_amX.n.^K%8-@p=`TpIl3R[BUia`QDMR*nW`#p+J]K-3dJe2_YGDM+Hi<6^EG^TpZhtkK1-a'.\,_&ZM!i.L3lVhc.#4SCVr3Q[T
%2I'oXLOmi`kK?fnCMQ)d&rqscNEkl/^t#PtEJ/Rb$I\69Y&75i8.Stmi5!kkn$&g1N#6dDdd(9&C*%(E0T@nS*`Td9"_T%h%ci`V
%"7o'IeS.k%^bbI?d_CdBR4-@t6kY,sm.'?T*!u2DI3gm3]0O$"m3Kb[N7XucCgQ$o.Vg'eV(J_hd5,2Ej=,o:Vr1WW@.M'Voja't
%1t%U;1QY*&Cm/F&L_&h9`ul,&q[)iWrTtIl0E95Nqtn?A%&plX>s`&NDMD`-2SVGA<Scj?>#p16$\)#%0!:eb@r_)k&\^JCi,I@&
%^pnFImH8VsHmZ%O7>L]I=c=lH*.3-a+M);GU#"n8<rF!+q0bJiWTrC.P2H!HR`bN`0)0iJZ)R$GGe*9]+S_1eTDsXJ_QOdS6cOX/
%&^@i(N(`?n:kio"')5oIV$5T@,r4i[.7gXXEdij9Oo%tOlLdDA"2GD4i/>EG%ahX=:qSsql1I853C/q#-qN*n(6-/XppQas^)06e
%Ni!D'q>(f$fDd7eF*js:bA+4eU>b=<'DQ#J3LNXe4-QjD6$h@qe]#fJ^@SW8%`r6Webb?,O=%a*i0QKU$G[9]0S&sElDnWb)$1UK
%DPnULq?\M'Qo6C-)"_Yqn;DoGNIp?^TY*Ri2\8DUr!o0KTP9nmhO95C0=LsJiNkl3"R].a4h?JjaLdQZ\r!n?)rrkh[K(#,3'l;Z
%gOL'A]0!0OoD5fK8W9G^dWZbZC3LA:4>Cm+Og[S22"LU>QG&iAgbdL@#kjnEdd&m`Y-]6?^1g4>@H:+W(cfuW[lU&^NH"&phqCUG
%eE!ruca[QodXi2DQ2=caE4>F0"e0%L\UjRP(XF38"fna6;g#>i.7BCmM"4EceL4@UT1ceG*/PM)It0_"74ZmOG8@dt@VYVhUMG?=
%HQPPQQ@4_*6lMQ]OnB@7QSq-Fb\msrG:7<e3M&rdB+-pnSsrX/)sC@<GVi&E<uOen)iJ3/a)N=CRB9m9iXtjo#i%9RbW,)T=.p-E
%C!V/=`k[Et2"2b&#&+I78@892AeOJH)a09m]0MLI,C&Wn)i96pC8493.B,lq$>M>UJso4[PRGL1\V6Cn_JKm@66HmP*p#l9(>PP3
%m(rTfbp7X6PN\UfA@a-GM=-jk$)W&ej@+!oNZaHD5`uDP1e^32TZ<%&".-\`_0AjUqi>-B1R->8c*$,XE8Idbm^#Ifb"??s%8:3o
%Z]9-h[OpXu5Tc>Op#cUD.*`m1,f[kHgFk=.=d.N_"B=Tm@.*1>2i&@,rAJ&,*Q>E-qfE=2p9bkcm;"PM6d&Dg@.$]C8D9GOO@0Nr
%,`uT+Cu,HQ2&[&e\mO3gJYR\UI3P0P3E'FWD"9kM,"@`TLd>Rp9qKF\`g8c@\lMoP_5;oe#.!@9:Lm,p-J=d%gLTIpZ4VZBAEP=%
%i7d6F?1nI82$5,l*Gg``L^:Yq\9/uRiZ65jI;:!Fk@32c5^O'AmD2%X&?4WSK-oQMmrY[a2hG9'`=^SM;A6q7P3(OpaR"'lA^aj8
%6T9@.9[q<=-=)e@D>+(=?i_0Be#H8ThlCAe+0ZM2S&Wo_+OG(Ji41[Yi%6iUUroa,1ug>UQD<4>4p)CUf@o&(SUp_8AUCn_4[<AY
%/bU<5*R=BW%X&;a<7'<j7T:smGPKOm^G_E""SuZUf5!&U9lTfi-9/WE7En$u;9Gr)><ch^E\_?h@PVX_.$Sl0aglbARh>:88-@"W
%8-@#.dsuK&Zsn+?Zsl08GZ^M!oI!2hUEV:"rrT&8K+u3>AL\SQXWX_,+]8kOF,oq`jO32;pgJlbT2o13"M#"1[f$oq[1M(c8dFhD
%"ZT?jBm`fV2'"V0]+YZeb9*bt)RhOe(kc2JRS0GFWX6p9J,M6?oC[4-,O$XXSuAi0f0][]&K*RpF\oc!?V:pY'[5/6E:8,OZthSP
%6(u:mf3K#bnCq77,`Q2JJ>=RAGP5,E"<o"?c;K*Rp&7oF8FK=hK=e\IH-O\\XO_\B>jgh2c.LE8SYlLZP8tYMH6,./Y,q;+)[8\G
%:C`1S*ZEE$e<tRBTel5[_5HUIHM*$/*IHKpWV#\q[tu,h,U,;s8OR_1;5='=\+R0@E/gTa,DBk<@A6S%O%CLljo2V.M*gAn)(/Ub
%<_9ZGZ6'C,/Y#(mq'BCq6H@]"T*2k4E+/Fq?_;rG\d8Q"n3bHm;&8Loo7uMuSG3(T`MGRg'pn'e:OE.!gSnQ/`8YC[Ep&SpBsu_T
%h5SHDFSFFYBtA"elqc4@)%j5.cACk@VYcl#QqlVlc)&0ZD>TIdADDr[61dk2K'9a@geL7_U1[Aq%$m\O)(\A??11FIi:.NJChk?Y
%e(,_cdi8PQBo8)E1e$TGfgk0DH%$eKISdcXe2BH`+cr3?6$]2;;P**?PUCc(jb]R#GqoA`o&jOb_u9GPY(dWqpK`d'iM?B3g!t>-
%K(:`e8U6c!UjUH";81=lA>AX0N,2$t)>7#HN?:)U>^ijW>dUHgCH-R-K),6CSk!kbiAF'Ym7ENrlqbu?$^oaTSq^S]:*!uqr6UIM
%>;p2ahtql-lOk'@S7:Hg6rcYl*N*OQ,C1n=kB6-&p^+Kti@!\mk'2oCT9'bum/".ar.H#l9WRQEj$?t?LFX-_(@J>-)L/i&C#FFf
%IiNb(I$>kS*(hGO?Rh+!Blm$2dld2odC,ob3b_RAl]^BXb*F:)/fREdC(cM@Z;/aPod+u/6p@_aiqt05VRr:r)=D7:k(D>hiRkO*
%J`L%If"[fl(8UNV#^d(hf+Xh/nG3jCf1k4sc5_-31NNKo4Fs2/bj!DE,hG%N@_0j!&p(Wu&p(X"Li/[Lo\7j=G-/SAJgb0cDmS9K
%_jIddd_eW/dsP<FiC#:+3h2jcOg@dJi^)L(*pYJfg>mp),lBY_Td,0OTgdCn-r9J/aqHq%njLg"HldqPj[o2?,4DQ)No7aJrFsIf
%kt)<pdcVS^l#Vl@oJB-b/jtoq+Rt*V<V$P,Uds7?F$FT=:PpL`PFt<i,&!.2#b%P:K'j:NPXp:!p9j:Xlt\",pt42#,sEYfB9Jhr
%g62)Md$CK*8P7F[,X"]rnfl@<4ai.=^d&tb(YeHg\KEZhM*@&Y:@qIVV\=J>l96Rb:S-d6;CT/=[UW8doC*f6&ng$<i&/QT'I"a]
%D?ure_8?i,O9s@n11VSoC^QS$-2U9l#N;e=Jaaf';U1Eo=9D4^"6#Z<F^jqRiKKd"GTu<2Z$D/pWM:-c;b&2RUOlT2DrA#=cF&Xr
%:F2JY:QZsH`"5P`dhJ((+nVT"KC[U18GS/f9=[R$>bkZZ3DuI4=XQ*<;4bX1QANjRPUCbu':U?ucf$Jo`.HcSmD]Bo$psPg#Na&=
%,0EjVcS@5.P4CFuARYp..K$cF2]8]_*``@:k?;;nG>,ZCq`42$-4Mt;,A>0G)Yro56:6FgheC0*&]\E`9c?peOj3^\,*b.^]8JLI
%$MXLhlq90-MT&..V-of5d&Mr_7e#,1ch/V*.@fOfCg]*BUdqL#-:aJ?@*"N$n=(Klkr5G5-)m"H`nO;;NMphlr2.D@[/D9+B_t@6
%eOU<CT[]Lc7_5E=,.c06OW6i[7;s(U39`m8XqP_'mEk_U"HfZDM[Q(FO?P\tQ*q9NdAlH?]?8NSd[,hBGF%cD$HgPqB7$hdMS*9A
%j(?j%SG)!dVlu;*g?FI^m-Jq8MilB_R<'C9T!dC+-)TTk?4%=bnapgZ0m7M42<!g\2=!?;4pCQN+i[Wa*NXAt`X[H3L&=W'0tmQn
%0c/"*OV>d?Ed_F`$<-l1+,Ed[3+`Io7^f?u0+pB#EZjB!P-`Rg"%GHQJ*EQp2(f1dnJ'e75ifVE1T!5<CY^kH+[C_NlXTnt6DuaH
%q0kV]&bth^kO!d8cf@fNlnMj"aJ!20Tf!qa$Od?hh1>t35#3ePbfN!,hb**>s)(Ho$iXIAj4+IH)?**W?R))(*;K7AI7hi3hf,9!
%@%gpU",b$Km+jdi7F,hX8o#+tWMi+/(0&1-<Tr)X_%:F/KTa)cI9&l4McLWdc/BZB5]ca('N%<LE)a_B`(,gX3IA%-X>T!s&7FNH
%2"GO1ZkV=a*/><YK6k.$XhR9&MhE^O0hc<sXPF6`S4CsN_WC"LJ*<>h9&`W)l1ehYT;?4T]qW5a'Ot,k\h*jCU/F:_T6^*sjTH$:
%`.9B5&I_O<Y2:Q.F6Ho1P*XZXILlfqXVadA9!M8egRgN&)_XO&MmeGJ!_eH8!nZl^HLX78R+-T?qM\E_BG![/5'D*2J<dV^5ZVZ9
%PNroT.NI.nh3;)_E<A7fmZi:1)amUmW(eSN^"VM6n*I;4$lNoil@ooe,h'#0=f1eg'nnAuapu*f`EPbgs0/R]!c)'8=XB/68F<?8
%1NgYZ\Xub('jH!^F`*u?]<ChSjh^;+1&gI=Y76k[6(%lkNAfoPW"$/(Q)tFUTJF1GB[C_oWGgV*8!&]qNhV_o/:.<\l:"N-UUAUS
%XPH">P,+(lCXV9<.uFsa3;jVRaasR@1r)/[Q+u&"Yb%)TE5%[%-$ki*W3fHVOfi#/%RHgF+"?1_XG`Ddo91pr](-TLGZbs4g5;Vl
%Qma1bYJrr)1d.qP%iMG5(%lN5<`>9s_AI\oOG3u#[*cH!]%X)05#LutG7Hh(pd4>c>mGT].g]=+"ldON4PKFBYF\u=M4S@hZO?.4
%MDtER>;ni[]\!h(j:g)(1HY78T$D3YM15/p(0np&Y_k0m=a[#Cb1P&c.W,PBZdqUWh9#P+ou]3=&a)mI6d\n8L823#=KA_WEpp7J
%K'kLcq.t/<^$"o'qnAToF?b%"3pgtM*kRD1$G+!og3/T`Ur'*&%7MCH$N)&fa5:11@&qAbU*\*MT(VBr<b&,(p7/eLK>.n!*,i8m
%fQsCifj`(mr89*;c\/L)/JhmD%7^VDqMouP@%ea(e1g%#p8Wa3`F1k<182IpWtOs5bpk1N97"KR%D,j>^?j`1/_4_(FVNkG*$;+m
%6dF5")htIU$.Q.bFPET$db=t/3qY;N&gTmCYP0j*$fKu,C0H0_:tr0WC^/]CWlAAsF2*#6af3lteNeZ[im^Ufjl>@9Zb@&HNrVh)
%-k5U/g1:r5-*umD5Lq<?CO8k]9fCrjlR<M9TFN:<P0faIfk5blZWX!9:%BX*<Lai)m!tkC0Ck5B`ec.9HqAerie`un"kq=C7+PTQ
%<>%$tM;cH^aD[JWn:(f7Ph+&S//sR?=B```)l0m3IiI\9&)sR+0%kAuA+-_*p9;4L:17F:Eo(\\gc"3i-]re9*L]r"_o/ZX*::un
%G4[X;!j=^a_O;s^2mfKs5G1M(_CR<%N\(DD[/(i`L!LM!5,p"9\sR["HJrapGn/!J$8dn5X$RT;LXO!%#i0uq7e\U.8=Zd#A[ZDV
%DZen-h-_emnrT2,C-8jSJuHSm.'=N]S]Fn)pfp['WO;N`/A-TB(!UrKW5!8g^-(c@/$78ePg@W&56pZK*q>o$/Lq,nmcGl\S1.=$
%IW[e2<"jpNl"o<]&X:o5DTNo&+]/GRn#H?dVYcBN'F([`[@a^Foit>J&m]5tHe)S`3c'VdbOMZgT]TD%h2Gr'Kf%+jmUhi?/Od.L
%TXu`%L[-[##Kq;MY%Gf1+F8<:;tLQ(J#D.!p,JYpP\RSuPEnI<5H+soos9rLEh9Xk4c/`7.P@0!&o:5<(cP)g'2kT-LCq!l*gWCr
%.8Wpf8B?c2`Eu\J$$N>t+]S>e)qBV,aPCOqSS23EY#ntcaCQ</!HCenl?!h_Q`+&q($B\783^@)\.cu@Qhl5(n;fjf%2+%3SLERI
%i`[iBJsMW<P0ZZr0piPk;-fY).^PL$BXGsZfRR[2,lQIkg9C:4M?[o3>BkRV9t`a1"27W;P2S748j3*g?.=fr<4#B/q6qg;N2CUq
%lr$-`072du15OQa.D_<([En,Gn+!>[4GU*rPaC/6>0J7q;+ai'K\FI<:uRB5\c!MkD#9@a>dqthT!ujo?b8i&#rc8.a)gB4>CGNt
%(sueuP!darQLH/_D[C5PKe8B!I*X]KJ4i4UT@+G3/Cm^L+!H-B1cT\gZdi'"U`AU(-<<'W2p:##!mSrs;ch9!.-=8[m6]+c,^3/3
%8Z<QaPsWd`a^nd)<fY(NcOI9"^nm1_6##5ME]3TeR>AZ@^7%7VUp:A]2>F98iW]"4UOBE;Vfelj3(c7;LMt]Lipr'4EJgN6OG,;G
%Q^ji5IU\.cn4/sDLnpH$3D,3FdEP''bi5Tu`^p^pW==q3At`LTPdHfq6ujs,IbWpJPU4KcG5%DpY@Z`>g9DMcRl=)?",PfWqF8hK
%iOo]+A5LA@g!6.G5$L";'URHsU&A&:DMq"X_F.-8*,8ouC?_GaK[alq<G:hW<Tl^p(S'HUPIc@C%Ec]UHCss\7A=VD\*#59rJO#Z
%GNt+H9LM[E.=OdX.=NsDSr0/+N%o0=4QV<pY@^^W@#IC9B$?'?0\-+a`Vj<[7.F*",f@Dbl$6/Pg!iIJWK2N;Ee[Y=cV9S!cP\6[
%;4!-@]#,[KB9@4UEF*@;990Xsbbu\/pOh*Jp`D,)dLkjX@Gd>uS_;6;[_%d?o'@.=G,QQcHp(jBoU/HD7=!"Qf'-^kKjW."':XZ9
%EC8udAE:O.Tj?GP$;%k,A?[M<87$0%=KT?_D:-ut:]Y0RllA?`T!Wp8H.$*iq_#.chZsC32W#gtjX!>HlR1Oubk8"p@(-\&3@9*B
%;X#@fSD-7th1N9:,Ypc5TJQN6B.=dW'+_!(Eel!=+YN$G#]:e-`G09a;C@brm;_hIfp?02X;4X,q,q(h.B-PgdOe0u/t:TXW\@b@
%X(t.b1>\lRH7h@hH#r6;1LkOaL/m%F?`*39%7`>k89]2%_?K&mVh_NtrP_tTNjp[SI:Aa%9@:mDaZ;M2lbLa4M>F55rK&R(f%lDM
%5`d#il$&>>+3hJ5T<:h8R.rcK#J:@C-e',A?#_I!o8E8b)bPt$YNf59)n$5W3GIfPrV5RiQ1NX;:Y>>5LAEqmr)e796X\P&V]DS&
%#mCD_p60H]P$tEu'cr7rPB]m*H_LB`r?g^3F*Q0S7/HLM93QN]UjjEqjJkta$+j=9KT4&k1:UH[M53^IG&Ws'DT_,sSI@YId5:QN
%cGNW-6r`(MfeK=QL0Z>XS]=GeiId&"T*Qt<`it@I]eOBn4!h.A?IBe!c1],m`KKX+>"Re8@?W&4&6:8I']NZ)V4D(e.r\Rr_dhSg
%<X[*lULX'5qU88DL)p3E68?s,Ccg;8&Y*71SOV%jHt:qMNa%hT+7Y/I5!:BSZoA.kVa@<oV8E->feCL0qj:\*dWpnV>Yu5aH(8ZA
%iAfp/8BJUil=*0?):p"'7bY.O:rols_o^9m\FIcffgUsM&GKZIX<20e*g/D",#Q9RGh7L.O&eD2Os6163Q2L'Z(%q:._j]<:^Yae
%Co;3bc#pjGlFCPRNsp;8L,5%4++l(>(Fn/0;`EGH&/DJGam(2(%M'aC>uu(&V5j59EB<eGN>5k1Md&Ca!RhN>qUKdCBO?0L&g';<
%@uJfD>UbB1&'3_8>7[G7b%#'RZ.TnPr9uL;pF'U>&L%rq52D)VX-@UiIO\Qlh2T8[P3Ek[5cD5b?R'kHn%/SKe`*Ms(FZXNTo1RV
%e)Z6ODf-.:F6s$25qPi3;=O=70OYT"<GrMKLX6VBl%88dF42rhp8U,\E(*a)d(8ZJEaC9fOTu]0K\@"r]Udked@Hb^K#nKfK>%6s
%qsdt2T+/4H>9OVE]@XW^SiE`MSYC84Le]nbJ>tOOJsMk[W5L=n=Y.TSU2o(#Msi-bY!*3:M0E+>S<Q_YZZhGIcec6%2do1("/b%K
%U#EKq8O8+e7Jc::p:\#(r8n8V[`1lX-Yo6[VrI5d&sJMmWeAN!E'#'=\p/UU<ep!N)$F)S$5WFb89&H%"Ud$ek)AOS'RY+-I+)05
%"1`1ck%9057rU?rSD4f$`K;/Q%l1!@BLgF]q)E9[=q:R')lJdXZqU0`ZE>b^bL%(l;&odtmkTu^&L+PFUuI31Va$t$c;>*j/n4))
%oTh$Oo#[aP`9-nk(>D10OrZ_/iJW&F&/i(!ZZ;]IIU>7N:V#g`iO:dZnG0+&d6L?^?2Z)IpM5MY+P`a(DpYTO6M@Mb\lELM`B$R+
%+jH7!rG=N-E.p5.;n-lZpVMUd"m0;_inE)Y)>8231-s2%GIHo"(/;3HdDp09H9LKDe(%1bj$o1XaZ):13DAJ+p5"q*c$[NO?R<>m
%](=j%Y4t:W%"\2T%C>ebRpo96_e;akK;nhA$q!1KeTJW\Mf3`L:\?r^pf@,_H8+ED9!<S0,EC&38:o3H'37?2MnV5%b0K7F]?62O
%l5lZsrCDXZ8bO<.nFh#!N%VhJE8]+03-^:ta(!feia015]\)4P>5TB8+Ls5sT$jm`_R<K+9_`#3:(OU`7O2))5rS>bWA]O.;;=$<
%B,WXDU/R,Ih?H?.>qgA"Ym_DX;f<[emRX-T?3>m_[J5DJcTXh4gjMh"aKe\IK-62j:UFi[+uQiJjsSFBb0<uMl-8m>nkAF&Ui^fB
%8\AB[jfp:)\G:H\2ceUl+R1,DX%%2CCX<'])&m3:L2s6kY'k;FcJe<8?=@)%&u1oWO9PJB$h((<q*D4PrSfCg>XsUr,5OOr$1/fS
%#^$se+Z*:fSLW;rcn7Ou1k&MsdX!;4@QJ(<GXeVKX@&b2Yb*q>ai8,MVGNEOJ4ca:m;t!JrHuH6PlS-'@qFW;?uljkY!7N*15W.T
%:RG3gI$&=Z98*AOe]a3$X3XF8R+ReNq:RV`lE^#I:Iq#MS!u;aJ?Q(bKX2l.J8.W%Ir(nD)f=o_d-iG6EDoiliMRb%a>Rl$DPla6
%H*kTU7eH,X!XN7I8p'U%`73cWD_A2r5TsF',J*2*EJfMJ]%nNF/nnaU/P\MFC`2YV7W(&,dD-J:qJHN"7L()s2]$D`>XH)<&oFe:
%VPUi&ED>>E<PDG)H/Ae\6,"@]#]BA06H@^je<MHR;h?>nN1\nE&-lu@aCI6=Z#34)(:^maHe5d/RoJ(X%#WdZ#r,jHZBsM%VoGN?
%KniJ/2`3Ms-,e+uW83_B_OIjqm3Gj>MAT!fU"AL<NMNY`Pm.kLFD(?;D&9fgE]sUmGg.U>>qg.^o[riFf]'L!,I3N-,pZOKns!m"
%b86EDr;2W$a9=QddK_Ei>5rV5*dos=0t7MrIZ@H(dg>!r1GkNBkBp'l`FJR7QIm#)iagH^<qb-*J6:pY:NO7>0^+^[TD\[iLk^Pp
%(DCdE'1u3^2%ajB;>>2f1PG'^"OCZP7&W==s*TlpD'kGuB>-<!2R2LIpY6FsG/=18ru_:2otUP#mm$a]TDn6Nf5L]gGO+_sh5C;C
%e%bjnhlb/kY33"GrnXLP?LAMWqY.c'dpM1&p!_gskqE)3GG"p*p](/PJ,4s#pkQW^kC<>(p=+:nf`/+3NGu<HD*tR+ppcZK>+^H^
%gVm[LR*=_oY(,'j'9pJef<5s+4:`-U][^f1(>Zq?>Y8s@m('4<kK#a8CCK\geS>RIb5ckcJXkCq?k%"Q>IDHX5;:\"XS,J4_1?e[
%eQB/S(m/;gC2Z1rQ>Jc6pA(ah)MtU*Ik,*080cTLMDTc,Ff?3&d?i3uU+k,1XPDP(;L(aJcehinnY"<h^W^!_H5XW`[6suVPT,:E
%Jc??ia$J@90\q3Y`N'Z.hYcE[$kFXG/u*%BJK4]a:,93j(kP;ik/3%"B@o08!Kh4(&s?08&1!(MS_QtJn3`Jio3gmr1[H(W+RZ4=
%+8PuhAoI"^:12^cQGq%^l+8b<)u:]!R`6u<`2qR18cuuAjlopbjNT(C%A/-A:EPqodZCH+=]@Ns&E2gfC#9j^9i]<@F5gM<eU#B)
%JZS[6i%m>9$ueP8QbVJSds$0"NkVa`k<lK1[4De_OLKNJGq\I0H-&gc+d%h]"P%lY!?pB?5Q&bHBc*OQY*pNAUCd+G'l.U^oGH0Z
%q=DQ#s2aogb!k^X&/fl<H^_/fckQoDKslTVr!M,0ph^rnfmte&[4[`kcToZLbD=`8&)'MZ>,]D*CL:(es#ct+[)b7;I\\lK0RFJ[
%3so8?cNF-);>Un,9gZcg#jTq!PE)tTGu!c.s(6jmA"Jf&q"GI#H@&9X!WQcK?R),)*YeBui_Sh8Xdf"WgoS7s9mNl'X/k`XU=@K/
%Ln7Io#Nu4l-)fmQ'bhIAgEk]+im%=/7G,Rr%`0@sSgB`CYcM-cl1B-8lu:ZF_j5%km5IH%X?cYYRNhR5SBO0rEdQHrD^n+-'KV9I
%ldFLU]oO,&MW#V,oEp/ZdAtg<-.db@rHb&!Y+rqFJ3q%X@+CMcTEL>l7Fs+5[D=%,Zhh]XmhUpoRL_<5G\sk5LJVHi\/OT`1`qAR
%'fk!MA$BUJA"^Y@OWtENh4Bj>.L'_o.L'aAMG0G6,)BV_5#?50Zjc.B8`bMh,KZ>Ei1qMO%\sCd%\uZO12.)tRb!W/5-f$mLni\!
%SedHFO9?d`&Aa/27'JgT!Y]DAANpaMb%1mjGCLAL-%E?EhLeQK:P'nQ,f,;H6nfr?'5X?GdYQu+OP)7\h0"Q[ChcBkR0lWmTYj%"
%TEA&mq6pQc26GsJd*lCRZbdaHO8<o\(2`b%W&7BoWO37p3G5u:%=KDmEJYJ670C:6eYO&mP_g#?*JdVR;b<55_]"?:P!I,a/Ks@L
%H6$X;=:;*5O$39KLK(DpHR^U`+dHi]m-%Z2[91L?N_@):rK=ls^Ml69n"6YA$_u*U@>*Jf3Af=]CQ;&$,eXi%=g-bK[2-1jQQCb\
%gnXd^'usn;-Vpe*!mjDZDONL[cn0Q/e%H!oXrb)TQR-2pe7?NCB&R!9+j-?lD.1P?Gi\4_8HmmM[TPS1+We`H44/50g"hD9obhO*
%2RI'J&9SN?o3uP"V7"*J-MIm[Z5RMKR4K5=RB2U681'No7OD_V2*q<.NZlN:D;L(mP0<,Y7j-Y+\86TW#g><IA]-UIA]-UQA]ZsV
%A]ZsVA][$XAVK9u\L]^Qi3MDai\KMai%j:3k-F%fk-@`t4LqQh\-=R$^0t;\[Td_tae&/H[.mZD^?*#Jr3R(1a-n70,CUin@t)RG
%A:@]R<[BsVmkI%,P(5QRaa;6-aa8/4+&<W5H&q_LH#MW=AYK5]mkI%,g0^#8P4q#>I*527kgH"pE'I\Dfq%:(KNADhU8rsPBIu+$
%'BZ7SPN4.O''?-0VCrRK0LmFU0LmFU0LmF]0Lm]O_o>Qq--T6)-d5H0-co6---T6.--T5O<dA^"S?kQ8Zfg]CTuB@`21O%u;s'64
%gm_Q3*5u0G*(=+q*5u0G*&V\,En!;>kUF>mDL,t7aX,&+bU(A.bU&E,bLVI'0'LtkKOQ?Lm04F(]D!\?h=W4XBcO!4-^(Ai-ShS^
%Vidmi`.lQ9^<i,+PV49bUBd50Vl?g3,hR,dP$0%9M0sU<f6eh$"gZQcbQX/fM&/]8-=.h:OM!h:@\$UD[$YNX+G=Ct"`h-?Jj]<#
%D.Xd.hr]K%XH<RK1R@XJ1R@Wo1R>@41U`jMXp#8S:H`A.1T%]tfA!aCD)!tPUUVMhf31.3p`LPWgc_"/e5cg:,86,q@C:=rMDZMG
%QkOYdiLW&7`+W;o%dI.KAmR;u%(HfM:2N%Yh+>dM(JQM9?8T4.GgW<t4pT2sba46B/W,h#!\%?5e^4m`p%G7OL/bN5%mFQUT.>TG
%;OJCPZpJFXd0b`<7-fKWdQTHdBRTARl8(d2iHIb1?:uS8bA1ggV-r?#%4uiIM^HH?+i3.M`Eb*CT2;>mpYI5+G_$T5c.q'1YsaM4
%(Kd:I9=,OMJ^Ir&"\+E4(YCK!Q?"\i$`qR2,m7-\QTo1)('KpB\f;7V5-2!MWMJ^Wi>"iJL0*%,<75L2n-\J;-(S'GYHTc\dV78$
%$<r+j[)-:+!8UFdJ^E5QB^i%\Pu)(-r`3ZH5-5`0$%8]5e#K+,OK4+;6EZbc,qLi0T2lDj2(S5p1fZ/6;QOEGKubU`+DBBVj$Y1X
%,H[@i]M7]0VO?"9K;u9/<(,!cL&=s%ln6oOMX&XS6!B]c(1Bbp'gG^-7!Obqb]"56e^88p^!46qEbS@b6tZKZ"R119i$SUY*JS>@
%(,sh#Qb!C3OQjd@LhlN0a+V%eQJ1_JMNI$[TRIBU]4X?(+i%pD0:Q-/Z(P#$3jDfVSm"o?SN!>tihVcpVa].%n9",Y:-=R+:_]Wt
%."Qa!5"%'Zp(#4j^!?7K5L41Q@kk(R$.H\7C\&2\YL-$EiKgB"=Ir75(*oj74_[PkOB\e)Aqiso(#."I7:*E1rb-j[6oX=EQLkBA
%?AtXooBf]@OXZ1`j6][t]q`;5-Ak/T'fC%Ho3P1a[6TR\K_@n$nNlhL<^W<pgrBqcqeq2KI[lZ%lGlK\O-A!6-`'%&8q3@qr\uA*
%EDlYnV"D]!l&V%V+"*mL:.g#+Pl<WkrGba3j.u=f8a2;"dN9j55>Fh#S<X"4.K0;F8Z="%q<RW$[""p"$@GV_dLS?`(V,c5Wh(L(
%#>PilPYho%;+IV9[=.^sAmLL"C;&HLX:#Z+Y'aOEC.KGBX*+s^pG2pMr%#@N)(=>4o8bRn/I#AsS7)#55I7_4R01]pP\L_@DZUjF
%B*S4#mq2inKSY[C6nLUeq"^ub1R[#CriH=dqjC,u^7Y5g7-Aoa9_K(u<l4J,9I;p[chqtG:[.`O)t%>CA,UUk4nH9]lCYOFO(5`]
%>(POXBSC>o/65+Kc!'`Xd7Zg7j7!LM4VqHl0BI61A!>cYjk:[]MVP=N%7@$9:I-ulLH!Q^Q$V^A0oHb*[,\2[qX:p?:S=4pSe_4h
%QQ<a+-C^.akp"B+@Pcic5^-Ib08KTn)Hsef<o!WY<7Yi8J83u16+&T2(D7E0,)HY[]XBc_`$o+[mri/gT%iYK>mH1g5lVV@7^@r[
%rFQ;GV&"S@?EU>I4`+Q&f16Faa+dQ:m5TL_/)%Y/AM"6p.RFm6>)2gSUoAUJ(73JkgcI,n02VOIC[N+=2Q-AGjJfG%g.,\o4Glm"
%=gpBbOmPeRCY;q%`K,F3mjN941k6j\>7ZeC[]f8c22<$&Tpd57W$iU8<#6,PB8Y\?=bIK6fB,BsIf??\(P;!5>V"gX./)r6@k1NF
%7FE?SLY!<m[#=L4om<[pnS95Y=p+sl0^,GBFd[\DkI+!@3#"f)XD?di>#>`G9/:)n9A4]%Ve``MXkcg`*A,IIBT.;'D`&i5BrC8D
%bp#XmjrBInT+L3!_-N^6FE9]<U%PRl8d`WI`*)hl=&BHI586/eEttWlHaBW1,!<bKCg*l_lo:<SH%Z7dN(>@S,,'DUKd*(kUY!H6
%rHpdZEAV#h=[ERr8A5=TQ?kY>h\3+G$'/qImHl5t?PJ\k!lN;[4q-7jA"Vj,K$1Pp477hq"p@2.g\#\l=otZ;!O?e`2g&9j1Ka,j
%,dAF?dOm^"8EV'kF`I$:@;;ED2)JT-f9UV<,@OnL=LPY5W'K&DTM*Q:F>fOXdJGfK1+]eLd<DeYh:CEL2JG\.9>eKR$Mi\mXtS:8
%CK2K?`WB,jVCAar@b"7-b-=s(S'&l?g=U7&"^4o8C&WGE9fLp]B^/6XL8+2G\o))EZ,jX0cpb5aOLRpdlK>lsB.h]$ERdF(5h@(0
%DUc7[<O8T'8Ne[HQaB1Rm0c":JFNSL]Y,p)D07Rnh9KcJGk&^lb#c_]]*i>?LUO%R`*C:I0KWea68H$!2Luc+?Qd#XY-6FLY`[#8
%>.&IQ:%F,]*`f6n"\@"r.")E2U11Usic_rbUaZormR9OlW>cl5:"ri_GfsLtp)4uP.Q&:@l3:Hd^2]Hi;?JeIaJUAPQdm5hdgn;\
%e`&)W\tFasGn"\uQ%V9/NiLS/H=GA0B9]-p\dH7R0MIP6'(i=2n"Q7:4pYMYI9@hp+M-F*ltYkcWWl?na2,n"_2]8/acu.@GT[+!
%`.ID?Ms_DuC805OSjO57A6hZ!+[[Pq&AYT%YSXOFL58GGWngkG.pfVOg(P!YoNPGfe<ljJab9Y^l<cm.cG_."g>eVs9J\oI/;SHU
%@rY:N$EuhJ$j4ml23,?8RsO_HO87pf+d\@g7s3)-a>N9Phs@L6@C>OD.M&\&+G+0Q@"$,.AT_%bUn1K\>06Hi9rRhZLW@UA_kM`W
%U(3*aFN!%;X$D(Lh%/s\;lRGZXt\$k=c5Dp/h=gB'&5Y0B+$^Ee+GVql-"m2=94V;g8RMP%J68r%D19gP6C=m%rJ?H!U;RZKAOk\
%@Ub]Ggd+eS:0:Io`nM=+\K:aQB!!Rm)tZK=4L*69>5,&DDF/S@_1K=nfH!qll"_>o[)E^u=i6EFH`sT?*/?fP''Am;2Y;3AFZian
%KBBQ)K>jHETLm>-hUpN5U0Y<ne4;1Q%Z730X%9N,"Z=B%aD'NZ!OU%*Pl20S6od_&A60JYo\)E,X<0;'e^8fI"2/%<UeWh1/$Qa\
%`T3/-5Su4BXbG[.3E[ldg@[IW9KPP"@!'1jm>HC8Pu2@t"Go1?M]-N"`?6&)$j/SMnC'[M02A?f=^1C7@IS;"]cNY/lga42:D<("
%lJ[RR7-1^i4&J<d5O#i@9GFM:)'r@N<^l'$j$9m>e'J/[8Gphilqi4?CfX-L-4DM:W4Mt*o&2.nT]cK.qBB*!b3!/Ib.DEI88l`#
%3*c?sP^+(kCO=^"Y3>._nqEAV9Q6A1!6CBhHj1Ospr![TfVmb52(^AgfJJfq,Wd8p$]l'tQr)2K1OPod*E6+>S&YB0,3WSA//\(R
%6!:D&=J.kY&sGge)8)nuC_-'2lZ[c$pZ4!CO5dE6mPf]-=#hi43Y6SAr+&1:VrWe+&M\M18cF$M*@pMO8(MkV;a:B;1S1B=;D(dR
%!UZqneC>qf<J^l>Q27NgLNdZ6A34HNMTl<iim>*tp.l?Z.]Hi`?^jA@^$%S:RLS(*0o2[8f'5F!EA.cHD&uE2p>T]?H#9efSP>qa
%=3L*h=tKLjBXf'`Jjm$P,^M/;Jg,@Eft/RBpd)IJTof*]OEFNV[XH!i#CGg@+skH9Eu_0_Tej3K:gEZt`3@p)#H91ShX:nGI0r6a
%FqEEG-Y2nHD.b`c!H9hh_Q;8DJA38eE&Y8n;=Nc6n0`c&ARJJFh\97jQWg7SFh`!U"UVXYp/e3s[^[m+#Q_?X(R[P^DHBi++2"1\
%ef:Kg5eHmD(7jqR*M1r_;G+ou%'Yc:OK^N_3N4PR=g`/7.a[1>&Y8sX)q<.3d+q70PA<GQ^J(Tkb8\jhdW+0d5;X4'lai;KRYgTH
%J^^J8+J<5\>$f^H.*ur?6%OtUP4W&13,*B_KmRJ?:-a.h*J2Q`#JB?bF3*4g=;cF(%;pa_BWDI\]&hZ_hD>_VS?&\fVhMrg<R=b=
%;?%^j4KPCh_5`iWf&CF?43X0rh6=.9>pA[\AF$g&:5EZ7?;6\aoau']oD+uYCT5\-jaP>6#X"&2)I-N^$"I81K<gmX]rM)2;Uhhn
%<AcO_WkMe=W9A)`C+?P(.seZ?9l@c.\]]'M*,%dK9gIID1kP)E?2Yc@i)("@BD);%7To%q5("<eYqC#pBjD\nrDt,t"JBF\TdKDZ
%2aT/P"&5]`A,)4$4G&7,Y!IEa2V1RJ]Ck>hmgmt\mG^MHkk+#5G12rWV=l*V50Q9m3MX<0GI6FB$lkRNjr=s?Lu^/4]IMo((8u06
%Id*[eQb94GI(S4.'+at;gt%$_%7o8$$>md1la6r*F7kSr+(ZIaVf*&8S4</,#Hm&k*aHt1=g(Qedprf7-85<NFRFGA],2SU&M@PO
%0P4H@9l/@TcqB5L3Y$$'!V9XYc1U8\!48hcT%OVl;[N+RVFBpf.:`rq>>%)DR8):6V97JQ/9S),<'*_A&mbL(I3B3FP8YPk8PRPF
%QU^k7h))^Zq,+K=S/jJB(2+='5!]bA7\.nEG47L>o72<HTn!$Q.B+uqH\m_`-fen7)[UtQE(Y0/hbWkn4hp*o'+&A7-)CKc.U#eu
%44_:N/gSY-Wc957V0,+3",]tnYj5X`$ZhP9O;a#'7h1C75':6-d!D,7[VUW27eE,L$V0.kk%M2272o7e(@)\rVUZVK[YV9oqARbU
%?LcY"_Apf9n3In-8=ckkBfMpcYYor[qa-sZ&VW$r$Em86F#7+rj"GGYNO$dk<gj6FM=(8XBO&)85>]W!4SCG%dQ<h,0<P"il'1?E
%4h'#1BLhG,$Sq.$U9IJAkTqs+?WtfFMBtn((]5j<.njIA[qp2R6J=jqeth0V9<6-6CL@k^Xas[6;TOk-cPouIH:(PII;@Q:+"Eui
%ASX`P`C-E(cE:C-ZsR\)%Nk)GGM<],jB[Y,=ps*X]=3l$ABH1/WA\\Y[ApYs_325pYTPOFMb$M5,2+BWi-\l.K/1&[rXEuo0YrnX
%9X#cD'.eoS<qd&?&]_mZB[[.)6OPBjaLj(u3/6btp#pTVHcmYWIMLD5DeS"!jk`lOR[$peIk2NEP^%,(MVIQTP0-tOnW*&)lo0$=
%;CEPIG)b'/dCq,$+^j0d%A[[:O:e=bBo1Qbi$E_&7_+R$,eklq];ntiUF8Oeg)UWcUIoMW&FkHWZcQ(kMe.a]UDHR>rCI&1gg=hR
%0WB0\lCNCMCINLB%Gc*Sl_dC@JMKec-;@C#8J>&Kb2<DLm<9K,LggG^@$r]'=J?1_QKUZqlKUpRU!9Wen6gMA3ER2N*29P/c=/HT
%>UG,%^M!o&"1[EOL4i`aDF;UQma$(Jfg(BaVW^_ng"Z@'<4:VF$oeHKPn8#Nn*2tTk$1"]m4K(MjDErtq!^hWSVQK6<Lof669cdi
%Da8qH&>er"2Gu5Vho94P[JdOWRi[fT9A2E9G#G1Mh'0jk.FVobAJf;]L.?UhI@T[gY(GC0k8fO*ZjE5n@&^J<:\emAMguK_66-nH
%*:#rsd(m3a$#7`9#ii[nr[b1j3BAYRqm'#IG!iGBHX4;qX3jrL$Z.=b2&mLe7^H<Id7N/4S"&8NgI+.o]T3^=d>:_Dr7pTYh=SqA
%R^KgN8T04.Mi2bCb_oK1qPo5O-A9nNO(Gj4[qI5W)k)E;n\u\b\CoVB&"da<Kd5Ho_#:97&%9M81k^ZY5\p)kl1BZ@i"mF\3t&l.
%Fh_-fe?;?SS$_QCga"II6`uh?C:H'WF6R8NXX%3o\WV2c>a25\]_<2^?@.$nhD$'=FofW-Af;98oH;''a4"?8SddLol3f#7&.dM:
%2E+86']WH;S3Ji&:f,BSEnm;+Ti-<Glf`"a0m_K')Pa@)H2o7DD2oBOV@.Ve6V+PtG<YE0=%'9,X`p:nl!?a>3umU0],BLXR[cLh
%aP(,3UR`!:&DMVC"M!oiU&Bup6D/Rm[bN2*_:C;XKB'8UX](Akl0`9,mo*$R;jgGHL@Y4rP*@"a%mT45k,s@[$ft+>Q*;(X?:B4F
%GcU-bm_S\df'XfF$d7qo=i@oE@tNDM9JktI"7p'b]^fn#`6uYsKVa*fkgJH/)PbBK<Vr=j9S+PAcCK)m0b#0S2OCf%7>C$.kC#pS
%Jbk"@iAY-gQ'npJoOKHEM6]VSALd('AIiEo:M!<GJ0)iS&VO1gRji]pI$i(B7+jq,WESjdjTc6[aPo1XgPrZ+9jfH*ULp0.&tGq'
%AkF=GSB9D28gK9_5F"c9l)@&tBo%T29Sk%C&/E)_6ps^Ed6L*)X?#^SjZu3\D847QU$Xb%DrKb"Ju>MZYYfFYR,Btb9^nPl-?trX
%a+t@QW5fOVqbW?1N+A[d("kuH1,?\`f>JBlZT[;>6RQc>m;pV`T)0M\C+"LLZHqVpYQ:+)_'W#S";<^AJr,DTJ]E39JPLMDlQ&]g
%&Ts:J9\qss^$0rRo%'5qI8\J7]A,=l+n%JHR)h0Jq0UGIM'dhrgLhI(c3,)V3>65^+ft\pG<0Vt>.PYb7'afRSB9ng,\-,*al]1<
%//.bD_q198(14QcEH0Bn=3hY%mn4sKUse2eF".V/Xe=,#d#.KWpk)?4#Goa(d719"BCWf:(X&(KFh(c1<L:'W%O*=hC"75GmY72N
%GNUB6CnG_,5_U2q`_n9LVJGUZ2QhHT\q\KS/th"5ZXDk.XA@?\FUYlVU9eLc"8DDc`"\/_@*`9lJmGN>4$8Wc455EE#25k#QUgaO
%bn!5Q=0$)JYP63SD<H2B89e>4RFc;Cl!t60n%fpTgiELYqt'[N''G#rf5OsJnO/pk9]r3WSK/ITFACh4'+`tckAUhcR3+gRR4X2d
%_a,-<Wr\T[`mYHTnTu7/8K?OG+=n7T4pXdbT+Af3[VbtlS;=EBkAat2c[9CAp'@:N>oe85-V=Gma)N;Zn2sI!;u1L(Ld9bYET31>
%7c#s']PAVL.'dVK#X7Ir6#b.j'\'I3G&W3@Sd0HrBf*X_Bfs3lBfs4?Ka\V7B#l[Bi#4cOii-b.`Y`g2I[Jss&Y6LA)[t5U2EG(%
%PI!WF#<kV;M-/GJ0KD55qp2T9+rCtP$-'nXJh_9$3#QBKf#^0]>S<!C9JNaao/i\T#7T+1&CIJHa6?:RCkTm!D7%u,13IXbLqML/
%>SQY1&"4lbR(>R<->l_?M&V2jE(1p>s4a3D>\`IIr8EV1A`@;m!Yb;o6e@Ut(ksp=1$g_a9L,2uZ[Bq,FuEe-HYkh64;0_h1_[Am
%iX(4"kX\SC3/]-[nl-l_q=m2<gLcno0GPI*YRR&@\TroP%W&Y;nZFJd3;FG:<&V6E)\DEN4U6Wcim.Ye(.eV&/Wr-gS.,`fTBCac
%[f:b@]FE6!TP]51"`7kYn($+&!#;*k@\D@fjX:rtHKj84-f5LRR5SWrG=b7J%IOZfq$ssWT6s/HA^]'7hskrJ1c_e+mWCk.>_F(e
%b9NrA\U9X0>X$k8/lT6(#hai)0=0N^>q`N$3n[s+fl'.]%Ha]OQ@>7S@#8h!`<(]Ajc!^nW5k8KW@Ze8pg5F\YZ^?Z8p97AO<H("
%c^Z.-:s-0*+(9t/$ku3'EYnB>JC[)IL\qE%>4p<Wc_kO50$TsmqO',b"e(+#NtBg>`?uZjIl0S+PC(6_Q/J/UM+Pu1P.mLNS-b%o
%52b<lGg;DhUur.XhbO(u>sJ>u!Q3&n?On*1Db@=,r'h0hESUPeW9+ZtoQ<\$Yt$S#>73)W.<&s^_J`Jsaeq(F&Ibo%/s_-n44oTb
%JiUP_bp*-WmM8,*O`RB1b?;./qGX&j45))ohQ6rs)Y_^&?KCsf-A$j-7rT,b-rH17N7i9Ul.[l'fnHJnnG946Z?GTHhX&+=CT+gq
%^'=4[#,)?H-7r>\F%W5@L2nK5B:N?3D,pFV6Z4R3[&NL#6cR6Yk$,e"p9c8_Ng)qo6H1?U0'1/kV(\Ktf\(AqA$dA*_#qpg,ud!^
%D82e$Ze)S!02>Wum)g;W".$[TA[/87U_8(b-t5-pMG^`78#_2,Nf>;c'"T7:W!:Pi`@8?51n_?WG/tTZE():`1,]=3;:"8XU<tn&
%rU%;Ta-"S0l)lfVmZuk(3A`(n$2C3</A']>kLCP'28^\\Ha6d)jh.@L00/VmNt3(22KpS=<*"AD/:MA:!k6=9-*;k]lKpW*<m-'#
%+qMImM^Rl<6kmQ6YZuP4n*$MMQ`,h^@ZBrXHP6!;)C::9$HllKGi*'^2mIYG31&:djG0e@3Lr<eW4H3<KT=5n4["?nO-u0316L_q
%g3i@!c5t2,lG=WW@5'pCk[]-9PW1>QT4'ZbU]uVk'A`:1j3-^HaYeK/HL<*F,fqWZge(_SAqh?LT>5`-K!h1W:C:dl!i?!lf>t7*
%6dZjhf<`Q(Vk.;d($i$W(ZaH%WPhc<g9-*ZQ91PbRIoIC/TKs8a8n6"a$p?J2Q5YlS/8Sh:hmM`lh,<o%CVUSX@JKj\COTnbpFki
%;tSc'T@8Epj-a[Q?ds^%]4#0a@gHj^,Y"N`lYL!ihSqmCo2r;4mWG6E8HU1T^Z;&P-!M/6a<7T1-h+Oi?hX"%l&ol<[!f/N2atJa
%=!Y1mW^+jP`K208H:bRmZC"4U-keUFR%lUge)NiBC77\c.$H&`R%nlBAKsUQ"Hgc:MgTPc^b4i]oZ4>pb-<H8akLn.=QFZ#X_1&t
%qtD1cE+O+GWfUD2fn0j&hRPhtgbCHK4A\pbT3lrL!dB:D2:F!H)DBqF-,4*_7;l/cc:KS@EZ[h-'=+6KbFPQAbKldYS4`g(jo)AZ
%kt0A[2%Z?U[X/skAWRf78.EejE@A&YClE*'8A2hSOj:#gV!1a<7oRDmKokX=A(([g3G)Tqlp`B2c`]L?8fi.nBfp9"BnY!Q*$*'_
%4J(TqVR+m*+q;t7>^7HshBJsu8Vr!\8!9fY<.3eBF7`3:j=!1F9o1tc$%!GmM)StU]oN^glKXYXpk*;[52(E5:e^jbpPJZU![NoS
%T/NX9!t%b<6iJn#ZrUK4W]s(pU@D*hZY/JUG@\lnDqP?9a%+;qR\gk_kSHJ)h>mr#]M0Jg6S']9Br\.d3BAdCnSqn9B_o$'NcFpZ
%=c!Pog@KqZeLS9`ZpWWMf%;,_6lrN_^c]:/$?u.7#/%Nk6t4'I"&n7?=&uN!B[_mMnMO&+C?W32%UR9'\Ve8<CW9EhfW,n#\-Z1\
%j)UET-."gLh-,>QIoiCTe+>l%>$!Sg]:)BiKptZjjD\dTlTioiauql5k'\hO<@H8R<6B=7EX3o^3R=-SAs<RW%G>7JCbOO>?aaPY
%k"Q%,IZbUl333?D1hk,]]?Y$7aum>NSm^VVW1j,>'l*NE++4#_([uX`mD&N/J,2sEhuB$-r:r:d\U\&eYJ:*m5Q#GLrr#'1rkk@X
%ol'igT7?ljs5DGqs7E4=qTJ@-nq[82qWZHnr:pm'r0Mp0o,g0po7-b;rs&g9MALa?li6Ihr6N.S2ubP!UJOV~>
%AI9_PrivateDataEnd
